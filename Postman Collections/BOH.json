{
	"info": {
		"_postman_id": "4e033a36-c6b3-441f-adbe-21116eba6376",
		"name": "BOH Collection",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
	},
	"item": [
		{
			"name": "Inventory dashboard",
			"item": [
				{
					"name": "Get Inventory Summary For Dashboard",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d02f7d6f-cb1b-4163-9f86-26450d33459a",
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an object with title, data, statusCode, and isSuccess properties\", function () {\r",
									"    pm.expect(pm.response.json()).to.be.an('object').that.has.all.keys('title', 'data', 'statusCode', 'isSuccess');\r",
									"});\r",
									"\r",
									"pm.test(\"The itemizedInventoriesSummary array length must be greater than zero\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    const itemizedInventories = responseData.data.itemizedInventoriesSummary;\r",
									"   \r",
									"    itemizedInventories.forEach((item)=>{\r",
									"      pm.expect(item.inventoryItemCatagoryName).to.be.a('string');\r",
									"      pm.expect(item.beginningPerpetual).to.be.a('number');\r",
									"      pm.expect(item.totalIn).to.be.a('number');\r",
									"      pm.expect(item.totalOut).to.be.a('number');\r",
									"      pm.expect(item.currentPerpetual).to.be.a('number');\r",
									"      pm.expect(item.id).to.be.a('string');\r",
									"      pm.expect(item.itemId).to.be.a('string');\r",
									"      pm.expect(item.referenceNumber).to.be.a('string');\r",
									"      pm.expect(item.unitOfmeasure).to.be.a('string');\r",
									"    });\r",
									"});\r",
									"\r",
									"pm.test(\"Response content type is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"IsSuccess property is set to true\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData.isSuccess).to.be.true;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"StatusCode should be equal to 200\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData.statusCode).to.equal(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Title property should be a non-empty string\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData.title).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Title should not be empty\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "f21b5b36-e694-4b7d-b09a-805230ade549",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "e5cfa4f5-b0bb-4a08-9380-aa40b06b4e92",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{BaseUrl}}api/inventory/summary"
					},
					"response": []
				},
				{
					"name": "Get Inventory Item Transaction Detail",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "25e99a51-4c01-4385-bafb-17c5e3c77b9c",
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an object with title, data, statusCode, and isSuccess properties\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an('object').that.has.all.keys('title', 'data', 'statusCode', 'isSuccess');\r",
									"});\r",
									"\r",
									"pm.test(\"Each element in the data array has specific properties\", function () {\r",
									"    var data = pm.response.json().data;\r",
									"    data.forEach(function(item) {\r",
									"        pm.expect(item).to.have.property('inventoryItemName');\r",
									"        pm.expect(item).to.have.property('inventoryItemRefNumber');\r",
									"        pm.expect(item).to.have.property('beginningPerpetualQuantity');\r",
									"        pm.expect(item).to.have.property('currentPerpetualQuantity');\r",
									"        pm.expect(item).to.have.property('transactionDate');\r",
									"        pm.expect(item).to.have.property('transactionType');\r",
									"        pm.expect(item).to.have.property('quantity');\r",
									"    });\r",
									"});\r",
									"pm.test(\"Title is a non-empty string\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.title).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Title should not be empty\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Data array should have at least one element\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData.data).to.be.an('array').that.is.not.empty;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"StatusCode is a non-negative integer\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData.statusCode).to.be.a('number');\r",
									"    pm.expect(responseData.statusCode).to.be.at.least(0);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"IsSuccess is a boolean value\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData.isSuccess).to.be.a('boolean');\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "c3318b3d-907e-437b-a603-be782a5ee8de",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "5285ef79-f937-4307-9883-55dd24c6b21d",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseUrl}}api/inventory/item/transactions?inventorysummarydetailid=7A69CCB5-E8BA-4652-83BA-05F509040D2E&inventoryitemid=87665EAC-9780-48C5-998B-00CE5A05C965&transactionDirection=",
							"host": [
								"{{BaseUrl}}api"
							],
							"path": [
								"inventory",
								"item",
								"transactions"
							],
							"query": [
								{
									"key": "inventorysummarydetailid",
									"value": "7A69CCB5-E8BA-4652-83BA-05F509040D2E"
								},
								{
									"key": "inventoryitemid",
									"value": "87665EAC-9780-48C5-998B-00CE5A05C965"
								},
								{
									"key": "transactionDirection",
									"value": ""
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Inventory Transfer Pending",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0a84f799-7ac9-4a3d-bbdc-bc9e4bc481fc",
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an object with title, data, statusCode, and isSuccess properties\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an('object');\r",
									"    pm.expect(jsonData).to.have.property('title');\r",
									"    pm.expect(jsonData).to.have.property('data');\r",
									"    pm.expect(jsonData).to.have.property('statusCode');\r",
									"    pm.expect(jsonData).to.have.property('isSuccess');\r",
									"});\r",
									"\r",
									"pm.test(\"Each element in the data array has serviceDate, status, transferType, and id properties\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    jsonData.data.forEach(function(transfer) {\r",
									"        pm.expect(transfer).to.have.property('serviceDate');\r",
									"        pm.expect(transfer).to.have.property('status');\r",
									"        pm.expect(transfer).to.have.property('transferType');\r",
									"        pm.expect(transfer).to.have.property('id');\r",
									"    });\r",
									"});\r",
									"pm.test(\"Response Content-Type is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Title is a non-empty string\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData.title).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Title should not be empty\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Each element in the data array has a non-empty serviceDate\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.data).to.be.an('array');\r",
									"    \r",
									"    responseData.data.forEach(function(item) {\r",
									"        pm.expect(item.serviceDate).to.exist.and.to.have.lengthOf.at.least(1, \"Service date should not be empty\");\r",
									"    });\r",
									"});\r",
									"\r",
									"pm.test(\"Schema is valid\", function () {\r",
									"  var schema = {\r",
									"    type: \"object\",\r",
									"    properties: {\r",
									"      title: {\r",
									"        type: \"string\",\r",
									"      },\r",
									"      data: {\r",
									"        type: \"array\",\r",
									"        items: {\r",
									"          type: \"object\",\r",
									"          properties: {\r",
									"            serviceDate: { type: \"string\" },           \r",
									"            transferType: { type: \"string\" },\r",
									"            id: { type: \"string\" },\r",
									"          },\r",
									"          required: [\"serviceDate\", \"transferType\", \"id\"]\r",
									"        }\r",
									"      },\r",
									"      statusCode: { type: \"number\" },\r",
									"      isSuccess: { type: \"boolean\" }\r",
									"    },\r",
									"    required: [\"title\", \"data\", \"statusCode\", \"isSuccess\"]\r",
									"  };\r",
									"\r",
									"  var response = pm.response.json();\r",
									"  pm.expect(tv4.validate(response, schema)).to.be.true;\r",
									"});// Verify the length of data array\r",
									"pm.test(\"The data array length must be greater than zero\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    const data = responseData.data;\r",
									"\r",
									"    pm.expect(data.length).to.be.greaterThan(0, \"Data array should not be empty\");\r",
									"\r",
									"    data.forEach((item)=>{\r",
									"        pm.expect(item.serviceDate).to.exist.and.to.have.lengthOf.at.least(1, \"Service date should not be empty\");\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "2bc3858d-a8ed-4417-9d3e-4c147a65391f",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "9c3a5cea-9262-4652-8cd6-ff0ed3e2cb8b",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{BaseUrl}}api/inventory/pending-product-transfers"
					},
					"response": []
				},
				{
					"name": "Get Todays form status",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9172bd98-7f42-4187-92ea-4e466df79d8e",
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an object with title, data, statusCode, and isSuccess properties\", function () {\r",
									"    pm.expect(pm.response.json()).to.be.an('object').that.has.all.keys('title', 'data', 'statusCode', 'isSuccess');\r",
									"});\r",
									"\r",
									"pm.test(\"Each element in the data array has formName, status, serviceDate, id, and isDueDateExceeded properties\", function () {\r",
									"    pm.response.json().data.forEach(function(form) {\r",
									"        pm.expect(form).to.have.all.keys('formName', 'status', 'serviceDate', 'id', 'isDueDateExceeded');\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "39c31bf8-83c6-464b-a763-6b5ad913644f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{BaseUrl}}api/inventory/todays-forms"
					},
					"response": []
				},
				{
					"name": "Get Inventory Pending Form",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ea33ba1e-cc50-432c-8b11-5cb16c0fdd67",
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an object with title, data, statusCode, and isSuccess properties\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an('object').that.has.all.keys('title', 'data', 'statusCode', 'isSuccess');\r",
									"});\r",
									"\r",
									"pm.test(\"Each element in the data array has formName, status, serviceDate, id, and isDueDateExceeded properties\", function () {\r",
									"    var data = pm.response.json().data;\r",
									"    data.forEach(function(form) {\r",
									"        pm.expect(form).to.be.an('object').that.has.all.keys('formName', 'status', 'serviceDate', 'id', 'isDueDateExceeded');\r",
									"        \r",
									"    });\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "2c82917d-fde6-41c9-a02b-bc719c6261ca",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{BaseUrl}}api/inventory/incomplete-forms"
					},
					"response": []
				},
				{
					"name": "InventoryItemTransaction",
					"id": "898e8584-7809-4150-b76c-9632ad5d9667",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseUrl}}api/inventory/item/transactions?lastReconciliationDate=2024-02-21&inventoryItemId=7fb26cb7-bb16-429e-b301-00e48a786343&transactionDirection=in",
							"host": [
								"{{BaseUrl}}api"
							],
							"path": [
								"inventory",
								"item",
								"transactions"
							],
							"query": [
								{
									"key": "lastReconciliationDate",
									"value": "2024-02-21"
								},
								{
									"key": "inventoryItemId",
									"value": "7fb26cb7-bb16-429e-b301-00e48a786343"
								},
								{
									"key": "transactionDirection",
									"value": "in"
								}
							]
						}
					},
					"response": []
				}
			],
			"id": "eece15e7-f2bf-45f2-aa4e-14bc3283b4df",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "2db74fa6-2e46-43be-b0b4-0207094c3f31",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "2789d0c1-66cd-4acc-85b4-c4fd27202b8b",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Occurrencelog",
			"item": [
				{
					"name": "Get OccurrenceIncidentType",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "489733b4-bfaf-4342-9230-b02d89476f40",
								"exec": [
									"\r",
									"pm.test(\"Response status code is 200\", function () {\r",
									"  pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required fields\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.have.property('title');\r",
									"    pm.expect(responseData).to.have.property('data');\r",
									"    pm.expect(responseData).to.have.property('statusCode');\r",
									"    pm.expect(responseData).to.have.property('isSuccess');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Data array is present and contains the expected number of elements\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.data).to.exist.and.to.be.an('array');\r",
									"    pm.expect(responseData.data).to.have.lengthOf.at.least(1);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "d434cb11-ac88-495f-97d9-6b1e143d2694",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{BaseUrl}}api/production/lookup/occurrence-incident-types"
					},
					"response": []
				},
				{
					"name": "Get OccurrenceLog BY ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b5a35c5f-a7ce-48f3-b734-2a1d43d52452",
								"exec": [
									"pm.test('Schema is valid', function () {\r",
									"    var schema = {\r",
									"        type: 'object',\r",
									"        properties: {\r",
									"            title: { type: 'string' },\r",
									"            data: {\r",
									"                type: 'object',\r",
									"                properties: {\r",
									"                    id: { type: 'string' },\r",
									"                    sfcode: { type: 'string' },\r",
									"                    workflowStateId: { type: 'string' },\r",
									"                    occurrenceIncidentTypeId: { type: 'string' },\r",
									"                    occurrenceDate: { type: 'string' },\r",
									"                    occurrenceSfcodeList: { type: 'string' },\r",
									"                    occurrenceStartTime: { type: 'string' },\r",
									"                    occurrenceEndTime: { type: 'string' },\r",
									"                    isFieldOfficeCalled: { type: 'boolean' },\r",
									"                    isSendEmail: { type: 'boolean' },\r",
									"                    emailSentStatus: { type: 'number' },\r",
									"                    additionalNote: { type: 'string' },\r",
									"                    createdBy: { type: 'string' },\r",
									"                    updatedBy: { type: 'string' },\r",
									"                    createdOn: { type: 'string' },\r",
									"                    updatedOn: { type: 'string' },\r",
									"                    isDeleted: { type: 'boolean' },\r",
									"                    isActive: { type: 'boolean' },\r",
									"                    otherIncidentType: { type: 'string' }\r",
									"                },\r",
									"                required: [\r",
									"                    'id',\r",
									"                    'sfcode',\r",
									"                    'workflowStateId',\r",
									"                    'occurrenceIncidentTypeId',\r",
									"                    'occurrenceDate',\r",
									"                    'occurrenceSfcodeList',\r",
									"                    'occurrenceStartTime',\r",
									"                    'occurrenceEndTime',\r",
									"                    'isFieldOfficeCalled',\r",
									"                    'isSendEmail',\r",
									"                    'emailSentStatus',\r",
									"                    'additionalNote',\r",
									"                    'createdBy',\r",
									"                    'updatedBy',\r",
									"                    'createdOn',\r",
									"                    'updatedOn',\r",
									"                    'isDeleted',\r",
									"                    'isActive',\r",
									"                    'otherIncidentType'\r",
									"                ]\r",
									"            },\r",
									"            statusCode: { type: 'number' },\r",
									"            isSuccess: { type: 'boolean' }\r",
									"        },\r",
									"        required: [\r",
									"            'title',\r",
									"            'data',\r",
									"            'statusCode',\r",
									"            'isSuccess'\r",
									"        ]\r",
									"    };\r",
									"})\r",
									"\r",
									"pm.test('Response status code is 200', function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"})\r",
									"\r",
									"pm.test('Content-Type header is application/json', function () {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
									"})\r",
									"\r",
									"pm.test(\"Response has the required fields\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.data.occurrenceDate).to.exist;\r",
									"});\r",
									"\r",
									"pm.test('IsSendEmail are boolean values', function () {\r",
									"    const responseData = pm.response.json();\r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.data.isSendEmail).to.be.a('boolean');\r",
									"})\r",
									"\r",
									"pm.test(\"Response has a valid workflow state id\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"\r",
									"  pm.expect(responseData).to.be.an('object');\r",
									"  pm.expect(responseData.data.workflowState.id).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Workflow state id should not be empty\");\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "eaaacf38-a59b-45dc-b9af-63b5e1d17132",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{BaseUrl}}api/production/occurrence-logs/b7d0c476-70db-4a57-94c7-fa007d9a7517"
					},
					"response": []
				},
				{
					"name": "Add Occurrence Log Data",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7c352c2b-fc1d-485d-bf6e-60db8b4a6cde",
								"exec": [
									"pm.test(\"Response status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"pm.test(\"Response Content-Type is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Title is a non-empty string\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"  pm.expect(responseData).to.be.an('object');\r",
									"  pm.expect(responseData.title).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Title should not be empty\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"StatusCode is a non-negative integer\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData.statusCode).to.be.a('number');\r",
									"    pm.expect(responseData.statusCode).to.be.at.least(0);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"IsSuccess is a boolean value\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.isSuccess).to.be.a('boolean');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Data field is present in the response\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  pm.expect(responseData).to.have.property('data');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Data field should not be null or undefined\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"  pm.expect(responseData).to.have.property('data').that.is.not.null.and.not.undefined;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Validate response has required fields\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.title).to.exist;\r",
									"    pm.expect(responseData.data).to.exist;\r",
									"    pm.expect(responseData.statusCode).to.exist;\r",
									"    pm.expect(responseData.isSuccess).to.exist;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Title is a string with a minimum length of 1\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.title).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Title should not be empty\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "e952521f-0a8f-40c6-9c8a-526434cd8297",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"occurrenceDate\": \"2024-02-08T10:42:38.108Z\",\r\n  \"note\": \"1001111\",\r\n  \"workFlowActionId\": \"Create\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseUrl}}api/production/occurrence-logs"
					},
					"response": []
				},
				{
					"name": "Update OccurrenceLog Header",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3ceb9422-cd64-4269-af21-85830a049f19",
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required fields - title, statusCode, and isSuccess\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.title).to.exist;\r",
									"    pm.expect(responseData.statusCode).to.exist;\r",
									"    pm.expect(responseData.isSuccess).to.exist;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Title is a non-empty string\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"  pm.expect(responseData).to.be.an('object');\r",
									"  pm.expect(responseData.title).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Title should not be empty\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"StatusCode is a non-negative integer\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData.statusCode).to.be.a('number');\r",
									"    pm.expect(responseData.statusCode).to.be.at.least(0);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Ensure that isSuccess is a boolean value\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData.isSuccess).to.be.a('boolean');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "3e4c148e-33c0-4919-b235-8b71290fc2f9",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \r\n    \"id\": \"b7d0c476-70db-4a57-94c7-fa007d9a7517\",\r\n  \"occurrenceDate\": \"2024-01-08T10:42:38.108Z\",\r\n  \"note\": \"Updated note\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseUrl}}api/production/occurrence-logs/header"
					},
					"response": []
				},
				{
					"name": "Update OccurrenceLog Data",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9544217d-68e3-49dc-9845-a5db8bba3e02",
								"exec": [
									"pm.test(\"Response status code is either 200 or 409\", function () {\r",
									"  pm.expect(pm.response.code).to.be.oneOf([200, 409]);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Content-Type is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Title field should exist and be a non-empty string\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  pm.expect(responseData.title).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Title should not be empty\");\r",
									"});\r",
									"\r",
									"pm.test(\"StatusCode field exists and is not null\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    pm.expect(responseData.statusCode).to.exist.and.to.not.be.null;\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"Ensure that the response contains only the expected fields - 'title', 'statusCode', and 'isSuccess'\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    pm.expect(responseData).to.have.all.keys('title', 'statusCode','isSuccess');\r",
									"});\r",
									"\r",
									"pm.test(\"StatusCode is a non-negative integer\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    pm.expect(responseData.statusCode).to.be.a('number');\r",
									"    pm.expect(responseData.statusCode).to.satisfy((statusCode) => statusCode >= 0, \"StatusCode should be a non-negative integer\");\r",
									"});\r",
									"\r",
									"pm.test(\"IsSuccess field is a boolean value\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  pm.expect(responseData.isSuccess).to.be.a('boolean');\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "65d65a7a-8f59-4218-a7c2-c46c3be34703",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "fb59c741-a648-4b6d-9014-be00cf6397fd",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": \"3bc9bb74-4e81-449f-8d59-26f3d076e845\",\r\n\t\"workFlowActionId\": \"Submit\",\r\n    \"occurrenceIncidentTypeId\": \"other\",\r\n    \"occurrenceDate\": \"2024-02-02T14:06:04.050Z\",\r\n    \"occurrenceSfcodeList\": \"Xyz\",\r\n    \"occurrenceStartTime\": \"13:58:41.658\",\r\n    \"occurrenceEndTime\": \"13:58:41.698\",\r\n    \"isFieldOfficeCalled\": true,\r\n    \"isSendEmail\": false,\r\n    \"emailSentStatus\": 0,\r\n    \"additionalNote\": \"Edit test 102\",\r\n    \"otherIncidentType\": \"Edit test 102\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseUrl}}api/production/occurrence-logs"
					},
					"response": []
				},
				{
					"name": "Delete a Occurrence Log Data",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "47ebdb08-1959-44cf-a977-8caa905516e7",
								"exec": [
									"\r",
									"pm.test(\"Response status code is either 200 or 409\", function () {\r",
									"  pm.expect(pm.response.code).to.be.oneOf([200, 409]);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required fields\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.title).to.exist;\r",
									"    pm.expect(responseData.statusCode).to.exist;\r",
									"    pm.expect(responseData.isSuccess).to.exist;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Title is a non-empty string\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData.title).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Title should not be empty\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"StatusCode is a number\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData.statusCode).to.be.a('number');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"IsSuccess is a boolean value\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData.isSuccess).to.be.a('boolean');\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "5224b93a-8e1f-4737-a468-0b13c90ef152",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "25da4a4e-2838-44b5-9bba-1d5ec7c4b40f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [],
						"url": "{{BaseUrl}}api/production/occurrence-logs/b7d0c476-70db-4a57-94c7-fa007d9a7517"
					},
					"response": []
				},
				{
					"name": "Get Occurrence Log Email Template",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c48c4fca-b559-4780-865e-e63cd4bea180",
								"exec": [
									"pm.test('Schema is valid', function () {\r",
									"    var schema = {\r",
									"        type: 'object',\r",
									"        properties: {\r",
									"            title: { type: 'string' },\r",
									"            data: {\r",
									"                type: 'object',\r",
									"                properties: {\r",
									"                    id: { type: 'string' },\r",
									"                    sfcode: { type: 'string' },\r",
									"                    workflowStateId: { type: 'string' },\r",
									"                    occurrenceIncidentTypeId: { type: 'string' },\r",
									"                    occurrenceDate: { type: 'string' },\r",
									"                    occurrenceSfcodeList: { type: 'string' },\r",
									"                    occurrenceStartTime: { type: 'string' },\r",
									"                    occurrenceEndTime: { type: 'string' },\r",
									"                    isFieldOfficeCalled: { type: 'boolean' },\r",
									"                    isSendEmail: { type: 'boolean' },\r",
									"                    emailSentStatus: { type: 'number' },\r",
									"                    additionalNote: { type: 'string' },\r",
									"                    otherIncidentType: { type: 'string' }\r",
									"                },\r",
									"                required: [\r",
									"                    'id',\r",
									"                    'sfcode',\r",
									"                    'workflowStateId',\r",
									"                    'occurrenceIncidentTypeId',\r",
									"                    'occurrenceDate',\r",
									"                    'occurrenceSfcodeList',\r",
									"                    'occurrenceStartTime',\r",
									"                    'occurrenceEndTime',\r",
									"                    'isFieldOfficeCalled',\r",
									"                    'isSendEmail',\r",
									"                    'emailSentStatus',\r",
									"                    'additionalNote',\r",
									"                    'otherIncidentType'\r",
									"                ]\r",
									"            },\r",
									"            statusCode: { type: 'number' },\r",
									"            isSuccess: { type: 'boolean' }\r",
									"        },\r",
									"        required: [\r",
									"            'title',\r",
									"            'data',\r",
									"            'statusCode',\r",
									"            'isSuccess'\r",
									"        ]\r",
									"    };\r",
									"})\r",
									"\r",
									"pm.test('Response status code is 200', function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"})\r",
									"\r",
									"pm.test('Content-Type header is application/json', function () {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
									"})\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "ff1ceda6-3186-4f74-8162-aa18420126e9",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{BaseUrl}}api/production/occurrence-logs/3bc9bb74-4e81-449f-8d59-26f3d076e845/email-template"
					},
					"response": []
				},
				{
					"name": "Send Email",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "df619c9f-b255-42d7-a100-ffde447eea1f",
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an object with title, data, statusCode, and isSuccess properties\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an('object');\r",
									"    pm.expect(jsonData).to.have.property('title');\r",
									"    pm.expect(jsonData).to.have.property('data');\r",
									"    pm.expect(jsonData).to.have.property('statusCode');\r",
									"    pm.expect(jsonData).to.have.property('isSuccess');\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "c5a84bbe-bde1-434b-8131-f334b43c4c44",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "f4306640-3625-4d1a-831c-5f6879cf9e02",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"entityId\": \"63f6b2ea-8421-41c7-a8f1-fcb020ae3927\",\r\n    \"notificationTypeId\": \"af655439-7dc1-41ff-becb-0e845e1fd631\",\r\n    \"triggerType\": \"custom\",\r\n    \"workFlowActionId\": \"submit\",\r\n    \"entityTypeId\": \"occurrence_log\",\r\n    \"subject\": \"Occurrence Log\",\r\n    \"emailBodyTemplate\": \"<html>\\r\\n\\t<head>\\r\\n\\t</head>\\r\\n\\t<body>\\r\\n\\t\\t<p>\\r\\n\\t\\t\\tHi,\\r\\n\\t\\t</p>\\r\\n\\t\\t<p>\\r\\n\\t\\t\\tOccurrence Log Id : 63f6b2ea-8421-41c7-a8f1-fcb020ae3927\\r\\n            Occurrence Incedent Type: Other\\r\\n            Was Occurrence Called into field office? : Yes\\r\\n            List of sf codes : string\\r\\n            Occurrence Date : Jan 02, 2024\\r\\n            Occurrence Start Time : 13:58 PM\\r\\n            Occurrence End time : 13:58 PM\\r\\n            Additional Notes/Comments : added notes\\r\\n\\t\\t</p>\\r\\n\\t\\t<br />\\r\\n\\t\\t<p style=\\\"margin-bottom:0px;\\\">\\r\\n\\t\\t\\tThanks,\\r\\n\\t\\t</p>\\r\\n\\t\\t<p style=\\\"margin-top:6px;\\\">\\r\\n\\t\\t\\tNYCSCA Administrator\\r\\n\\t\\t</p>\\r\\n\\t</body>\\r\\n</html>\\r\\n\",\r\n    \"to\": \"test@email.com,mzafar@svam.com,test@svam.com\",\r\n    \"cc\": \"test@email.com,mzafar@svam.com,test@svam.com\",\r\n    \"bcc\": \"test@email.com,mzafar@svam.com,test@svam.com\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseUrl}}api/production/occurrence-logs/email"
					},
					"response": []
				}
			],
			"id": "bd5337b4-767b-4b35-9e21-340bb27ed298",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "c2230c3a-7ef0-4f14-bc2c-92591173ef47",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "565cf252-0bae-47d7-a1ce-3052d65be472",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Production Dashboard",
			"item": [
				{
					"name": "Todays Form status",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7459a1d6-24d7-4341-8ba4-5984c217ae28",
								"exec": [
									"// Test to check if the response contains the correct content type\r",
									"pm.test(\"Response has the correct content type\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"// Test to check if the serviceDate only comes for today's date\r",
									"pm.test(\"Service date is only for today's date\", function () {\r",
									"    var today = new Date().toISOString().split('T')[0]; // Get today's date in YYYY-MM-DD format\r",
									"    pm.response.json().data.forEach(function(record) {\r",
									"        pm.expect(record.serviceDate).to.equal(today);\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "06d768d4-739a-4b93-80cf-5a486ee01724",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "0eec2891-f575-4269-98c3-e3b4b1e1f3ce",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{BaseUrl}}api/production/todays-forms"
					},
					"response": []
				},
				{
					"name": "Incomplete Form",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "15d2e84e-28b9-46fc-9797-adab3a0c6b7a",
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"No verified Status\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    const forms = responseData.data;\r",
									"\r",
									"    forms.forEach((form) => {\r",
									"        pm.expect(form.status).to.not.equal('verified');\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "15daefdc-1220-4129-886e-8a41f1b5cd7e",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "622ce883-5d2e-4749-a859-550fb0b729ff",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{BaseUrl}}api/production/incomplete-forms"
					},
					"response": []
				},
				{
					"name": "Upcoming School Trip Forms",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "01e7e668-b414-4807-bbad-c4a150efea8e",
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response data has a serviceDate property with an upcoming date\", function () {\r",
									"    var serviceDate = pm.response.json().data[0].serviceDate;\r",
									"    var upcomingDate = new Date(serviceDate) > new Date();\r",
									"    pm.expect(upcomingDate).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Response has a title property\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.property('title');\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "b5339ae6-11a5-4c5c-a3f0-10683ba8ef6d",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "79440d36-cdbe-4646-a2ac-c4be3c7c4621",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{BaseUrl}}api/production/upcoming-school-trips"
					},
					"response": []
				},
				{
					"name": "Calender",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c77ab1a7-5c47-4151-8951-c155700b88dc",
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an object with title, data, statusCode, and isSuccess properties\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an('object').that.has.all.keys('title', 'data', 'statusCode', 'isSuccess');\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "5f9cc1f4-f21c-4555-984e-7e2342d6c4f4",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "50e61d12-725c-4e5e-9200-93e3a9791a83",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseUrl}}api/production/planning?from=2020-01-01&to=2025-01-01",
							"host": [
								"{{BaseUrl}}api"
							],
							"path": [
								"production",
								"planning"
							],
							"query": [
								{
									"key": "from",
									"value": "2020-01-01"
								},
								{
									"key": "to",
									"value": "2025-01-01"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Holidays",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3ae05025-23c5-4fe6-ad9c-593c8d0b38e1",
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an object with title, data, statusCode, and isSuccess properties\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an('object').that.has.all.keys('title', 'data', 'statusCode', 'isSuccess');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "eac18f9e-54b4-4c31-b1e1-344d6498ce40",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseUrl}}api/production/lookup/calendar/holidays?from=2024-06-01&to=2024-06-26",
							"host": [
								"{{BaseUrl}}api"
							],
							"path": [
								"production",
								"lookup",
								"calendar",
								"holidays"
							],
							"query": [
								{
									"key": "from",
									"value": "2024-06-01"
								},
								{
									"key": "to",
									"value": "2024-06-26"
								}
							]
						}
					},
					"response": []
				}
			],
			"id": "6c99d971-f25f-4c92-a39d-e83c32534b61"
		},
		{
			"name": "Reports",
			"item": [
				{
					"name": "Occurrence Log",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "08412887-7b47-4470-97a2-7620c2a20be8",
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an object with data property\", function () {\r",
									"    pm.expect(pm.response.json()).to.be.an('object').that.has.property('data');\r",
									"});\r",
									"\r",
									"pm.test(\"Response data property is an object with data and total properties\", function () {\r",
									"    var data = pm.response.json().data;\r",
									"    pm.expect(data).to.be.an('object').that.has.property('data');\r",
									"    pm.expect(data).to.be.an('object').that.has.property('total');\r",
									"});\r",
									"\r",
									"pm.test(\"Response has statusCode property\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.property('statusCode');\r",
									"});\r",
									"\r",
									"pm.test(\"Response has isSuccess property\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.property('isSuccess');\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "0bc161d5-65a2-4f06-84d8-14449fbea7a9",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "75115d77-e401-4be1-8421-045146146c31",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseUrl}}api/reports/production/occurrences?SfCode={{sfcode}}&SfCode={{sfcode}}&From={{From}}&To={{To}}&page=1&pageSize=10",
							"host": [
								"{{BaseUrl}}api"
							],
							"path": [
								"reports",
								"production",
								"occurrences"
							],
							"query": [
								{
									"key": "SfCode",
									"value": "{{sfcode}}"
								},
								{
									"key": "SfCode",
									"value": "{{sfcode}}"
								},
								{
									"key": "From",
									"value": "{{From}}"
								},
								{
									"key": "To",
									"value": "{{To}}"
								},
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "pageSize",
									"value": "10"
								},
								{
									"key": "statusId",
									"value": "inprogress",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Production Record",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8136582f-cf32-4f85-b411-737af7e7d3b5",
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an object with title, data, statusCode, and isSuccess properties\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an('object').that.has.all.keys('title', 'data', 'statusCode', 'isSuccess');\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "eb7579c1-1ce1-44ad-a5d1-737fbb0e065d",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "40118790-0670-4869-bfd0-60bb3cbfe9a9",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseUrl}}api/reports/production/production-records?SfCode={{sfcode}}&From={{From}}&To={{To}}",
							"host": [
								"{{BaseUrl}}api"
							],
							"path": [
								"reports",
								"production",
								"production-records"
							],
							"query": [
								{
									"key": "SfCode",
									"value": "{{sfcode}}"
								},
								{
									"key": "From",
									"value": "{{From}}"
								},
								{
									"key": "To",
									"value": "{{To}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "School Trip Lunch",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7340e011-0444-4b29-834b-9f9e7fd18e01",
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "45638ea8-4e65-4146-93db-6a950704460e",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "6f56c029-73e3-405e-9b63-b4c85c22bf6d",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseUrl}}api/reports/production/production-records?SfCode={{sfcode}}&From={{From}}&To={{To}}&IsSchoolTripOnly=true",
							"host": [
								"{{BaseUrl}}api"
							],
							"path": [
								"reports",
								"production",
								"production-records"
							],
							"query": [
								{
									"key": "SfCode",
									"value": "{{sfcode}}"
								},
								{
									"key": "From",
									"value": "{{From}}"
								},
								{
									"key": "To",
									"value": "{{To}}"
								},
								{
									"key": "IsSchoolTripOnly",
									"value": "true"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Physical Inventory",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "eb20d227-9fd8-4bfa-b6a1-0f1df89f1d30",
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an object with data property\", function () {\r",
									"    pm.expect(pm.response.json()).to.be.an('object').that.has.property('data');\r",
									"});\r",
									"\r",
									"pm.test(\"Response data contains count, data, and total properties\", function () {\r",
									"    var data = pm.response.json().data;\r",
									"    pm.expect(data).to.have.property('count');\r",
									"    pm.expect(data).to.have.property('data');\r",
									"    pm.expect(data).to.have.property('total');\r",
									"});\r",
									"\r",
									"pm.test(\"Response isSuccess is a boolean\", function () {\r",
									"    pm.expect(pm.response.json().isSuccess).to.be.a('boolean');\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "8818f2a6-96ce-4d24-90ca-b4a263893d64",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "401d1646-7d05-4447-825d-448a4f679d70",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseUrl}}api/reports/inventory/physical-inventory?SfCode={{sfcode}}&From={{From}}&To={{To}}",
							"host": [
								"{{BaseUrl}}api"
							],
							"path": [
								"reports",
								"inventory",
								"physical-inventory"
							],
							"query": [
								{
									"key": "SfCode",
									"value": "{{sfcode}}"
								},
								{
									"key": "From",
									"value": "{{From}}"
								},
								{
									"key": "To",
									"value": "{{To}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Product Transfer",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8f037455-91a4-4e3d-87f3-b35d8da9648c",
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an object with data property\", function () {\r",
									"    pm.expect(pm.response.json()).to.be.an('object').that.has.property('data');\r",
									"});\r",
									"\r",
									"pm.test(\"Response data property has count, data, and total properties\", function () {\r",
									"    var data = pm.response.json().data;\r",
									"    pm.expect(data).to.have.property('count');\r",
									"    pm.expect(data).to.have.property('data');\r",
									"    pm.expect(data).to.have.property('total');\r",
									"});\r",
									"\r",
									"pm.test(\"Each element in the count array has status, statusId, and total properties\", function () {\r",
									"    pm.response.json().data.count.forEach(function(item) {\r",
									"        pm.expect(item).to.have.property('status');\r",
									"        pm.expect(item.status).to.have.property('id');\r",
									"        pm.expect(item).to.have.property('total');\r",
									"    });\r",
									"});\r",
									"\r",
									"pm.test(\"Each element in the data array has productTransferId, transferredOn, sfCode, buildingCode, status, and statusId properties\", function () {\r",
									"    pm.response.json().data.data.forEach(function(item) {\r",
									"        pm.expect(item).to.have.property('productTransferId');\r",
									"        pm.expect(item).to.have.property('transferredOn');\r",
									"        pm.expect(item).to.have.property('sfCode');\r",
									"        pm.expect(item).to.have.property('buildingCode');\r",
									"        pm.expect(item).to.have.property('status');\r",
									"        pm.expect(item.status).to.have.property('id');\r",
									"    });\r",
									"});\r",
									"\r",
									"pm.test(\"Response has statusCode, isSuccess, and title properties\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('statusCode');\r",
									"    pm.expect(jsonData).to.have.property('isSuccess');\r",
									"    pm.expect(jsonData).to.have.property('title');\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "3ebd1319-1c48-431f-b85b-529e3e089b5b",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "5cef4985-17c0-431a-8e1c-2f4ae4bd29b6",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseUrl}}api/reports/inventory/product-transfers?SfCode={{sfcode}}&From={{From}}&To={{To}}",
							"host": [
								"{{BaseUrl}}api"
							],
							"path": [
								"reports",
								"inventory",
								"product-transfers"
							],
							"query": [
								{
									"key": "SfCode",
									"value": "{{sfcode}}"
								},
								{
									"key": "From",
									"value": "{{From}}"
								},
								{
									"key": "To",
									"value": "{{To}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Recons Statement Pending Review Only",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "cb9a0e40-3a34-4b6f-989e-e5398ae652a1",
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an object with data property\", function () {\r",
									"    pm.expect(pm.response.json()).to.be.an('object').that.has.property('data');\r",
									"});\r",
									"\r",
									"pm.test(\"Response has a title property\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.property('title');\r",
									"});\r",
									"\r",
									"pm.test(\"Response has a count array with status, statusId, and total properties\", function () {\r",
									"    pm.response.json().data.count.forEach(function(count) {\r",
									"        pm.expect(count).to.have.property('status');\r",
									"        pm.expect(count).to.have.property('statusId');\r",
									"        pm.expect(count).to.have.property('total');\r",
									"    });\r",
									"});\r",
									"\r",
									"pm.test(\"Response has a statusCode property\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.property('statusCode');\r",
									"});\r",
									"\r",
									"pm.test(\"Response has a isSuccess property\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.property('isSuccess');\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "aac8de24-4e17-4428-a6f8-7dd94fb05586",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "57dbff1b-5d5e-4548-b842-71016a4a468e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseUrl}}api/reports/inventory/reconciliation-statements?SfCode={{sfcode}}&From={{From}}&To={{To}}&IsPendingReviewOnly=true",
							"host": [
								"{{BaseUrl}}api"
							],
							"path": [
								"reports",
								"inventory",
								"reconciliation-statements"
							],
							"query": [
								{
									"key": "SfCode",
									"value": "{{sfcode}}"
								},
								{
									"key": "From",
									"value": "{{From}}"
								},
								{
									"key": "To",
									"value": "{{To}}"
								},
								{
									"key": "IsPendingReviewOnly",
									"value": "true"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Adjustment",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "369e0ba8-ac7e-44e0-8521-f8c21d6b5f2c",
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an object with title, data, statusCode, and isSuccess properties\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an('object').that.has.all.keys('title', 'data', 'statusCode', 'isSuccess');\r",
									"});\r",
									"\r",
									"pm.test(\"Count array contains objects with total property\", function () {\r",
									"    var countArray = pm.response.json().data.count;\r",
									"    countArray.forEach(function(item) {\r",
									"        pm.expect(item).to.have.property('total');\r",
									"    });\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Total property is a number\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.data).to.have.property('total').that.is.a('number');\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "666a599e-9aec-427c-b6fd-ce48292b0b7a",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "4dbeb058-3d9e-4c7f-aa1e-346ae240359f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseUrl}}api/reports/inventory/adjustments?SfCode={{sfcode}}&From={{From}}&To={{To}}",
							"host": [
								"{{BaseUrl}}api"
							],
							"path": [
								"reports",
								"inventory",
								"adjustments"
							],
							"query": [
								{
									"key": "SfCode",
									"value": "{{sfcode}}"
								},
								{
									"key": "From",
									"value": "{{From}}"
								},
								{
									"key": "To",
									"value": "{{To}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Requisitions",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c342ef91-a332-4f19-823d-ae9be3ec6a65",
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an object with data property\", function () {\r",
									"    pm.expect(pm.response.json()).to.be.an('object').that.has.property('data');\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains count array with status, statusId, and total properties\", function () {\r",
									"    pm.expect(pm.response.json().data.count).to.be.an('array').that.is.not.empty;\r",
									"    pm.response.json().data.count.forEach(function(item) {\r",
									"        pm.expect(item).to.have.property('status');\r",
									"        pm.expect(item).to.have.property('statusId');\r",
									"        pm.expect(item).to.have.property('total');\r",
									"    });\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains data array with id, serviceDate, sfCode, buildingCode, status, and statusId properties\", function () {\r",
									"    pm.expect(pm.response.json().data.data).to.be.an('array').that.is.not.empty;\r",
									"    pm.response.json().data.data.forEach(function(item) {\r",
									"        pm.expect(item).to.have.property('id');\r",
									"        pm.expect(item).to.have.property('serviceDate');\r",
									"        pm.expect(item).to.have.property('sfCode');\r",
									"        pm.expect(item).to.have.property('buildingCode');\r",
									"    });\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains total property\", function () {\r",
									"    pm.expect(pm.response.json().data).to.have.property('total');\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains statusCode property\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.property('statusCode');\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains isSuccess property\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.property('isSuccess');\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "f7757480-c8cd-4264-825e-b98215021577",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "c9030df8-8178-49b5-89a5-157a23b3ad73",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseUrl}}api/reports/inventory/daily-requisitions?SfCode={{sfcode}}&From={{From}}&To={{To}}",
							"host": [
								"{{BaseUrl}}api"
							],
							"path": [
								"reports",
								"inventory",
								"daily-requisitions"
							],
							"query": [
								{
									"key": "SfCode",
									"value": "{{sfcode}}"
								},
								{
									"key": "From",
									"value": "{{From}}"
								},
								{
									"key": "To",
									"value": "{{To}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Daily Requisition",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d46c3f4b-9f52-491a-b604-c63891679ef7",
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an object with data property\", function () {\r",
									"    pm.expect(pm.response.json()).to.be.an('object').that.has.property('data');\r",
									"});\r",
									"\r",
									"pm.test(\"Response data contains count, data, and total properties\", function () {\r",
									"    var data = pm.response.json().data;\r",
									"    pm.expect(data).to.have.property('count');\r",
									"    pm.expect(data).to.have.property('data');\r",
									"    pm.expect(data).to.have.property('total');\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains isSuccess property with value true\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.property('isSuccess', true);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "482120ca-3ea6-4163-b7ae-f3e8eef3760f",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "2e320795-a62c-4d5c-9d64-1c0984bbe347",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseUrl}}api/reports/inventory/daily-requisitions?sfCode={{sfcode}}&from={{From}}&to={{To}}&page=1&pageSize=10",
							"host": [
								"{{BaseUrl}}api"
							],
							"path": [
								"reports",
								"inventory",
								"daily-requisitions"
							],
							"query": [
								{
									"key": "sfCode",
									"value": "{{sfcode}}"
								},
								{
									"key": "from",
									"value": "{{From}}"
								},
								{
									"key": "to",
									"value": "{{To}}"
								},
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "pageSize",
									"value": "10"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Recons Records",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d46c3f4b-9f52-491a-b604-c63891679ef7",
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an object with data property\", function () {\r",
									"    pm.expect(pm.response.json()).to.be.an('object').that.has.property('data');\r",
									"});\r",
									"\r",
									"pm.test(\"Response data contains count, data, and total properties\", function () {\r",
									"    var data = pm.response.json().data;\r",
									"    pm.expect(data).to.have.property('count');\r",
									"    pm.expect(data).to.have.property('data');\r",
									"    pm.expect(data).to.have.property('total');\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains isSuccess property with value true\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.property('isSuccess', true);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "482120ca-3ea6-4163-b7ae-f3e8eef3760f",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "11d4fba5-ca72-4d6b-b769-321191c7b669",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseUrl}}api/reports/inventory/reconciliation-records?SfCode={{sfcode}}&From={{From}}&To={{To}}",
							"host": [
								"{{BaseUrl}}api"
							],
							"path": [
								"reports",
								"inventory",
								"reconciliation-records"
							],
							"query": [
								{
									"key": "SfCode",
									"value": "{{sfcode}}"
								},
								{
									"key": "From",
									"value": "{{From}}"
								},
								{
									"key": "To",
									"value": "{{To}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Recons Records Pending Review Only",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "cb9a0e40-3a34-4b6f-989e-e5398ae652a1",
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an object with data property\", function () {\r",
									"    pm.expect(pm.response.json()).to.be.an('object').that.has.property('data');\r",
									"});\r",
									"\r",
									"pm.test(\"Response has a title property\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.property('title');\r",
									"});\r",
									"\r",
									"pm.test(\"Response has a count array with status, statusId, and total properties\", function () {\r",
									"    pm.response.json().data.count.forEach(function(count) {\r",
									"        pm.expect(count).to.have.property('status');\r",
									"        pm.expect(count).to.have.property('statusId');\r",
									"        pm.expect(count).to.have.property('total');\r",
									"    });\r",
									"});\r",
									"\r",
									"pm.test(\"Response has a statusCode property\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.property('statusCode');\r",
									"});\r",
									"\r",
									"pm.test(\"Response has a isSuccess property\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.property('isSuccess');\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "aac8de24-4e17-4428-a6f8-7dd94fb05586",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "80f40d60-17ae-4784-ac08-c804dadf6a4f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseUrl}}api/reports/inventory/reconciliation-records?SfCode={{sfcode}}&From={{From}}&To={{To}}&IsPendingReviewOnly=true",
							"host": [
								"{{BaseUrl}}api"
							],
							"path": [
								"reports",
								"inventory",
								"reconciliation-records"
							],
							"query": [
								{
									"key": "SfCode",
									"value": "{{sfcode}}"
								},
								{
									"key": "From",
									"value": "{{From}}"
								},
								{
									"key": "To",
									"value": "{{To}}"
								},
								{
									"key": "IsPendingReviewOnly",
									"value": "true",
									"type": "text"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Recons statement",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d46c3f4b-9f52-491a-b604-c63891679ef7",
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an object with data property\", function () {\r",
									"    pm.expect(pm.response.json()).to.be.an('object').that.has.property('data');\r",
									"});\r",
									"\r",
									"pm.test(\"Response data contains count, data, and total properties\", function () {\r",
									"    var data = pm.response.json().data;\r",
									"    pm.expect(data).to.have.property('count');\r",
									"    pm.expect(data).to.have.property('data');\r",
									"    pm.expect(data).to.have.property('total');\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains isSuccess property with value true\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.property('isSuccess', true);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "482120ca-3ea6-4163-b7ae-f3e8eef3760f",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "a02c5818-df5c-46d4-adbe-c00417c95729",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseUrl}}api/reports/inventory/reconciliation-statements?SfCode={{sfcode}}&From={{From}}&To={{To}}",
							"host": [
								"{{BaseUrl}}api"
							],
							"path": [
								"reports",
								"inventory",
								"reconciliation-statements"
							],
							"query": [
								{
									"key": "SfCode",
									"value": "{{sfcode}}"
								},
								{
									"key": "From",
									"value": "{{From}}"
								},
								{
									"key": "To",
									"value": "{{To}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "InventorySummary",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b71b2588-2a73-4e1a-86c5-fb6f2bb99edb",
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an object with data property\", function () {\r",
									"    pm.expect(pm.response.json()).to.be.an('object').that.has.property('data');\r",
									"});\r",
									"\r",
									"pm.test(\"Response data contains count, data, and total properties\", function () {\r",
									"    var data = pm.response.json().data;\r",
									"    pm.expect(data).to.have.property('data');\r",
									"    pm.expect(data).to.have.property('total');\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains isSuccess property with value true\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.property('isSuccess', true);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "e46d196b-acab-443f-b569-d36d936a6aea",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseUrl}}api/reports/inventory/summary?sfCode=24293&from=2024-03-05&to=2024-04-17&page=1&pageSize=10",
							"host": [
								"{{BaseUrl}}api"
							],
							"path": [
								"reports",
								"inventory",
								"summary"
							],
							"query": [
								{
									"key": "sfCode",
									"value": "24293"
								},
								{
									"key": "from",
									"value": "2024-03-05"
								},
								{
									"key": "to",
									"value": "2024-04-17"
								},
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "pageSize",
									"value": "10"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "ReconciliationStatementStatusReport",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b71b2588-2a73-4e1a-86c5-fb6f2bb99edb",
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an object with data property\", function () {\r",
									"    pm.expect(pm.response.json()).to.be.an('object').that.has.property('data');\r",
									"});\r",
									"\r",
									"pm.test(\"Response data contains count, data, and total properties\", function () {\r",
									"    var data = pm.response.json().data;\r",
									"    pm.expect(data).to.have.property('data');\r",
									"    pm.expect(data).to.have.property('total');\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains isSuccess property with value true\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.property('isSuccess', true);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "f56de0e1-c064-44e5-8309-7748c671e8e3",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseUrl}}api/reports/inventory/reconciliation/statement?districtId=DD75A063-4ADA-4FC1-AB8C-96039D312A8A&sfCode={{sfcode}}",
							"host": [
								"{{BaseUrl}}api"
							],
							"path": [
								"reports",
								"inventory",
								"reconciliation",
								"statement"
							],
							"query": [
								{
									"key": "districtId",
									"value": "DD75A063-4ADA-4FC1-AB8C-96039D312A8A"
								},
								{
									"key": "sfCode",
									"value": "{{sfcode}}"
								}
							]
						}
					},
					"response": []
				}
			],
			"id": "37e79f11-107a-493a-ad88-3e66a46489be"
		},
		{
			"name": "Admin",
			"item": [
				{
					"name": "Get Module Settings on school",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fd71a63e-9214-47dc-a964-844de8b0baa4",
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "d344de84-2ab6-41f4-8485-af6ff466edad",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "d074e0b4-e69e-41aa-9214-30c2f9c2f9b5",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{BaseUrl}}api/admin/boh-settings/district/5fa25767-2eb8-4d12-92b2-851299095c52"
					},
					"response": []
				},
				{
					"name": "Get All App Setting",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "73cd609e-dfce-44dd-bd7e-eb33069f9c1a",
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response is an object with title, data, statusCode, and isSuccess properties\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an('object').that.has.all.keys('title', 'data', 'statusCode', 'isSuccess');\r",
									"});\r",
									"pm.test(\"Content-Type header is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Data array contains at least one element\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData.data).to.be.an('array').that.is.not.empty;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Key in data array is a non-empty string\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData.data).to.be.an('array');\r",
									"    responseData.data.forEach(function(item) {\r",
									"        pm.expect(item.key).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Key should be a non-empty string\");\r",
									"    });\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Name in the data array must be a non-empty string\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"  pm.expect(responseData.data).to.be.an('array');\r",
									"  responseData.data.forEach(function(item) {\r",
									"    pm.expect(item.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");\r",
									"  });\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Value in the data array is not null or undefined\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"\r",
									"  pm.expect(responseData.data).to.be.an('array');\r",
									"  responseData.data.forEach(function(item) {\r",
									"    pm.expect(item.value).to.not.be.null;\r",
									"    pm.expect(item.value).to.not.be.undefined;\r",
									"  });\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "9ba3ab2b-58f9-48f7-9b89-8b7a4c9777c7",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "2c991ce2-7407-479c-bc1a-c6a78284b62a",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{BaseUrl}}api/admin/app-settings"
					},
					"response": []
				},
				{
					"name": "Update App Setting Value",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "81eaa0b0-ce6f-4fc0-a878-eecb8c88bb0b",
								"exec": [
									"\r",
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required fields - title, statusCode, and isSuccess\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"  pm.expect(responseData).to.be.an('object');\r",
									"  pm.expect(responseData.title).to.exist;\r",
									"  pm.expect(responseData.statusCode).to.exist;\r",
									"  pm.expect(responseData.isSuccess).to.exist;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Title is a non-empty string\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.title).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Title should not be empty\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"StatusCode is a non-negative integer\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData.statusCode).to.be.a('number');\r",
									"    pm.expect(responseData.statusCode).to.be.at.least(0);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"IsSuccess is a boolean value\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.isSuccess).to.be.a('boolean');\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "c148ee63-e2b0-430b-b095-895d5b0eeca2",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"key\": \"audit_link\",\r\n  \"value\": \"Disabled\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseUrl}}api/admin/app-settings"
					},
					"response": []
				},
				{
					"name": "Admin Module Setting",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7898fc59-20d9-422a-a2e6-0d61528de937",
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an object with title, data, statusCode, and isSuccess properties\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an('object').that.has.all.keys('title', 'data', 'statusCode', 'isSuccess');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "ba59341a-2361-4817-8c5a-df0309937a4b",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "7ecf2130-2cee-46ba-848c-a660b0e63f50",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{BaseUrl}}api/admin/boh-settings/district/5fa25767-2eb8-4d12-92b2-851299095c52"
					},
					"response": []
				},
				{
					"name": "Update Module setting on school",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6b98fa16-80ee-46c0-9fbc-4afd61eec636",
								"exec": [
									"\r",
									"pm.test(\"Successful POST request\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "ccefa437-b778-4495-bba9-654729f4f82b",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "42748ab2-4bc9-4a22-ad9f-e9172ad197cf",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "X-Sf-Code",
								"value": "{{sfcode}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"isInventory\": true,\r\n  \"isProduction\": true\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseUrl}}api/admin/boh-settings/district/5fa25767-2eb8-4d12-92b2-851299095c52/sfcode/{{sfcode}}"
					},
					"response": []
				},
				{
					"name": "Get All Static Text",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8ede1f36-5efc-4062-837b-981bd064805b",
								"exec": [
									"\r",
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required fields\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData).to.have.property('title');\r",
									"    pm.expect(responseData).to.have.property('data');\r",
									"    pm.expect(responseData).to.have.property('statusCode');\r",
									"    pm.expect(responseData).to.have.property('isSuccess');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Data array is present and contains the expected number of elements\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.data).to.exist.and.to.be.an('array');\r",
									"    pm.expect(responseData.data).to.have.lengthOf.at.least(1);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Code and text in each data element are non-empty strings\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData.data).to.be.an('array');\r",
									"    responseData.data.forEach(function(dataElement) {\r",
									"        pm.expect(dataElement.code).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Code should not be empty\");\r",
									"        pm.expect(dataElement.text).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Text should not be empty\");\r",
									"    });\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "4e352a57-f1fc-4614-904a-d91d0cfe7abe",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{BaseUrl}}api/admin/static-text"
					},
					"response": []
				},
				{
					"name": "Update Static Text Row",
					"id": "3ea55da3-6ba3-4980-8f35-84de2be56836",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"code\": \"dash_inventory\",\r\n  \"text\": \"Inventory\",\r\n  \"description\": \"Click here to view Inventory.\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseUrl}}api/admin/static-text"
					},
					"response": []
				},
				{
					"name": "Get Notification Settings",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ea8ab79f-0838-4c2a-a916-6430e1700009",
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an object with title, data, statusCode, and isSuccess properties\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an('object').that.has.all.keys('title', 'data', 'statusCode', 'isSuccess');\r",
									"});\r",
									"pm.test(\"Content-Type header is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"StatusCode is a non-negative integer\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData.statusCode).to.be.a('number').and.to.satisfy(value => value >= 0, \"StatusCode should be a non-negative integer\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Ensure that 'isSuccess' property is a boolean\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"  pm.expect(responseData).to.be.an('object');\r",
									"  pm.expect(responseData.isSuccess).to.be.a('boolean');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Title property is a non-empty string\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData.title).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Title should not be empty\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "c362a237-d942-47b5-a074-802c11d141b8",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "30b152cc-b6d7-49ca-a01c-d7ff3392c3ed",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{BaseUrl}}api/admin/notification-setting"
					},
					"response": []
				},
				{
					"name": "Get Notification Setting Details",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7d5435c9-412d-465d-90c3-528e40f12e5a",
								"exec": [
									"\r",
									"pm.test(\"Response status code is 200\", function () {\r",
									"  pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Verify that the response has the required fields\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData).to.have.property('title');\r",
									"    pm.expect(responseData).to.have.property('data');\r",
									"    pm.expect(responseData).to.have.property('statusCode');\r",
									"    pm.expect(responseData).to.have.property('isSuccess');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"InAppBodyTemplate and emailBodyTemplate are non-empty strings\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"  pm.expect(responseData).to.be.an('object');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Id in the response data must be a non-empty string\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"  pm.expect(responseData.data.id).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Id should be a non-empty string\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"NotificationTypeId is present and is a non-empty string\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.have.property('data');\r",
									"    pm.expect(responseData.data).to.have.property('notificationTypeId').that.is.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "503a6c84-21ce-412c-9970-89c5c08b4b19",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "71b06a08-a33e-4bf2-861f-cce54d3bae87",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{BaseUrl}}api/admin/notification-setting/73e8a4a6-2576-468a-b036-41624abb6484"
					},
					"response": []
				},
				{
					"name": "Update Notification Setting Detail",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c90e1943-a866-445c-ab3f-6afdb800e675",
								"exec": [
									"\r",
									"pm.test(\"Response status code is 200\", function () {\r",
									"  pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required fields\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData).to.have.property('title');\r",
									"    pm.expect(responseData).to.have.property('statusCode');\r",
									"    pm.expect(responseData).to.have.property('isSuccess');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Title is a non-empty string\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.title).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Title should not be empty\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"StatusCode is a non-negative integer\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"  pm.expect(responseData.statusCode).to.exist;\r",
									"  pm.expect(responseData.statusCode).to.be.a('number');\r",
									"  pm.expect(responseData.statusCode).to.satisfy((statusCode) => statusCode >= 0, \"StatusCode should be a non-negative integer\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Ensure that 'isSuccess' is a boolean value\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.isSuccess).to.be.a('boolean');\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "041f68ed-020a-493d-b69e-2d0e05cbd290",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "0a1179e0-0efa-4717-ba54-d6efe7d05c7b",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": \"73e8a4a6-2576-468a-b036-41624abb6484\",\r\n  \"notificationTypeId\": \"430c2d2b-6827-455d-a2f4-e5d6fde6294c\",\r\n  \"isInApp\": false,\r\n  \"isEmail\": true,\r\n  \"inAppBodyTemplate\": \"\",\r\n  \"emailBodyTemplate\": \"EmailTemplate test 2\",\r\n  \"subject\": \"emailsubjectHas Body\",\r\n  \"to\": [\r\n    \"District Supervisor\",\"Cook\"\r\n  ],\r\n  \"cc\": [\r\n    \"s@gmail.com\",\"aman@gmail.com\",\"abhay@gmail.com\"\r\n  ],\r\n  \"bcc\": [\r\n    \"pm@gmail.com\"\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseUrl}}api/admin/notification-setting"
					},
					"response": []
				},
				{
					"name": "Get Notification Type",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6705e776-b3af-40b0-9766-a552d5b895e6",
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response has a title property\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.property('title');\r",
									"});\r",
									"\r",
									"pm.test(\"Response has a data array with id, name, and description properties\", function () {\r",
									"    pm.response.json().data.forEach(function(item) {\r",
									"        pm.expect(item).to.have.property('id');\r",
									"        pm.expect(item).to.have.property('name');\r",
									"        pm.expect(item).to.have.property('description');\r",
									"    });\r",
									"});\r",
									"\r",
									"pm.test(\"Response has a statusCode property with value 200\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.property('statusCode', 200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response has an isSuccess property set to true\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.property('isSuccess', true);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "2b17140f-0039-42bb-84d0-d0485e1ccd94",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "6f96906a-0ee4-4109-a3aa-af5702b16f52",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{BaseUrl}}api/admin/lookup/notification-types"
					},
					"response": []
				},
				{
					"name": "Get Help Text",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e4ca958a-6584-486c-b29d-f999e0fe8513",
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Content type is application/json\", function () {\r",
									"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"pm.test(\"Response has the required fields\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  pm.expect(responseData).to.be.an('object');\r",
									"  pm.expect(responseData).to.have.property('title');\r",
									"  pm.expect(responseData).to.have.property('data');\r",
									"  pm.expect(responseData).to.have.property('statusCode');\r",
									"  pm.expect(responseData).to.have.property('isSuccess');\r",
									"});\r",
									"pm.test(\"Data array is present and contains the expected number of elements\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  pm.expect(responseData).to.be.an('object');\r",
									"  pm.expect(responseData.data).to.be.an('array');\r",
									"});\r",
									"pm.test(\"Title is a non-empty string\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData.title).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Title should not be empty\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Each element in the 'data' array has non-empty id, title, and description\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData.data).to.be.an('array');\r",
									"    responseData.data.forEach(function(element) {\r",
									"        pm.expect(element.id).to.exist.and.to.not.be.empty;\r",
									"        pm.expect(element.title).to.exist.and.to.not.be.empty;\r",
									"        pm.expect(element.description).to.exist.and.to.not.be.empty;\r",
									"    });\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"StatusCode is a non-negative integer\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData.statusCode).to.be.a('number').and.to.satisfy((statusCode) => statusCode >= 0);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"IsSuccess is a boolean value\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData.isSuccess).to.be.a('boolean');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Data array should have valid structure and format\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData.data).to.be.an('array').that.is.not.empty;\r",
									"\r",
									"    responseData.data.forEach(function(item) {\r",
									"        pm.expect(item).to.be.an('object');\r",
									"        pm.expect(item.id).to.be.a('string');\r",
									"        pm.expect(item.title).to.be.a('string');\r",
									"        pm.expect(item.description).to.be.a('string');\r",
									"    });\r",
									"});\r",
									"\r",
									"// Test for response content type\r",
									"pm.test(\"Content type is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "58cd2c05-f099-4d5f-857f-dc422d9690e8",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "file",
							"file": {}
						},
						"url": "{{BaseUrl}}api/admin/help-text/AF24437A-3B5D-42E1-93EF-19F0EB41EF9C"
					},
					"response": []
				},
				{
					"name": "Update Help Text",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7479b496-8b61-45b9-b76d-3fca788628b1",
								"exec": [
									"\r",
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required fields - title, statusCode, and isSuccess\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData).to.have.property('title');\r",
									"    pm.expect(responseData).to.have.property('statusCode');\r",
									"    pm.expect(responseData).to.have.property('isSuccess');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Title is a non-empty string\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.title).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Title should not be empty\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"StatusCode is a non-negative integer\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData.statusCode).to.be.a('number').and.to.be.at.least(0);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"IsSuccess is a boolean value\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    pm.expect(responseData.isSuccess).to.be.a('boolean');\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "b9cd6b7a-4d73-4152-b34a-b0813f4a8d61",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": \"C87CD44E-BAAF-4D31-9BC0-6A0F18312527\",\r\n  \"title\": \"Header\",\r\n  \"description\": \"The Title bar shows the production Record\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseUrl}}api/admin/help-text"
					},
					"response": []
				},
				{
					"name": "Get Page Role Profile",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "73cd609e-dfce-44dd-bd7e-eb33069f9c1a",
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response is an object with title, data, statusCode, and isSuccess properties\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an('object').that.has.all.keys('title', 'data', 'statusCode', 'isSuccess');\r",
									"});\r",
									"pm.test(\"Content-Type header is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Data array contains at least one element\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData.data).to.be.an('array').that.is.not.empty;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Title is a non-empty string\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData.title).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Title should not be empty\");\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"StatusCode is a non-negative integer\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData.statusCode).to.be.a('number');\r",
									"    pm.expect(responseData.statusCode).to.be.at.least(0);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"IsSuccess is a boolean value\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData.isSuccess).to.be.a('boolean');\r",
									"});\r",
									"\r",
									"// Verify the length of data array\r",
									"pm.test(\"The data array length must be greater than zero\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    pm.expect(responseData.data.length).to.be.greaterThan(0, \"Data array should not be empty\");\r",
									"\r",
									"    responseData.data.forEach((item) => {\r",
									"        pm.expect(item.columnGroup).to.be.an('array').that.is.not.empty;\r",
									"        item.columnGroup.forEach((group) => {\r",
									"            pm.expect(group.columns).to.be.an('array').that.is.not.empty;\r",
									"        });\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "9ba3ab2b-58f9-48f7-9b89-8b7a4c9777c7",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "87a3dc8f-2399-44a5-8056-486aa0afbe00",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{BaseUrl}}api/admin/roleprofile/2"
					},
					"response": []
				},
				{
					"name": "Update Role Profile Columns",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7cb9f6b4-ce30-4819-9f51-114d36c95db1",
								"exec": [
									"pm.test('Response status code is 200', function () {\r",
									"    pm.response.to.have.status(200);\r",
									"})\r",
									"\r",
									"pm.test('Response has the required fields - title, statusCode, and isSuccess', function () {\r",
									"    const responseData = pm.response.json();\r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData).to.have.property('title');\r",
									"    pm.expect(responseData).to.have.property('statusCode');\r",
									"    pm.expect(responseData).to.have.property('isSuccess');\r",
									"})\r",
									"\r",
									"pm.test('Title is a non-empty string', function () {\r",
									"    const responseData = pm.response.json();\r",
									"    pm.expect(responseData.title).to.be.a('string').and.to.have.lengthOf.at.least(1, 'Title should not be empty');\r",
									"})\r",
									"\r",
									"pm.test('Status code is a non-negative integer', function () {\r",
									"    const responseData = pm.response.json();\r",
									"    pm.expect(responseData.statusCode).to.be.a('number');\r",
									"    pm.expect(responseData.statusCode).to.be.at.least(0);\r",
									"})\r",
									"\r",
									"pm.test('Verify that isSuccess is set to true', function () {\r",
									"    const responseData = pm.response.json();\r",
									"    pm.expect(responseData.isSuccess).to.be.true;\r",
									"})\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "4f230a2b-411e-48ec-9bfd-4ec6479ceabc",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"columnRoleMappings\": [\r\n    {\r\n      \"defaultDisplayColumnId\": \"02092acb-fdfc-49bc-997d-74c1698812f7\",\r\n      \"isActive\": true\r\n    }\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseUrl}}api/admin/roleprofile/2"
					},
					"response": []
				},
				{
					"name": "Get Columns for Page",
					"id": "084b9fb0-a7a5-4e61-87b0-30c5197b0dc3",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseUrl}}api/admin/roleprofile/page?RoleId=5&PageId=productionrec",
							"host": [
								"{{BaseUrl}}api"
							],
							"path": [
								"admin",
								"roleprofile",
								"page"
							],
							"query": [
								{
									"key": "RoleId",
									"value": "5"
								},
								{
									"key": "PageId",
									"value": "productionrec"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Help Text User Log",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4b258ab2-2020-4c9e-bb3d-ce658d7827f5",
								"exec": [
									"\r",
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.expect(pm.response).to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required fields - title, statusCode, and isSuccess\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.title).to.exist;\r",
									"    pm.expect(responseData.statusCode).to.exist;\r",
									"    pm.expect(responseData.isSuccess).to.exist;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Title is a non-empty string\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData.title).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Title should not be empty\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"StatusCode is a non-negative integer\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.statusCode).to.be.a('number');\r",
									"    pm.expect(responseData.statusCode).to.satisfy((statusCode) => {\r",
									"        return statusCode >= 0;\r",
									"    }, \"StatusCode should be a non-negative integer\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"IsSuccess is a boolean value\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.isSuccess).to.be.a('boolean');\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "11285bbc-ac4e-427e-8cf4-eaf12e2aacfc",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"url": "{{BaseUrl}}api/admin/help-text/productionrec/log"
					},
					"response": []
				}
			],
			"id": "626f27b8-14cb-4814-8b99-655e58c6fb52"
		},
		{
			"name": "Inventory",
			"item": [
				{
					"name": "Inventory Daily Requisition",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f5693fa7-6bad-402f-9260-c9ae795aacb2",
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an object with title, data, statusCode, and isSuccess properties\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an('object').that.has.all.keys('title', 'data', 'statusCode', 'isSuccess');\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "f5894cd7-91e2-4681-bd86-adfa5ea0c58e",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "17f0924c-e723-4d1a-8853-4dfeb787eab7",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-SF-Code",
								"value": "{{sfcode}}",
								"type": "text",
								"disabled": true
							}
						],
						"url": "{{BaseUrl}}api/inventory/daily-requisitions"
					},
					"response": []
				},
				{
					"name": "Inventory EDR log",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "81d70cf0-5e07-4d58-a715-29f1ea3ebb87",
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an object with data property\", function () {\r",
									"    pm.expect(pm.response.json()).to.be.an('object').that.has.property('data');\r",
									"});\r",
									"\r",
									"pm.test(\"Response has a data array with elements\", function () {\r",
									"    pm.expect(pm.response.json().data.data).to.be.an('array').that.is.not.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Response has a statusCode property\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.property('statusCode');\r",
									"});\r",
									"\r",
									"pm.test(\"Response has an isSuccess property\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.property('isSuccess');\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "434e5a71-eb75-4b6f-af18-76ffb9961abb",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "ce6202bf-ac41-46a1-9e18-0990d1f078de",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseUrl}}api/inventory/edrlog/items?from=2024-02-21&to=2024-02-23",
							"host": [
								"{{BaseUrl}}api"
							],
							"path": [
								"inventory",
								"edrlog",
								"items"
							],
							"query": [
								{
									"key": "from",
									"value": "2024-02-21"
								},
								{
									"key": "to",
									"value": "2024-02-23"
								},
								{
									"key": "",
									"value": null,
									"type": "text",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "EDR Log Detail",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3372d544-1abf-460f-9c8d-6efd3667b608",
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Test for the existence of properties in the root object\r",
									"pm.test(\"Response has title, data, statusCode, and isSuccess properties\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('title');\r",
									"    pm.expect(jsonData).to.have.property('data');\r",
									"    pm.expect(jsonData).to.have.property('statusCode');\r",
									"    pm.expect(jsonData).to.have.property('isSuccess');\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "7f771208-022d-456f-b44c-8deab741f3f4",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "aa1a6164-5aad-42a5-b54c-fae323c697e7",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseUrl}}api/inventory/edrlog?EDRLogId=b129f700-8e01-4707-b240-cbdf14f8cdf7",
							"host": [
								"{{BaseUrl}}api"
							],
							"path": [
								"inventory",
								"edrlog"
							],
							"query": [
								{
									"key": "EDRLogId",
									"value": "b129f700-8e01-4707-b240-cbdf14f8cdf7"
								}
							]
						}
					},
					"response": []
				}
			],
			"id": "ec30353a-0b74-4f75-975a-ac6501937a0a"
		},
		{
			"name": "UserAccess",
			"item": [
				{
					"name": "Get All Users",
					"id": "b2d2ed62-aed2-4e25-8012-42c149f20349",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Sf-Code",
								"value": "20071",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"username\": \"b\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseUrl}}api/useraccess/lookup/users"
					},
					"response": []
				},
				{
					"name": "LogedIn User Detail",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3c8fff73-9e25-4d0e-9707-bdf2841cd0a4",
								"exec": [
									"pm.test(\"Response Content-Type is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									" \r",
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									" \r",
									"pm.test(\"Response is an object with data property\", function () {\r",
									"    pm.expect(pm.response.json()).to.be.an('object').that.has.property('data');\r",
									"});\r",
									" \r",
									"pm.test(\"Response data has roleID, roleName, and hierarchy properties\", function () {\r",
									"    var data = pm.response.json().data;\r",
									"    pm.expect(data).to.have.property('roleName').that.is.a('string');\r",
									"});\r",
									" \r",
									"pm.test(\"Response data has employeeID, fullName, and totalUnseenNotificationCount properties\", function () {\r",
									"    var data = pm.response.json().data;\r",
									"    pm.expect(data).to.have.property('fullName').that.is.a('string');\r",
									"    pm.expect(data).to.have.property('totalUnseenNotificationCount').that.is.a('number');\r",
									"});\r",
									" \r",
									"pm.test(\"Response data has menus, schools, and permissions properties\", function () {\r",
									"    var data = pm.response.json().data;\r",
									"    pm.expect(data).to.have.property('menus').that.is.an('array');\r",
									"    pm.expect(data).to.have.property('schools').that.is.an('array');\r",
									"    pm.expect(data).to.have.property('permissions').that.is.an('array');\r",
									"    pm.expect(data).to.have.property('staticTexts').that.is.an('array');\r",
									"    pm.expect(data).to.have.property('applicationSettings').that.is.an('array');\r",
									"});\r",
									" \r",
									" \r",
									"pm.test(\"Response data has statusCode and isSuccess properties\", function () {\r",
									"    var data = pm.response.json();\r",
									"    pm.expect(data).to.have.property('statusCode').that.is.a('number');\r",
									"    pm.expect(data).to.have.property('isSuccess').that.is.a('boolean');\r",
									"});\r",
									" \r",
									"pm.test(\"Permissions array should not be empty\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"   \r",
									"    pm.expect(responseData.data.permissions).to.be.an('array').and.to.have.lengthOf.at.least(1, \"Permissions array should not be empty\");\r",
									"});\r",
									" \r",
									"pm.test(\"Static texts array contains objects with required properties\", function () {\r",
									"    const responseData = pm.response.json().data;\r",
									" \r",
									"    pm.expect(responseData.staticTexts).to.be.an('array');\r",
									"    responseData.staticTexts.forEach(function(staticText) {\r",
									"        pm.expect(staticText).to.have.property('code').that.is.a('string');\r",
									"        pm.expect(staticText).to.have.property('text').that.is.a('string');\r",
									"        pm.expect(staticText).to.have.property('description').that.is.a('string');\r",
									"    });\r",
									"});\r",
									"pm.test(\"Response data has roleName property\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"   \r",
									"    pm.expect(responseData).to.have.property('data');\r",
									"    pm.expect(responseData.data).to.have.property('roleName');\r",
									"});\r",
									" \r",
									" \r",
									"pm.test(\"Response data has userID property\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"   \r",
									"    pm.expect(responseData).to.have.property('data');\r",
									"    pm.expect(responseData.data).to.have.property('userID');\r",
									"});\r",
									" \r",
									" \r",
									"pm.test(\"Response data has email property\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"   \r",
									"    pm.expect(responseData).to.have.property('data');\r",
									"    pm.expect(responseData.data).to.have.property('email');\r",
									"});\r",
									" \r",
									" \r",
									"pm.test(\"Response data has totalUnseenNotificationCount property\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"   \r",
									"    pm.expect(responseData.data).to.have.property('totalUnseenNotificationCount');\r",
									"});\r",
									" \r",
									" \r",
									"pm.test(\"Response data has menus property\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"   \r",
									"    pm.expect(responseData.data).to.have.property('menus');\r",
									"});\r",
									" \r",
									" pm.test(\"Static Text array should not be empty\", function () {\r",
									"    const responseData = pm.response.json();   \r",
									"    pm.expect(responseData.data.staticTexts).to.be.an('array').and.to.have.lengthOf.at.least(1, \"Static Text array should not be empty\");\r",
									"});\r",
									"\r",
									" pm.test(\"Application Settings array should not be empty\", function () {\r",
									"    const responseData = pm.response.json();   \r",
									"    pm.expect(responseData.data.applicationSettings).to.be.an('array').and.to.have.lengthOf.at.least(1, \"Application Settings should not be empty\");\r",
									"});\r",
									"\r",
									"pm.test(\"Permissions array should not be empty\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"   \r",
									"    pm.expect(responseData.data.permissions).to.be.an('array').and.to.have.lengthOf.at.least(1, \"Permissions array should not be empty\");\r",
									"});\r",
									" "
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "d8beffe4-ff84-40e9-9582-0fe945fa2132",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "480a6ec8-3465-406f-8ab1-a4589c34a665",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Id-Token",
								"value": "{{jwtToken}}",
								"type": "text"
							}
						],
						"url": "{{BaseUrl}}api/useraccess/user"
					},
					"response": []
				},
				{
					"name": "Save Impersonation",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3c8fff73-9e25-4d0e-9707-bdf2841cd0a4",
								"exec": [
									"pm.test(\"Response Content-Type is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									" \r",
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									" "
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "d8beffe4-ff84-40e9-9582-0fe945fa2132",
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "de5447f3-544c-4fd5-86d5-0062ed422393",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Id-Token",
								"value": "{{jwtToken}}",
								"type": "text"
							},
							{
								"key": "X-Sf-Code",
								"value": "{{sfcode}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"impersonatedUserId\": \"cking\",\r\n    \"reason\": \"test impersonation\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseUrl}}api/useraccess/impersonation"
					},
					"response": []
				},
				{
					"name": "Release Impersonation",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3c8fff73-9e25-4d0e-9707-bdf2841cd0a4",
								"exec": [
									"pm.test(\"Response Content-Type is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									" \r",
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									" "
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "d8beffe4-ff84-40e9-9582-0fe945fa2132",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "eac5836a-34ce-4440-83a0-54293de52b73",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "X-Id-Token",
								"value": "{{jwtToken}}",
								"type": "text"
							},
							{
								"key": "X-Impersonated-User-Id",
								"value": "cking",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"impersonatedUserId\": \"cking\",\r\n    \"note\": \"test impersonation\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseUrl}}api/useraccess/user/release"
					},
					"response": []
				}
			],
			"id": "5eccd812-c47e-4f1d-b118-c9a30e28492d"
		},
		{
			"name": "Daily Requisition",
			"item": [
				{
					"name": "Submit Daily Requisition",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f5693fa7-6bad-402f-9260-c9ae795aacb2",
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an object with title, statusCode, and isSuccess properties\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an('object').that.includes.all.keys('title', 'statusCode', 'isSuccess');\r",
									"});\r",
									"pm.test(\"Content-Type header is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Title is a non-empty string\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  pm.expect(responseData).to.be.an('object');\r",
									"  pm.expect(responseData.title).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Title should not be empty\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"StatusCode is a non-negative integer\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData.statusCode).to.be.a('number');\r",
									"    pm.expect(responseData.statusCode).to.be.at.least(0);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"IsSuccess is a boolean\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData.isSuccess).to.be.a('boolean');\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "f5894cd7-91e2-4681-bd86-adfa5ea0c58e",
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "c0c821ca-7170-4988-bac3-171f99d5b534",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"RequisitionId\" : \"9f01e9a7-33ec-4df4-ae25-9f04ea872f27\",\r\n    \"WorkFlowActionId\" : \"Submit\",\r\n    \"IsService\": false\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseUrl}}api/inventory/daily-requisitions/submit"
					},
					"response": []
				},
				{
					"name": "Get Daily Requisition",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f5693fa7-6bad-402f-9260-c9ae795aacb2",
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an object with title, data, statusCode, and isSuccess properties\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an('object').that.has.all.keys('title', 'data', 'statusCode', 'isSuccess');\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "f5894cd7-91e2-4681-bd86-adfa5ea0c58e",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "faa46a7f-6abb-45e2-a78e-68febdd41719",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseUrl}}api/inventory/daily-requisitions?id=36b5a0b5-0145-4f46-bd94-27c60335bfb8",
							"host": [
								"{{BaseUrl}}api"
							],
							"path": [
								"inventory",
								"daily-requisitions"
							],
							"query": [
								{
									"key": "id",
									"value": "36b5a0b5-0145-4f46-bd94-27c60335bfb8"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Daily Requisition Detail",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d1ae2c78-a49a-4986-93af-7f2317ac1234",
								"exec": [
									"pm.test('Response status code is 200', function () {\r",
									"    pm.response.to.have.status(200);\r",
									"})\r",
									"\r",
									"pm.test('Response is an object with title, data, statusCode, and isSuccess properties', function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an('object').that.has.all.keys('title', 'data', 'statusCode', 'isSuccess');\r",
									"})\r",
									"\r",
									"\r",
									"pm.test(\"Response Content-Type is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Data array should have at least one element\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData.data).to.be.an('array').that.is.not.empty;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"StatusCode is a non-negative integer\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"  pm.expect(responseData.statusCode).to.be.a('number');\r",
									"  pm.expect(responseData.statusCode).to.be.at.least(0, \"StatusCode should be a non-negative integer\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"IsSuccess is a boolean value\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData.isSuccess).to.be.a('boolean');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Title is a non-empty string\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData.title).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Title should not be empty\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"StatusCode is a non-null value\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData.statusCode).to.exist;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"IsSuccess property should be true\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData.isSuccess).to.be.true;\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "233eade7-9082-43a6-b00b-8a91c8460e4a",
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "050881f3-6f6d-4a15-81d7-c7446edefaec",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseUrl}}api/inventory/daily-requisitions/items?id=82CFA55C-15F8-4CED-A2E1-4E40597BA781",
							"host": [
								"{{BaseUrl}}api"
							],
							"path": [
								"inventory",
								"daily-requisitions",
								"items"
							],
							"query": [
								{
									"key": "id",
									"value": "82CFA55C-15F8-4CED-A2E1-4E40597BA781"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Daily Requisition",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f5693fa7-6bad-402f-9260-c9ae795aacb2",
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an object with title, data, statusCode, and isSuccess properties\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an('object').that.has.all.keys('title', 'data', 'statusCode', 'isSuccess');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "f5894cd7-91e2-4681-bd86-adfa5ea0c58e",
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "f518b01d-460e-461c-8e23-8748ef0cc22f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"ServiceDate\": \"2024-04-16\",\r\n    \"Note\": \"Mahesh\",\r\n    \"IsService\": true,\r\n    \"WorkFlowActionId\":\"Create\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseUrl}}api/inventory/daily-requisitions"
					},
					"response": []
				},
				{
					"name": "Update Daily Requisition",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f5693fa7-6bad-402f-9260-c9ae795aacb2",
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an object with title, data, statusCode, and isSuccess properties\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an('object').that.has.all.keys('title', 'data', 'statusCode', 'isSuccess');\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "f5894cd7-91e2-4681-bd86-adfa5ea0c58e",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "5a14daf4-fff7-421b-ae54-a8ea19d3e7b7",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": \"a1faae5d-2233-4440-a8e6-81c90820855f\",\r\n    \"serviceDate\": \"2024-01-30\",\r\n    \"isService\": true\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseUrl}}api/inventory/dailyrequisitions/sfCode/{{sfcode}}"
					},
					"response": []
				},
				{
					"name": "Save Daily Requisition Detail",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f5693fa7-6bad-402f-9260-c9ae795aacb2",
								"exec": [
									"pm.test('Response status code is 200', function () {\r",
									"    pm.response.to.have.status(200);\r",
									"})\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "f5894cd7-91e2-4681-bd86-adfa5ea0c58e",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "3d2dc2cb-f915-4ee2-a893-c572f88ea59a",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"dailyRequisitionDetailList\": [\r\n    {\r\n      \"inventoryItemId\": \"AC9A2C57-7A0A-4C7C-81E7-001C206B11B7\",\r\n      \"quantity\": 2,\r\n      \"dailyRequisitionId\": \"36b5a0b5-0145-4f46-bd94-27c60335bfb8\",\r\n      \"sfcode\": \"20071\"\r\n    },\r\n    {\r\n      \"inventoryItemId\": \"111CE6B5-571F-48B7-AF27-001CEADD40E7\",\r\n      \"quantity\": 1,\r\n      \"dailyRequisitionId\": \"36b5a0b5-0145-4f46-bd94-27c60335bfb8\",\r\n      \"sfcode\": \"20071\"\r\n    }\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseUrl}}/api/inventory/daily-requisitions/details"
					},
					"response": [
						{
							"id": "1989b873-0fc1-4234-b2b5-75d88b040909",
							"name": "Add Daily Requisition Detail",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"dailyRequisitionDetailList\": [\r\n    {\r\n      \"inventoryItemId\": \"0a8d4706-0e9b-4161-a98f-0a16a5c0d6ec\",\r\n      \"quantity\": 10,\r\n      \"dailyRequisitionId\": \"82CFA55C-15F8-4CED-A2E1-4E40597BA781\",\r\n      \"sfcode\": \"24293\"\r\n    },\r\n    {\r\n      \"inventoryItemId\": \"82CFA55C-15F8-4CED-A2E1-4E40597BA781\",\r\n      \"quantity\": 20,\r\n      \"dailyRequisitionId\": \"82CFA55C-15F8-4CED-A2E1-4E40597BA781\",\r\n      \"sfcode\": \"24293\"\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{BaseUrl}}api/inventory/daily-requisitions/items"
							},
							"_postman_previewlanguage": null,
							"header": null,
							"cookie": [],
							"responseTime": null,
							"body": null
						},
						{
							"id": "f44c319b-a827-4867-8498-d7a5fc80a064",
							"name": "Update daily Requisition Detail",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"dailyRequisitionDetailList\": [\r\n    {\r\n      \"inventoryItemId\": \"AC9A2C57-7A0A-4C7C-81E7-001C206B11B7\",\r\n      \"quantity\": 2,\r\n      \"dailyRequisitionId\": \"a08eba28-3d5f-4d76-bc9e-bb2c511dc6a2\",\r\n      \"sfcode\": \"20071\"\r\n    },\r\n    {\r\n      \"inventoryItemId\": \"111CE6B5-571F-48B7-AF27-001CEADD40E7\",\r\n      \"quantity\": 1,\r\n      \"dailyRequisitionId\": \"a08eba28-3d5f-4d76-bc9e-bb2c511dc6a2\",\r\n      \"sfcode\": \"20071\"\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{BaseUrl}}api/inventory/daily-requisitions/items"
							},
							"_postman_previewlanguage": null,
							"header": null,
							"cookie": [],
							"responseTime": null,
							"body": null
						}
					]
				}
			],
			"id": "532f4277-3725-41f0-b332-e9e05f44fcd7"
		},
		{
			"name": "Physical Inventory",
			"item": [
				{
					"name": "Process Workflow Physical Inventory",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f5693fa7-6bad-402f-9260-c9ae795aacb2",
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an object with title, statusCode, and isSuccess properties\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an('object').that.includes.all.keys('title', 'statusCode', 'isSuccess');\r",
									"});\r",
									"pm.test(\"Content-Type header is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Title is a non-empty string\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  pm.expect(responseData).to.be.an('object');\r",
									"  pm.expect(responseData.title).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Title should not be empty\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"StatusCode is a non-negative integer\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData.statusCode).to.be.a('number');\r",
									"    pm.expect(responseData.statusCode).to.be.at.least(0);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"IsSuccess is a boolean\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData.isSuccess).to.be.a('boolean');\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "f5894cd7-91e2-4681-bd86-adfa5ea0c58e",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "5f4aa111-b8a7-4d06-9b90-8e87a50873fd",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"RequisitionId\" : \"cc21f23b-57ec-4cd4-af70-0108a15d9955\",\r\n    \"WorkFlowActionId\" : \"Submit\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseUrl}}api/inventory/physical-inventory/submit"
					},
					"response": []
				},
				{
					"name": "Get Physical Inventory",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f5693fa7-6bad-402f-9260-c9ae795aacb2",
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is a JSON object\", function () {\r",
									"    pm.expect(pm.response.json()).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test(\"Response has data property\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.property('data');\r",
									"});\r",
									"\r",
									"pm.test(\"Response has title property\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.property('title');\r",
									"});\r",
									"\r",
									"pm.test(\"Response has statusCode property\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.property('statusCode');\r",
									"});\r",
									"\r",
									"pm.test(\"Response has isSuccess property\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.property('isSuccess');\r",
									"});\r",
									"pm.test(\"Response Content-Type header is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Validate the data object properties\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData.data).to.be.an('object');\r",
									"    pm.expect(responseData.data.id).to.exist.and.to.be.a('string');\r",
									"    pm.expect(responseData.data.physicalInventoryDate).to.exist.and.to.be.a('string');\r",
									"    pm.expect(responseData.data.status).to.exist.and.to.be.an('object');\r",
									"    pm.expect(responseData.data.note).to.exist.and.to.be.a('string');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Status code is a non-negative integer\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData.statusCode).to.be.a('number');\r",
									"    pm.expect(responseData.statusCode).to.be.at.least(0);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"IsSuccess property is a boolean\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData.isSuccess).to.be.a('boolean');\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "f5894cd7-91e2-4681-bd86-adfa5ea0c58e",
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "e45ef2e1-ccae-4e4d-92b1-b340464bb6b2",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseUrl}}api/inventory/physical-inventory/?id=c6caa54d-6b20-4aa5-b8c4-7048d9973bda",
							"host": [
								"{{BaseUrl}}api"
							],
							"path": [
								"inventory",
								"physical-inventory",
								""
							],
							"query": [
								{
									"key": "id",
									"value": "c6caa54d-6b20-4aa5-b8c4-7048d9973bda"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Physical Inventory Detail",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d1ae2c78-a49a-4986-93af-7f2317ac1234",
								"exec": [
									"pm.test('Response status code is 200', function () {\r",
									"    pm.response.to.have.status(200);\r",
									"})\r",
									"\r",
									"pm.test('Response is an object with title, data, statusCode, and isSuccess properties', function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an('object').that.has.all.keys('title', 'data', 'statusCode', 'isSuccess');\r",
									"})\r",
									"\r",
									"\r",
									"pm.test(\"Response Content-Type is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Data array should have at least one element\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData.data).to.be.an('array').that.is.not.empty;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"StatusCode is a non-negative integer\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"  pm.expect(responseData.statusCode).to.be.a('number');\r",
									"  pm.expect(responseData.statusCode).to.be.at.least(0, \"StatusCode should be a non-negative integer\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"IsSuccess is a boolean value\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData.isSuccess).to.be.a('boolean');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Title is a non-empty string\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData.title).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Title should not be empty\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"StatusCode is a non-null value\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData.statusCode).to.exist;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"IsSuccess property should be true\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData.isSuccess).to.be.true;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Each element in the data array should have a non-empty reference number\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData.data).to.be.an('array');\r",
									"    responseData.data.forEach(function(element) {\r",
									"        pm.expect(element.referenceNumber).to.exist.and.to.have.lengthOf.at.least(1, \"Reference number should not be empty\");\r",
									"    });\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Title should be a non-null value\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"  pm.expect(responseData.title).to.exist.and.to.not.be.null;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Verify that statusCode property is present and has a valid value\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.have.property('statusCode');\r",
									"    pm.expect(responseData.statusCode).to.be.a('number');\r",
									"    pm.expect(responseData.statusCode).to.not.equal(null);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "233eade7-9082-43a6-b00b-8a91c8460e4a",
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "c82a9df4-f210-4ac9-8455-a748725e5548",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseUrl}}api/inventory/physical-inventory/details?id=2d5e1f9e-baac-46f9-9451-0d902e59a95c",
							"host": [
								"{{BaseUrl}}api"
							],
							"path": [
								"inventory",
								"physical-inventory",
								"details"
							],
							"query": [
								{
									"key": "id",
									"value": "2d5e1f9e-baac-46f9-9451-0d902e59a95c"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Physical Inventory",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f5693fa7-6bad-402f-9260-c9ae795aacb2",
								"exec": [
									"pm.test(\"Response status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is a JSON object\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response has title, data, statusCode, and isSuccess properties\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an('object').that.includes.all.keys('title', 'data', 'statusCode', 'isSuccess');\r",
									"});\r",
									"pm.test(\"Response includes a non-empty title field\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"\r",
									"  pm.expect(responseData).to.be.an('object');\r",
									"  pm.expect(responseData.title).to.exist.and.to.have.lengthOf.at.least(1, \"Title should not be empty\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"StatusCode is a non-negative integer\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData.statusCode).to.be.a('number');\r",
									"    pm.expect(responseData.statusCode).to.be.at.least(0);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"IsSuccess is a boolean value\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    pm.expect(responseData.isSuccess).to.be.a('boolean');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Data field is present and not null\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.data).to.exist.and.to.not.be.null;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Title is a non-empty string\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.title).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Title should not be empty\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "f5894cd7-91e2-4681-bd86-adfa5ea0c58e",
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "5a92ffa0-c43c-452f-945f-1b2fa5575290",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"ServiceDate\": \"2024-04-12\",\r\n    \"Note\": \"Mahesh 1\",\r\n    \"WorkFlowActionId\":\"Create\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseUrl}}api/inventory/physical-inventory"
					},
					"response": []
				},
				{
					"name": "Update Physical Inventory",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f5693fa7-6bad-402f-9260-c9ae795aacb2",
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is a JSON object with title, statusCode, and isSuccess properties\", function () {\r",
									"    pm.expect(pm.response.json()).to.be.an('object').that.has.all.keys('title', 'statusCode', 'isSuccess');\r",
									"});\r",
									"pm.test(\"Response Content-Type is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Title is a non-empty string\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.title).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Title should not be empty\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"StatusCode is a number\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    pm.expect(responseData.statusCode).to.be.a('number');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"IsSuccess is a boolean\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData.isSuccess).to.be.a('boolean');\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "f5894cd7-91e2-4681-bd86-adfa5ea0c58e",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "3b24a0f6-3205-473c-b9f8-68b2dd90640e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\" : \"09a019f1-5f32-4efe-b10a-d4d823a66415\",\r\n  \"note\": \"update\",\r\n  \"serviceDate\": \"2023-01-22\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseUrl}}api/inventory/physical-inventory",
							"host": [
								"{{BaseUrl}}api"
							],
							"path": [
								"inventory",
								"physical-inventory"
							],
							"query": [
								{
									"key": "id",
									"value": "6025760b-6925-4316-b820-6f219c34bb50",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Save Physical Inventory Detail",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f5693fa7-6bad-402f-9260-c9ae795aacb2",
								"exec": [
									"pm.test('Response status code is 200', function () {\r",
									"    pm.response.to.have.status(200);\r",
									"})\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "f5894cd7-91e2-4681-bd86-adfa5ea0c58e",
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "e239f3ea-8241-4788-a216-8db4a4f1bc9d",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"physicalInventoryDetailList\": [\r\n    {\r\n      \"id\": null,\r\n      \"inventoryItemId\": \"6f0d3ca2-4689-430c-8650-5a7d9105d5a4\",\r\n      \"quantity\": 500,\r\n      \"physicalInventoryId\": \"38f879f4-0351-4ced-8f87-2dcd28165b81\",\r\n      \"sfcode\": \"17002\"\r\n    },\r\n    {\r\n      \"id\": null,\r\n      \"inventoryItemId\": \"4869bbb3-c75a-447e-af7e-269a9d476069\",\r\n      \"quantity\": 300,\r\n      \"physicalInventoryId\": \"38f879f4-0351-4ced-8f87-2dcd28165b81\",\r\n      \"sfcode\": \"17002\"\r\n    },\r\n    {\r\n      \"id\": null,\r\n      \"inventoryItemId\": \"fcb7582b-5719-48f6-80a0-7742880de331\",\r\n      \"quantity\": 450,\r\n      \"physicalInventoryId\": \"38f879f4-0351-4ced-8f87-2dcd28165b81\",\r\n      \"sfcode\": \"17002\"\r\n    },\r\n    {\r\n      \"id\": null,\r\n      \"inventoryItemId\": \"60060314-c0fc-454c-a944-923934b2c79b\",\r\n      \"quantity\": 800,\r\n      \"physicalInventoryId\": \"38f879f4-0351-4ced-8f87-2dcd28165b81\",\r\n      \"sfcode\": \"17002\"\r\n    },\r\n    {\r\n      \"id\": null,\r\n      \"inventoryItemId\": \"57500eb2-4a8f-4e43-8b5b-f86af93e5470\",\r\n      \"quantity\": 500,\r\n      \"physicalInventoryId\": \"38f879f4-0351-4ced-8f87-2dcd28165b81\",\r\n      \"sfcode\": \"17002\"\r\n    }\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseUrl}}api/inventory/physical-inventory/details"
					},
					"response": [
						{
							"id": "de99df5a-9ef4-473c-bab4-771cfa9e33ed",
							"name": "Add Physical Inventory Detail",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"physicalInventoryDetailList\": [\r\n    {\r\n      \"inventoryItemId\": \"AC9A2C57-7A0A-4C7C-81E7-001C206B11B7\",\r\n      \"quantity\": 2,\r\n      \"physicalInventoryId\": \"BF2002AB-2C0D-437C-A58B-F9994056D329\",\r\n      \"sfcode\": \"20071\"\r\n    },\r\n    {\r\n      \"inventoryItemId\": \"111CE6B5-571F-48B7-AF27-001CEADD40E7\",\r\n      \"quantity\": 1,\r\n      \"physicalInventoryId\": \"BF2002AB-2C0D-437C-A58B-F9994056D329\",\r\n      \"sfcode\": \"20071\"\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{BaseUrl}}api/inventory/physical-inventory/details"
							},
							"_postman_previewlanguage": null,
							"header": null,
							"cookie": [],
							"responseTime": null,
							"body": null
						},
						{
							"id": "d405f195-13c4-4258-a0fb-34a45cde446f",
							"name": "Update Physical Inventory Detail",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"dailyRequisitionDetailList\": [\r\n    {\r\n      \"inventoryItemId\": \"AC9A2C57-7A0A-4C7C-81E7-001C206B11B7\",\r\n      \"quantity\": 2,\r\n      \"dailyRequisitionId\": \"a08eba28-3d5f-4d76-bc9e-bb2c511dc6a2\",\r\n      \"sfcode\": \"20071\"\r\n    },\r\n    {\r\n      \"inventoryItemId\": \"111CE6B5-571F-48B7-AF27-001CEADD40E7\",\r\n      \"quantity\": 1,\r\n      \"dailyRequisitionId\": \"a08eba28-3d5f-4d76-bc9e-bb2c511dc6a2\",\r\n      \"sfcode\": \"20071\"\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{BaseUrl}}api/inventory/physical-inventory/details"
							},
							"_postman_previewlanguage": null,
							"header": null,
							"cookie": [],
							"responseTime": null,
							"body": null
						}
					]
				},
				{
					"name": "PhysicalInventoryDetails",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f5693fa7-6bad-402f-9260-c9ae795aacb2",
								"exec": [
									"pm.test('Response status code is 200', function () {\r",
									"    pm.response.to.have.status(200);\r",
									"})\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "f5894cd7-91e2-4681-bd86-adfa5ea0c58e",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "ea390aae-ac0f-49ea-bb04-8262dd955b12",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"physicalInventoryDetailList\": [\r\n    {\r\n      \"inventoryItemId\": \"C68B650D-7858-4612-AB24-00B8BE9807B4\",\r\n      \"quantity\": 2,\r\n      \"physicalInventoryId\": \"ef995e0a-5a2f-4425-b807-71fabf378b6c\",\r\n      \"sfcode\": \"20071\"\r\n    },\r\n    {\r\n      \"inventoryItemId\": \"10DCA8D4-8F1B-4022-A8A5-076B05151090\",\r\n      \"quantity\": 1,\r\n      \"physicalInventoryId\": \"ef995e0a-5a2f-4425-b807-71fabf378b6c\",\r\n      \"sfcode\": \"20071\"\r\n    }\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseUrl}}api/inventory/physical-inventory/details"
					},
					"response": []
				}
			],
			"id": "406227f5-5df2-49e5-915f-8ae5d4da3cb4"
		},
		{
			"name": "Notification",
			"item": [
				{
					"name": "Get Unseen Notification",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "20964d6e-5c19-4fa0-b9ea-5bed5050cbdf",
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an object with title, data, statusCode, and isSuccess properties\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an('object').that.has.all.keys('title', 'data', 'statusCode', 'isSuccess');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "9444e897-19bd-4ec3-a00a-8fe87471ef3e",
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "6096a9f9-b968-4a65-8444-8bafec66924c",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{BaseUrl}}api/admin/in-app-notifications/unseen_total"
					},
					"response": []
				},
				{
					"name": "Get Notification with pagination",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "df619c9f-b255-42d7-a100-ffde447eea1f",
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an object with title, data, statusCode, and isSuccess properties\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an('object');\r",
									"    pm.expect(jsonData).to.have.property('title');\r",
									"    pm.expect(jsonData).to.have.property('data');\r",
									"    pm.expect(jsonData).to.have.property('statusCode');\r",
									"    pm.expect(jsonData).to.have.property('isSuccess');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "c5a84bbe-bde1-434b-8131-f334b43c4c44",
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "3bb71032-c98a-405f-9e42-c0da8c8f050e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseUrl}}api/admin/in-app-notifications?Page=1&PageSize=10",
							"host": [
								"{{BaseUrl}}api"
							],
							"path": [
								"admin",
								"in-app-notifications"
							],
							"query": [
								{
									"key": "Page",
									"value": "1"
								},
								{
									"key": "PageSize",
									"value": "10"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Notifications By Seen",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "df619c9f-b255-42d7-a100-ffde447eea1f",
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an object with title, data, statusCode, and isSuccess properties\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an('object');\r",
									"    pm.expect(jsonData).to.have.property('title');\r",
									"    pm.expect(jsonData).to.have.property('data');\r",
									"    pm.expect(jsonData).to.have.property('statusCode');\r",
									"    pm.expect(jsonData).to.have.property('isSuccess');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "c5a84bbe-bde1-434b-8131-f334b43c4c44",
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "793c470e-7c87-47ca-8fd7-e19b66b97e91",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"ids\": [\r\n        {\r\n            \"dc4a2604-42b8-4b83-adc9-ab0c3d57a20a\"\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseUrl}}api/admin/in-app-notifications"
					},
					"response": []
				}
			],
			"id": "f3f0c345-d793-4466-a5bd-d1f622b25d5b"
		},
		{
			"name": "Adjustments",
			"item": [
				{
					"name": "CreateAdjustment",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "840dbe15-94cc-4b7f-bd40-b2a68bb9fc04",
								"exec": [
									"pm.test(\"Response status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an object with title, data, statusCode, and isSuccess properties\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an('object').that.has.all.keys('title', 'data', 'statusCode', 'isSuccess');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "39ebe501-53fc-40bb-b471-3ae1cb0f9891",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"workFlowActionId\": \"Create\",\r\n    \"serviceDate\": \"2024-04-15\",\r\n    \"note\": \"test\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseUrl}}api/inventory/adjustment"
					},
					"response": []
				},
				{
					"name": "SubmitAdjustment",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "840dbe15-94cc-4b7f-bd40-b2a68bb9fc04",
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an object with title, data, statusCode, and isSuccess properties\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an('object').that.has.all.keys('title', 'statusCode', 'isSuccess');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "af604366-5629-4d84-b63c-a3627969824a",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"adjustmentId\": \"43b7f077-85ba-4a5a-aa6f-a8d850908ece\",\r\n    \"workFlowActionId\": \"submit\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseUrl}}api/inventory/adjustment/submit"
					},
					"response": []
				},
				{
					"name": "UpdateAdjustment",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ae927a90-e929-49ec-997a-6951995d8b4e",
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "e9342cde-bb7b-49c5-aa9d-c680b681ff42",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"serviceDate\": \"2024-01-25T00:00:00.000Z\",\r\n    \"note\": \"Notes 2546 m123\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseUrl}}api/inventory/adjustment/2A1E188B-8830-44D3-8A63-9EAE6F4212CC"
					},
					"response": []
				},
				{
					"name": "SaveAdjustmentDetails",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "abbc9634-c1e2-4a0e-9a6f-e8e42c3e1f92",
								"exec": [
									"pm.test('Response status code is 200', function () {\r",
									"    pm.response.to.have.status(200);\r",
									"})\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "e266a5f5-af2c-461a-938d-92aad3b55f8a",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"adjustmentDetails\": [\r\n    {\r\n      \"id\": null,\r\n      \"adjustmentId\": \"492611F3-75EF-46AD-BD7B-A0D33EF62E17\",\r\n      \"inventoryItemId\": \"C68B650D-7858-4612-AB24-00B8BE9807B4\",\r\n      \"quantity\": 2,\r\n      \"adjustmentType\": 2,\r\n      \"note\": null\r\n    }\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseUrl}}api/inventory/adjustment/details"
					},
					"response": []
				},
				{
					"name": "DeleteAdjustmentDetails",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "abbc9634-c1e2-4a0e-9a6f-e8e42c3e1f92",
								"exec": [
									"pm.test('Response status code is 200', function () {\r",
									"    pm.response.to.have.status(200);\r",
									"})\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "54fa2fbb-f9ab-46f4-a3cc-556d1b6eaef8",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"adjustmentId\": \"492611F3-75EF-46AD-BD7B-A0D33EF62E17\",\r\n    \"adjustmentDetailIds\": [\r\n            \"C8082CD2-FC54-475D-812D-6E3C77F82CFF\"\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseUrl}}api/inventory/adjustment/details"
					},
					"response": []
				},
				{
					"name": "GetAdjustmentById",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b563e65c-f398-4db0-a5ea-499be15fcb98",
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an object with title, data, statusCode, and isSuccess properties\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an('object').that.has.all.keys('title', 'data', 'statusCode', 'isSuccess');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "b6216631-dd6b-462c-bcd8-0fa3705b1b74",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{BaseUrl}}api/inventory/adjustment/2A1E188B-8830-44D3-8A63-9EAE6F4212CC"
					},
					"response": []
				},
				{
					"name": "GetAdjustmentDetailsByAdjustmentId",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2d3b542c-5300-4190-83f7-282ecfaf53f6",
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an object with title, data, statusCode, and isSuccess properties\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an('object').that.has.all.keys('title', 'data', 'statusCode', 'isSuccess');\r",
									"});\r",
									"\r",
									"pm.test(\"data array should not be empty\", function () {\r",
									"    const responseData = pm.response.json();   \r",
									"    pm.expect(responseData.data).to.be.an('array').and.to.have.lengthOf.at.least(1, \"data should not be empty\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "2bb189ce-336a-4112-a904-17dee3b273db",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseUrl}}api/inventory/adjustment/details?adjustmentId=492611F3-75EF-46AD-BD7B-A0D33EF62E17",
							"host": [
								"{{BaseUrl}}api"
							],
							"path": [
								"inventory",
								"adjustment",
								"details"
							],
							"query": [
								{
									"key": "adjustmentId",
									"value": "492611F3-75EF-46AD-BD7B-A0D33EF62E17"
								}
							]
						}
					},
					"response": []
				}
			],
			"id": "4d4748fb-1da9-4aaa-8070-1711f747fa05"
		},
		{
			"name": "ProductTransfer",
			"item": [
				{
					"name": "CreateProductTransfer",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "840dbe15-94cc-4b7f-bd40-b2a68bb9fc04",
								"exec": [
									"pm.test(\"Response status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an object with title, data, statusCode, and isSuccess properties\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an('object').that.has.all.keys('title', 'data', 'statusCode', 'isSuccess');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "1b6555c6-7f5d-4ac8-898c-d3ef5785895d",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"transferredOn\": \"2024-02-20T00:00:00.000Z\",\r\n    \"notes\": \"Mahesh test3\",\r\n    \"workFlowActionId\": \"create\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseUrl}}api/inventory/producttransfer/from"
					},
					"response": []
				},
				{
					"name": "UpdateProductTransfer",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ae927a90-e929-49ec-997a-6951995d8b4e",
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "750af0d5-3d92-4812-a586-ef28313cbd8c",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"transferTo\": \"29071\",\r\n    \"transferredOn\": \"2024-01-12T00:00:00.000Z\",\r\n    \"notes\": \"test3\",\r\n    \"transferReason\": \"Yes\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseUrl}}api/inventory/producttransfer/5b815820-0619-49a6-a028-aa8c71272c28"
					},
					"response": []
				},
				{
					"name": "SaveProductTransferDetails",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "abbc9634-c1e2-4a0e-9a6f-e8e42c3e1f92",
								"exec": [
									"pm.test('Response status code is 200', function () {\r",
									"    pm.response.to.have.status(200);\r",
									"})\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "58971861-426c-4263-b79b-177617fb941f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"productTransferDetails\": [\r\n        {\r\n            \"id\": null,\r\n            \"productTransferId\": \"5b815820-0619-49a6-a028-aa8c71272c28\",\r\n            \"inventoryItemId\": \"C68B650D-7858-4612-AB24-00B8BE9807B4\",\r\n            \"quantity\": 2\r\n        },\r\n        {\r\n            \"id\": null,\r\n            \"productTransferId\": \"5b815820-0619-49a6-a028-aa8c71272c28\",\r\n            \"inventoryItemId\": \"3E2B9466-DAA5-456D-A22A-0972BB91DED0\",\r\n            \"quantity\": 3\r\n        },\r\n        {\r\n            \"id\": null,\r\n            \"productTransferId\": \"5b815820-0619-49a6-a028-aa8c71272c28\",\r\n            \"inventoryItemId\": \"0822E4D9-114D-4AE7-87CA-027E6EF16C95\",\r\n            \"quantity\": 1\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseUrl}}api/inventory/producttransfer/details"
					},
					"response": []
				},
				{
					"name": "DeleteProductTransferDetails",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "abbc9634-c1e2-4a0e-9a6f-e8e42c3e1f92",
								"exec": [
									"pm.test('Response status code is 200', function () {\r",
									"    pm.response.to.have.status(200);\r",
									"})\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "8c829db0-aab9-40ad-bb74-95ad939308df",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"productTransferId\": \"8519fd80-838d-4390-8dbe-88b0a8248941\",\r\n    \"productTransferDetailIds\": [\r\n        \"4b406fdc-7714-4afc-ad54-231ed0d44803\",\r\n        \"7bbc4232-ba83-445c-8286-f971cb8bfd60\",\r\n        \"54ba3644-7526-480e-b410-33d3e90d3950\"\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseUrl}}api/reports/producttransfer/sfCode/{{sfcode}}/details"
					},
					"response": []
				},
				{
					"name": "GetProductTransferById",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b563e65c-f398-4db0-a5ea-499be15fcb98",
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an object with title, data, statusCode, and isSuccess properties\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an('object').that.has.all.keys('title', 'data', 'statusCode', 'isSuccess');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "6cb980f3-d407-4551-b1cb-55364f361b73",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{BaseUrl}}api/inventory/producttransfer/96D9B1CB-6C2E-4837-A922-71BDFA180A11"
					},
					"response": []
				},
				{
					"name": "GetProductTransferDetailByProductTransferId",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2d3b542c-5300-4190-83f7-282ecfaf53f6",
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an object with title, data, statusCode, and isSuccess properties\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an('object').that.has.all.keys('title', 'data', 'statusCode', 'isSuccess');\r",
									"});\r",
									"\r",
									"pm.test(\"data array should not be empty\", function () {\r",
									"    const responseData = pm.response.json();   \r",
									"    pm.expect(responseData.data).to.be.an('array').and.to.have.lengthOf.at.least(1, \"data should not be empty\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "8a9a9028-7144-446a-9196-0e2bbde0d465",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{BaseUrl}}api/inventory/producttransfer/5b815820-0619-49a6-a028-aa8c71272c28/details"
					},
					"response": []
				},
				{
					"name": "SubmitProductTransfer",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "840dbe15-94cc-4b7f-bd40-b2a68bb9fc04",
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an object with title, data, statusCode, and isSuccess properties\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an('object').that.has.all.keys('title', 'statusCode', 'isSuccess');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "3a988c6e-2969-4fba-aa32-326a58873b9b",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"productTransferId\": \"5b815820-0619-49a6-a028-aa8c71272c28\",\r\n    \"workFlowActionId\": \"submit\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseUrl}}api/inventory/producttransfer/submit"
					},
					"response": []
				},
				{
					"name": "ConfirmDeliveryProductTransfer",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "840dbe15-94cc-4b7f-bd40-b2a68bb9fc04",
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an object with title, data, statusCode, and isSuccess properties\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an('object').that.has.all.keys('title', 'statusCode', 'isSuccess');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "c21bb547-1959-43cc-95ae-f15615cc6b3b",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"productTransferId\": \"5b815820-0619-49a6-a028-aa8c71272c28\",\r\n    \"workFlowActionId\": \"confirm\",\r\n    \"receivedOn\": \"2024-02-20\",\r\n    \"receiverNotes\": null,\r\n    \"receiverUserName\": \"John test\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseUrl}}api/inventory/producttransfer/confirm-delivery"
					},
					"response": []
				}
			],
			"id": "4b16d038-11b7-4386-8cf4-c187e35a5669"
		},
		{
			"name": "RBAC",
			"item": [
				{
					"name": "Token",
					"id": "27d18eaa-3b27-4ce9-bff6-5a09b1e4abfc",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "client_id",
									"value": "90198e695ff5c761d3f8f9c2bdb2caba",
									"type": "text"
								},
								{
									"key": "client_secret",
									"value": "d42a3f0a381a515b053b1b03431d1833",
									"type": "text"
								},
								{
									"key": "grant_type",
									"value": "password",
									"type": "text"
								},
								{
									"key": "scope",
									"value": "authorization",
									"type": "text"
								},
								{
									"key": "username",
									"value": "service.OFNS",
									"type": "text"
								},
								{
									"key": "password",
									"value": "2nBd2Jz",
									"type": "text"
								}
							]
						},
						"url": "https://apicstg.nycboe.net/doe/stgint/v1/oauth/oauth2/token"
					},
					"response": []
				},
				{
					"name": "Get All Roles",
					"id": "84826ba1-d75d-4e4e-ae8f-1a1e5b4a2731",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "AAIgOTAxOThlNjk1ZmY1Yzc2MWQzZjhmOWMyYmRiMmNhYmHdcv0Nycg_MyIP7kIhAOUtKceDImIZfjCtKyhjX8al4Yyi_Tcc0QP9JaJIF6PhouEVaZDFvB-Hsn8nCJBRuD9CwRxXqv-BJ4IY6XlZLUcdhw"
							}
						},
						"method": "GET",
						"header": [
							{
								"key": "serviceAccountID",
								"value": "4903827682082835",
								"type": "text"
							}
						],
						"url": "https://apicstg.nycboe.net/doe/stgint/v1/authorization/roles/00BE8A96-FEE2-4449-842D-E161A7906A2E"
					},
					"response": []
				},
				{
					"name": "Get Permissions By User",
					"id": "4f3f702f-28fe-4d1d-b616-0e79219aa636",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "AAIgOTAxOThlNjk1ZmY1Yzc2MWQzZjhmOWMyYmRiMmNhYmHdcv0Nycg_MyIP7kIhAOUtKceDImIZfjCtKyhjX8al4Yyi_Tcc0QP9JaJIF6PhouEVaZDFvB-Hsn8nCJBRuD9CwRxXqv-BJ4IY6XlZLUcdhw"
							}
						},
						"method": "GET",
						"header": [
							{
								"key": "serviceAccountID",
								"value": "4903827682082835",
								"type": "text"
							}
						],
						"url": "https://apicstg.nycboe.net/doe/stgint/v1/authorization/tasks-by-user/00BE8A96-FEE2-4449-842D-E161A7906A2E/user/testuser6"
					},
					"response": []
				},
				{
					"name": "Get Permissions By Role",
					"id": "02798fd9-ca5a-49ac-923d-eb3c7dccc9fb",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "AAIgOTAxOThlNjk1ZmY1Yzc2MWQzZjhmOWMyYmRiMmNhYmHdcv0Nycg_MyIP7kIhAOUtKceDImIZfjCtKyhjX8al4Yyi_Tcc0QP9JaJIF6PhouEVaZDFvB-Hsn8nCJBRuD9CwRxXqv-BJ4IY6XlZLUcdhw"
							}
						},
						"method": "GET",
						"header": [
							{
								"key": "serviceAccountID",
								"value": "4903827682082835",
								"type": "text"
							}
						],
						"url": "https://apicstg.nycboe.net/doe/stgint/v1/authorization/tasks-by-role/00BE8A96-FEE2-4449-842D-E161A7906A2E/role/cook"
					},
					"response": []
				},
				{
					"name": "Role Member By User",
					"id": "4707876c-9e32-4ee6-9391-7aa0abe9e13c",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "AAIgOTAxOThlNjk1ZmY1Yzc2MWQzZjhmOWMyYmRiMmNhYmHdcv0Nycg_MyIP7kIhAOUtKceDImIZfjCtKyhjX8al4Yyi_Tcc0QP9JaJIF6PhouEVaZDFvB-Hsn8nCJBRuD9CwRxXqv-BJ4IY6XlZLUcdhw"
							}
						},
						"method": "GET",
						"header": [
							{
								"key": "serviceAccountID",
								"value": "4903827682082835",
								"type": "text"
							}
						],
						"url": "https://apicstg.nycboe.net/doe/stgint/v1/authorization/rolemembers-by-user/00BE8A96-FEE2-4449-842D-E161A7906A2E/user/testuser6"
					},
					"response": []
				},
				{
					"name": "Get All Tasks",
					"id": "1bce96ea-6591-427a-89e4-a136a9fadff6",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "serviceAccountID",
								"value": "4903827682082835",
								"type": "text"
							},
							{
								"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
								"key": "Authorization",
								"value": "Bearer token",
								"type": "text"
							}
						],
						"url": "https://apicstg.nycboe.net/doe/stgint/v1/authorization/tasks/72FC7A52-9508-4CDE-9532-A27A0EEB9744"
					},
					"response": []
				},
				{
					"name": "Member By Role",
					"id": "b8ccc15e-dc46-41f5-859c-a3bab40534c0",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "AAIgOTAxOThlNjk1ZmY1Yzc2MWQzZjhmOWMyYmRiMmNhYmHdcv0Nycg_MyIP7kIhAOUtKceDImIZfjCtKyhjX8al4Yyi_Tcc0QP9JaJIF6PhouEVaZDFvB-Hsn8nCJBRuD9CwRxXqv-BJ4IY6XlZLUcdhw"
							}
						},
						"method": "GET",
						"header": [
							{
								"key": "serviceAccountID",
								"value": "4903827682082835",
								"type": "text"
							}
						],
						"url": "https://apicstg.nycboe.net/doe/stgint/v1/authorization/rolemembers-by-role/00BE8A96-FEE2-4449-842D-E161A7906A2E/role/School Food Manager/users/1/"
					},
					"response": []
				}
			],
			"id": "0c3403e5-17b2-4751-9e84-f3224f8bef96"
		},
		{
			"name": "ProductionSettings",
			"item": [
				{
					"name": "GetProductionSettingBySfCode",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "29981869-ffa6-43d0-8f35-82fa34fb07ae",
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an object with title, data, statusCode, and isSuccess properties\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an('object').that.has.all.keys('title', 'data', 'statusCode', 'isSuccess');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "2a924e0b-aad9-436d-8aae-c8e1e12ca992",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{BaseUrl}}api/production/productionrecord/settings/sfcode/24277"
					},
					"response": []
				},
				{
					"name": "SaveProductionSetting",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "88a7a7c5-22f2-443f-b109-72ec0bf7683e",
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an object with title, data, statusCode, and isSuccess properties\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an('object').that.has.all.keys('title',  'statusCode', 'isSuccess');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "1fc0930c-2b85-4a5d-b6dd-cea78b749c2e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"productionRecordSettingId\": \"d8a3c6e7-b937-44c4-9a4a-4b83976736ef\",\r\n    \"isService\": true,\r\n    \"serviceStartDate\": \"2024-02-29T02:00:00.000Z\",\r\n    \"registeredStudentCount\": 1400,\r\n    \"sfCode\": \"14171\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseUrl}}api/production/productionrecord/settings"
					},
					"response": []
				},
				{
					"name": "GetSchoolsForSettings",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "30850374-f17b-48f7-ac2f-665d4dd50b70",
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an object with title, data, statusCode, and isSuccess properties\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an('object').that.has.all.keys('title', 'data', 'statusCode', 'isSuccess');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "7f8be4f4-a070-48ee-beaf-b069eeba0e90",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{BaseUrl}}api/production/productionrecord/settings/schools/24293"
					},
					"response": []
				},
				{
					"name": "GetMealCounts",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d9ad8d5a-7ebb-43a0-a7f5-bb1caed3f024",
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an object with title, data, statusCode, and isSuccess properties\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an('object').that.has.all.keys('title', 'data', 'statusCode', 'isSuccess');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "d70ccc72-670a-4567-b06e-de3865503505",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{BaseUrl}}api/production/menu/sfcode/{{sfcode}}/meal-counts"
					},
					"response": []
				},
				{
					"name": "SaveMealCounts",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "99cebd4b-dd3a-41a6-a94f-d2a549ddaecf",
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an object with title, data, statusCode, and isSuccess properties\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an('object').that.has.all.keys('title',  'statusCode', 'isSuccess');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "752d7fb9-b580-498a-9938-61c02d5537db",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "    {\r\n    \"sfcode\": \"20071\",\r\n    \"sfcodePlanMealCounts\": [\r\n        {\r\n            \"mealTypeId\": \"4c1a9ed4-5de0-442f-9263-6eb436d7a140\",\r\n            \"monCount\": 150,\r\n            \"tueCount\": 500,\r\n            \"wedCount\": 150,\r\n            \"thuCount\": 500,\r\n            \"friCount\": 500,\r\n            \"satCount\": 150,\r\n            \"sunCount\": 500\r\n        },\r\n        {\r\n            \"mealTypeId\": \"4d8705cf-fc53-48e1-b552-f81b9d47301c\",\r\n            \"monCount\": 250,\r\n            \"tueCount\": 250,\r\n            \"wedCount\": 250,\r\n            \"thuCount\": 150,\r\n            \"friCount\": 150,\r\n            \"satCount\": 110,\r\n            \"sunCount\": 111\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseUrl}}api/production/menu/meal-counts"
					},
					"response": []
				},
				{
					"name": "GetMealTypes",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bfd0d38b-63ae-48f1-ba89-68e82791d565",
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an object with title, data, statusCode, and isSuccess properties\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an('object').that.has.all.keys('title', 'data', 'statusCode', 'isSuccess');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "e8ae9ce3-4b61-4aa2-8790-b2a05288f2dd",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{BaseUrl}}api/production/menu/sfcode/{{sfcode}}/meal-types"
					},
					"response": []
				},
				{
					"name": "GetSpecialProgramsBySfCode",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5db9dd41-7132-454b-9b1a-55ec1d1bd116",
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an object with title, data, statusCode, and isSuccess properties\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an('object').that.has.all.keys('title', 'data', 'statusCode', 'isSuccess');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "8e44fefe-3763-475c-84db-280b5d11fe01",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{BaseUrl}}api/production/specialprogram/sfcode/24277"
					},
					"response": []
				}
			],
			"id": "c9a9edb8-2844-4605-9f17-d2e2fdb57ac4"
		},
		{
			"name": "Production Lookup",
			"item": [
				{
					"name": "Get occurrence-incident-types",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "39dc9560-8136-458e-a889-9fe331e9ab9d",
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an object with title, data, statusCode, and isSuccess properties\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an('object').that.has.all.keys('title', 'data', 'statusCode', 'isSuccess');\r",
									"});\r",
									"\r",
									"pm.test(\"data array should not be empty\", function () {\r",
									"    const responseData = pm.response.json();   \r",
									"    pm.expect(responseData.data.data).to.be.an('array').and.to.have.lengthOf.at.least(1, \"data should not be empty\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "30552feb-8b89-4a06-bf63-4405117a6246",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "135c42ab-98e0-44db-a760-f4a8c80ca98f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{BaseUrl}}api/production/lookup/production-record-header"
					},
					"response": []
				},
				{
					"name": "Get Calendar Holidays",
					"id": "06683887-9881-4dfa-a319-d84291bf7022",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{BaseUrl}}api/production/lookup/calendar/holidays"
					},
					"response": []
				},
				{
					"name": "Production Record Header Update",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "39dc9560-8136-458e-a889-9fe331e9ab9d",
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an object with title, data, statusCode, and isSuccess properties\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an('object').that.has.all.keys('title', 'data', 'statusCode', 'isSuccess');\r",
									"});\r",
									"\r",
									"pm.test(\"data array should not be empty\", function () {\r",
									"    const responseData = pm.response.json();   \r",
									"    pm.expect(responseData.data.data).to.be.an('array').and.to.have.lengthOf.at.least(1, \"data should not be empty\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "30552feb-8b89-4a06-bf63-4405117a6246",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "6c0c745a-847a-4951-b908-310b98aa3486",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": "{{BaseUrl}}api/production/lookup/production-record-header/9F2F7B35-B01D-426E-BEC7-01FE6ABA1BFF"
					},
					"response": []
				},
				{
					"name": "Get Production Record Header All",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "39dc9560-8136-458e-a889-9fe331e9ab9d",
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an object with title, data, statusCode, and isSuccess properties\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an('object').that.has.all.keys('title', 'data', 'statusCode', 'isSuccess');\r",
									"});\r",
									"\r",
									"pm.test(\"data array should not be empty\", function () {\r",
									"    const responseData = pm.response.json();   \r",
									"    pm.expect(responseData.data.data).to.be.an('array').and.to.have.lengthOf.at.least(1, \"data should not be empty\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "30552feb-8b89-4a06-bf63-4405117a6246",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "431edc66-477d-43cc-bda0-d85d379542c4",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseUrl}}api/production/lookup/production-record-header?ServiceDate=2024-03-11&prodRecType=high_school",
							"host": [
								"{{BaseUrl}}api"
							],
							"path": [
								"production",
								"lookup",
								"production-record-header"
							],
							"query": [
								{
									"key": "ServiceDate",
									"value": "2024-03-11"
								},
								{
									"key": "prodRecType",
									"value": "high_school"
								}
							]
						}
					},
					"response": []
				}
			],
			"id": "e3c1455b-fa7d-497a-a9e7-de424686aff8"
		},
		{
			"name": "Production Record",
			"item": [
				{
					"name": "Production Record Header Update",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "39dc9560-8136-458e-a889-9fe331e9ab9d",
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an object with title, data, statusCode, and isSuccess properties\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an('object').that.has.all.keys('title', 'data', 'statusCode', 'isSuccess');\r",
									"});\r",
									"\r",
									"pm.test(\"data array should not be empty\", function () {\r",
									"    const responseData = pm.response.json();   \r",
									"    pm.expect(responseData.data.data).to.be.an('array').and.to.have.lengthOf.at.least(1, \"data should not be empty\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "30552feb-8b89-4a06-bf63-4405117a6246",
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "4d3cd9ed-4ff2-4ae7-bc25-11ae29123df4",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"note\": \"Test\",\r\n  \"isMenuChange\": true,\r\n  \"menuChangeReason\": \"Menu 123\",\r\n  \"serviceScope\": \"1\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseUrl}}api/production/7AAA0228-FDD0-4522-B7D3-00CA980090D4/header"
					},
					"response": []
				}
			],
			"id": "c183080b-f0bc-48db-8b5a-6bbda1835457"
		},
		{
			"name": "Admin Lookup",
			"item": [
				{
					"name": "Get Audit Logs",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "39dc9560-8136-458e-a889-9fe331e9ab9d",
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an object with title, data, statusCode, and isSuccess properties\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an('object').that.has.all.keys('title', 'data', 'statusCode', 'isSuccess');\r",
									"});\r",
									"\r",
									"pm.test(\"data array should not be empty\", function () {\r",
									"    const responseData = pm.response.json();   \r",
									"    pm.expect(responseData.data.data).to.be.an('array').and.to.have.lengthOf.at.least(1, \"data should not be empty\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "30552feb-8b89-4a06-bf63-4405117a6246",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "9c708751-7584-4bbf-9623-dfe33ead7a22",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseUrl}}api/admin/lookup/audit-logs/d2002ad9-b609-4ac5-9508-12181bdf8faf",
							"host": [
								"{{BaseUrl}}api"
							],
							"path": [
								"admin",
								"lookup",
								"audit-logs",
								"d2002ad9-b609-4ac5-9508-12181bdf8faf"
							],
							"query": [
								{
									"key": "page",
									"value": "1",
									"disabled": true
								},
								{
									"key": "pagesize",
									"value": "10lookup",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Workflow Histories",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f7fdf222-d547-4511-b260-0b7b08db61a7",
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an object with title, data, statusCode, and isSuccess properties\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an('object').that.has.all.keys('title', 'data', 'statusCode', 'isSuccess');\r",
									"});\r",
									"\r",
									"pm.test(\"data array should not be empty\", function () {\r",
									"    const responseData = pm.response.json();   \r",
									"    pm.expect(responseData.data).to.be.an('array').and.to.have.lengthOf.at.least(1, \"data should not be empty\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "dd59d33d-3511-4a1a-9822-21a1f0f8766c",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "7ac447ec-5272-4ff9-99a3-af7fbb84e345",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Sf-Code",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"url": "{{BaseUrl}}api/admin/lookup/workflow-history/2A1E188B-8830-44D3-8A63-9EAE6F4212CC"
					},
					"response": []
				},
				{
					"name": "Get Workflow Actions",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "39dc9560-8136-458e-a889-9fe331e9ab9d",
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an object with title, data, statusCode, and isSuccess properties\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an('object').that.has.all.keys('title', 'data', 'statusCode', 'isSuccess');\r",
									"});\r",
									"\r",
									" pm.test(\"data array should not be empty\", function () {\r",
									"    const responseData = pm.response.json();   \r",
									"    pm.expect(responseData.data).to.be.an('array').and.to.have.lengthOf.at.least(1, \"data should not be empty\");\r",
									"});\r",
									"\r",
									"pm.test(\"Static texts array contains objects with required properties\", function () {\r",
									"    const responseData = pm.response.json().data; \r",
									"    responseData.forEach(function(data) {\r",
									"        pm.expect(data).to.have.property('workFlowId').that.is.a('string');\r",
									"        pm.expect(data).to.have.property('workFlowActionId').that.is.a('string');\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "30552feb-8b89-4a06-bf63-4405117a6246",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "ec4fe396-288a-4933-a4b8-ec6250231822",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseUrl}}api/admin/lookup/workflow-actions?entitytypeid=daily_requisition&currentstateid=initiation",
							"host": [
								"{{BaseUrl}}api"
							],
							"path": [
								"admin",
								"lookup",
								"workflow-actions"
							],
							"query": [
								{
									"key": "entitytypeid",
									"value": "daily_requisition"
								},
								{
									"key": "currentstateid",
									"value": "initiation"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Pages",
					"id": "7b1d7361-d3b1-44d8-a29e-38dc03309a50",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{BaseUrl}}api/admin/lookup/pages"
					},
					"response": []
				},
				{
					"name": "Get Roles",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "39dc9560-8136-458e-a889-9fe331e9ab9d",
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an object with title, data, statusCode, and isSuccess properties\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an('object').that.has.all.keys('title', 'data', 'statusCode', 'isSuccess');\r",
									"});\r",
									"\r",
									"pm.test(\"data array should not be empty\", function () {\r",
									"    const responseData = pm.response.json();   \r",
									"    pm.expect(responseData.data.data).to.be.an('array').and.to.have.lengthOf.at.least(1, \"data should not be empty\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "30552feb-8b89-4a06-bf63-4405117a6246",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "180c1e4d-2b4a-44ec-bf34-82f9fdd43113",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{BaseUrl}}api/admin/lookup/roles"
					},
					"response": []
				},
				{
					"name": "Get Notification Types",
					"id": "b604d769-179e-4adb-96e5-22deacb2936e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{BaseUrl}}api/admin/lookup/notification-types"
					},
					"response": []
				},
				{
					"name": "Get Help Text for Page",
					"id": "3e44f354-67cf-4347-95c2-a49e177576af",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{BaseUrl}}api/admin/lookup/help-text/productionrec"
					},
					"response": []
				}
			],
			"id": "39035c1a-4976-4a22-ad8e-b3a8e09d3027"
		},
		{
			"name": "Inventory Lookup",
			"item": [
				{
					"name": "Get All Inventory Items",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "947a903e-faa4-4a6d-a3d6-a52ce55fc8df",
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an object with title, data, statusCode, and isSuccess properties\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an('object').that.has.all.keys('title', 'data', 'statusCode', 'isSuccess');\r",
									"});\r",
									"\r",
									"pm.test(\"data array should not be empty\", function () {\r",
									"    const responseData = pm.response.json();   \r",
									"    pm.expect(responseData.data).to.be.an('array').and.to.have.lengthOf.at.least(1, \"data should not be empty\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "d0f519a5-03d9-473a-acbd-776a3821dc0c",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{BaseUrl}}api/inventory/lookup/items"
					},
					"response": []
				},
				{
					"name": "Get School Inventory Items",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "947a903e-faa4-4a6d-a3d6-a52ce55fc8df",
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an object with title, data, statusCode, and isSuccess properties\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an('object').that.has.all.keys('title', 'data', 'statusCode', 'isSuccess');\r",
									"});\r",
									"\r",
									"pm.test(\"data array should not be empty\", function () {\r",
									"    const responseData = pm.response.json();   \r",
									"    pm.expect(responseData.data).to.be.an('array').and.to.have.lengthOf.at.least(1, \"data should not be empty\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "4d940b44-6799-4305-ae4a-ad15c06d1499",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{BaseUrl}}api/inventory/lookup/school-items"
					},
					"response": []
				},
				{
					"name": "GetReceivingSchools",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "38ebd626-cd27-457d-b4dc-207b0cd33c8c",
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an object with title, data, statusCode, and isSuccess properties\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an('object').that.has.all.keys('title', 'data', 'statusCode', 'isSuccess');\r",
									"});\r",
									"\r",
									"pm.test(\"data array should not be empty\", function () {\r",
									"    const responseData = pm.response.json();   \r",
									"    pm.expect(responseData.data).to.be.an('array').and.to.have.lengthOf.at.least(1, \"data should not be empty\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "1428c0b7-5645-419f-a9f4-57f7bc5f2cb9",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{BaseUrl}}api/inventory/lookup/receiving-schools"
					},
					"response": []
				},
				{
					"name": "GetReceivingSchoolsNew",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "38ebd626-cd27-457d-b4dc-207b0cd33c8c",
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an object with title, data, statusCode, and isSuccess properties\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an('object').that.has.all.keys('title', 'data', 'statusCode', 'isSuccess');\r",
									"});\r",
									"\r",
									"pm.test(\"data array should not be empty\", function () {\r",
									"    const responseData = pm.response.json();   \r",
									"    pm.expect(responseData.data).to.be.an('array').and.to.have.lengthOf.at.least(1, \"data should not be empty\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "f00063d7-80c2-40f3-bc77-0c91874f8f57",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{BaseUrl}}api/inventory/lookup/receiving-schools-new"
					},
					"response": []
				}
			],
			"id": "33b6cbbc-7385-40cd-98f6-f3bb06ce7df7"
		},
		{
			"name": "Inventory Reconciliation",
			"item": [
				{
					"name": "GetInventoryReconciliationById",
					"id": "caccf336-4daf-41b8-a2fe-aca16a2e7210",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Sf-Code",
								"value": "24293",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseUrl}}api/inventory/reconciliation/39D28E23-A22A-440E-A03D-14C031BB0C1F"
					},
					"response": []
				},
				{
					"name": "GetActivePhysicalInventoryBySfCode",
					"id": "f1376782-d213-4ee6-9ef1-54e9e0d86af3",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Sf-Code",
								"value": "17002",
								"type": "text"
							}
						],
						"url": "{{BaseUrl}}api/inventory/physical-inventory/active"
					},
					"response": []
				},
				{
					"name": "GetInventoryReconciliationDetails",
					"id": "409f068c-0546-43b3-99e2-2b56a6f31c7b",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Sf-Code",
								"value": "17002",
								"type": "text"
							}
						],
						"url": "{{BaseUrl}}api/inventory/reconciliation/6ca90df3-22d9-409f-962c-8fcc14e8729e/details"
					},
					"response": []
				},
				{
					"name": "GetPendingForms",
					"id": "daeba4c4-ed2b-4886-abf7-f8260306a6c6",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Sf-Code",
								"value": "20071",
								"type": "text"
							}
						],
						"url": "{{BaseUrl}}api/inventory/reconciliation/pending-forms"
					},
					"response": []
				},
				{
					"name": "CreateInvRecon",
					"id": "31ee13ca-51f5-4466-a4ae-b6ebb375d699",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Sf-Code",
								"value": "24293",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"physicalInventoryId\": \"38f879f4-0351-4ced-8f87-2dcd28165b81\",\r\n  \"reconciliationDate\": \"2024-04-12\",\r\n  \"note\": \"Test 1\",\r\n  \"workFlowActionId\": \"create\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseUrl}}api/inventory/reconciliation"
					},
					"response": []
				},
				{
					"name": "SaveInvReconDetails",
					"id": "d1f71883-11f9-44df-a814-30980abf682f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Sf-Code",
								"value": "17002",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"recordDetails\": [\r\n        {\r\n            \"id\": null,\r\n            \"physicalInventoryDetailId\": \"6E10EED6-803C-4B93-9BE6-11F285E99D52\",\r\n            \"reconciliationRecordId\": \"ad788e1c-5f4a-43d9-b476-265837e35673\",\r\n            \"inventoryItemId\": \"6F0D3CA2-4689-430C-8650-5A7D9105D5A4\",\r\n            \"beginningPerpetual\": 0,\r\n            \"totalIn\": 1400,\r\n            \"totalOut\": 5,\r\n            \"currentPerpetual\": 1395,\r\n            \"physicalOnHand\": 1450,\r\n            \"adjustmentNote\": \"One item added\",\r\n            \"adjustmentQuantity\": 55\r\n        },\r\n        {\r\n            \"id\": null,\r\n            \"physicalInventoryDetailId\": \"67BB2EF1-A0CF-4843-B992-9E3A8E50ECB9\",\r\n            \"reconciliationRecordId\": \"ad788e1c-5f4a-43d9-b476-265837e35673\",\r\n            \"inventoryItemId\": \"60060314-C0FC-454C-A944-923934B2C79B\",\r\n            \"beginningPerpetual\": 0,\r\n            \"totalIn\": 1200,\r\n            \"totalOut\": 4,\r\n            \"currentPerpetual\": 1196,\r\n            \"physicalOnHand\": 1140,\r\n            \"adjustmentNote\": \"One item added\",\r\n            \"adjustmentQuantity\": -56\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseUrl}}api/inventory/reconciliation/details"
					},
					"response": []
				},
				{
					"name": "UpdateRecon",
					"id": "df4a63fc-4b4f-482d-a42e-749fc3e07ea0",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "X-Sf-Code",
								"value": "20071",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"physicalInventoryId\": \"BF2002AB-2C0D-437C-A58B-F9994056D329\",\r\n  \"reconciliationDate\": \"2024-03-04\",\r\n  \"note\": \"Test 5687\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseUrl}}api/inventory/reconciliation/d31044c7-c570-4c72-a939-b888524a85d9"
					},
					"response": []
				},
				{
					"name": "ResetNotes For Inv Recon",
					"id": "06d457d8-f935-4f64-a6ac-a6247c2f21ef",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Sf-Code",
								"value": "20071",
								"type": "text"
							}
						],
						"url": "{{BaseUrl}}api/inventory/reconciliation/reset-notes/d31044c7-c570-4c72-a939-b888524a85d9"
					},
					"response": []
				},
				{
					"name": "DeleteDetail",
					"id": "9fe0c17e-7211-480a-8d27-309eb51a4e70",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "X-Sf-Code",
								"value": "20071",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"InventoryReconciliationId\": \"DEE52938-8F54-4602-8699-687F2AD46C1F\",\r\n    \"InventoryReconciliationDetailId\": \"10772AD4-C643-4D44-A90E-816B8F17644B\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseUrl}}api/inventory/reconciliation/details"
					},
					"response": []
				},
				{
					"name": "CompleteReconciliation",
					"id": "4f4d714c-ce99-4bc4-810f-b396c8ba31a0",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Sf-Code",
								"value": "29071",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"reconciliationRecordId\": \"BEF1C23A-BB56-4B19-9D6C-8FA7EAB5A031\",\r\n  \"workFlowActionId\": \"complete\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseUrl}}api/inventory/reconciliation/complete"
					},
					"response": []
				},
				{
					"name": "Reconciliation checklist",
					"id": "be0c41a3-85c0-473f-8966-ed42a21e2867",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{BaseUrl}}api/inventory/reconciliation/checklist"
					},
					"response": []
				}
			],
			"id": "58bbf09a-5ecc-449a-87a1-713ca43e7ef5"
		},
		{
			"name": "Reconciliation Statement",
			"item": [
				{
					"name": "GetLastReconciliationRecordBySfCode",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "65c40f76-9dce-4032-a29c-13c4f019f76f",
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an object with title, data, statusCode, and isSuccess properties\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an('object').that.has.all.keys('title', 'data', 'statusCode', 'isSuccess');\r",
									"});\r",
									"\r",
									"pm.test(\"Data array should have at least one element\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData.data).to.be.an('array').that.is.not.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"StatusCode is a non-negative integer\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"  pm.expect(responseData.statusCode).to.be.a('number');\r",
									"  pm.expect(responseData.statusCode).to.be.at.least(0, \"StatusCode should be a non-negative integer\");\r",
									"});\r",
									"\r",
									"pm.test(\"StatusCode is a non-null value\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData.statusCode).to.exist;\r",
									"});\r",
									"\r",
									"pm.test(\"Title is a non-empty string\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData.title).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Title should not be empty\");\r",
									"});\r",
									"\r",
									"pm.test(\"IsSuccess property should be true\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData.isSuccess).to.be.true;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "7b1305a9-6989-4d55-b2bc-b5d02dae9db0",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Sf-Code",
								"value": "24293",
								"type": "text"
							}
						],
						"url": "{{BaseUrl}}api/inventory/reconciliation/completed"
					},
					"response": []
				},
				{
					"name": "CreateReconStatement",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "dd1f13d3-3bf7-4d83-b699-ee61b684f1d2",
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an object with title, statusCode, and isSuccess properties\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an('object').that.has.all.keys('title', 'statusCode', 'isSuccess');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "9573f796-60e2-4958-b744-a25abdf609d3",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Sf-Code",
								"value": "24293",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"InventoryReconciliationId\": \"BEF1C23A-BB56-4B19-9D6C-8FA7EAB5A031\",\r\n  \"ServiceDate\": \"2024-04-12\",\r\n  \"note\": \"Test 1\",\r\n  \"workFlowActionId\": \"create\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseUrl}}api/inventory/reconciliationstatement"
					},
					"response": []
				},
				{
					"name": "GetReconciliationStatementById",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9c7ddbf4-2417-4530-b740-2830aa4eb27c",
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an object with title, statusCode, and isSuccess properties\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an('object').that.has.all.keys('title', 'statusCode', 'isSuccess');\r",
									"});\r",
									"\r",
									"pm.test(\"StatusCode is a non-negative integer\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"  pm.expect(responseData.statusCode).to.be.a('number');\r",
									"  pm.expect(responseData.statusCode).to.be.at.least(0, \"StatusCode should be a non-negative integer\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "f09ad832-32bb-404b-afed-af5b67d7589c",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Sf-Code",
								"value": "24293",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseUrl}}api/inventory/reconciliationstatement/d6b92e8d-378e-46ff-9844-c8e8f3ecc16d"
					},
					"response": []
				},
				{
					"name": "GetReconciliationStatementDetailById",
					"id": "b39f6c9f-fd77-4988-8807-e471725c4494",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Sf-Code",
								"value": "24293",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseUrl}}api/inventory/reconciliationstatement/d6b92e8d-378e-46ff-9844-c8e8f3ecc16d/details"
					},
					"response": []
				},
				{
					"name": "UpdateReconciliationStatementById",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ce9f4f2c-986e-45f9-807f-ec77df61ec83",
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an object with title, statusCode, and isSuccess properties\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an('object').that.has.all.keys('title', 'statusCode', 'isSuccess');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "db8e74aa-005e-4170-a828-10f1d5013bd8",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "X-Sf-Code",
								"value": "24293",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": \"011CE2A8-3C83-46E4-9DD3-7296CE676EF3\",\r\n  \"note\": \"Ashish Mahesh test2\",\r\n  \"serviceDate\": \"2024-04-02\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseUrl}}api/inventory/reconciliationstatement/011CE2A8-3C83-46E4-9DD3-7296CE676EF3"
					},
					"response": []
				},
				{
					"name": "SubmitReconciliationStatementDetailById",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "de8894c1-eb22-40a8-b6ab-67513e3c5099",
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an object with title, statusCode, and isSuccess properties\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an('object').that.has.all.keys('title', 'statusCode', 'isSuccess');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "3613e4ca-4d4d-4fed-9004-52db5f54b62e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Sf-Code",
								"value": "29071",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": \"faa3a409-6bb1-4514-9838-6f62e4a4df08\",\r\n  \"workFlowActionId\": \"submit\",\r\n  \"submittedBy\": \"sammons\",\r\n  \"submitComment\": \"Test 1.2\",\r\n  \"submittedOn\": \"2024-04-02\",\r\n  \"details\": [\r\n    \r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseUrl}}api/inventory/reconciliationstatement/submit"
					},
					"response": []
				},
				{
					"name": "VerifyReconciliationStatementDetailById",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "cd88e2af-2f12-44bb-8460-2dffd52c64a5",
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an object with title, statusCode, and isSuccess properties\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an('object').that.has.all.keys('title', 'statusCode', 'isSuccess');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "88990263-c52a-4ca4-a024-6d7c5ae65be5",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Sf-Code",
								"value": "24293",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"reconciliationStatementId\": \"faa3a409-6bb1-4514-9838-6f62e4a4df08\",\r\n  \"workFlowActionId\": \"verify\",\r\n  \"verifiedBy\": \"dsmith\",\r\n  \"verifyComment\": \"Test 1\",\r\n  \"verifiedOn\": \"2024-04-02\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseUrl}}api/inventory/reconciliationstatement/verify-sendback"
					},
					"response": []
				}
			],
			"id": "bd7b4404-526d-461e-85d1-029eab5e6fce"
		}
	],
	"auth": {
		"type": "oauth2",
		"oauth2": {
			"username": "sammons",
			"refreshTokenUrl": "https://backoffice.verify.ibm.com/v1.0/endpoint/default/token",
			"accessTokenUrl": "https://backoffice.verify.ibm.com/v1.0/endpoint/default/token",
			"clientSecret": "PV82LUNTKG",
			"grant_type": "password_credentials",
			"client_authentication": "header",
			"tokenName": "BOH-sammons",
			"password": "bohpass1",
			"clientId": "{{clientId}}",
			"authUrl": "https://svamdev.verify.ibm.com/v1.0/endpoint/default/authorize",
			"redirect_uri": "https://oauth.pstmn.io/v1/callback",
			"useBrowser": false,
			"addTokenTo": "header"
		}
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "bd7b6103-de10-4072-95b4-fa69ffbf715e",
				"type": "text/javascript",
				"exec": [
					"pm.request.headers.add(\"X-SF-Code: 24293\");"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "f834224b-ff52-40be-9bbd-0eef4f41ee8a",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "{{baseurl}}",
			"value": "https://boh-api.svamdev.com/",
			"type": "string"
		},
		{
			"key": "jwtToken",
			"value": ""
		}
	]
}