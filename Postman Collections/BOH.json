{
	"info": {
		"_postman_id": "4e033a36-c6b3-441f-adbe-21116eba6376",
		"name": "BOH Collection",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
	},
	"item": [
		{
			"name": "Inventory dashboard",
			"item": [
				{
					"name": "Get Inventory Summary For Dashboard",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d02f7d6f-cb1b-4163-9f86-26450d33459a",
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an object with title, data, statusCode, and isSuccess properties\", function () {\r",
									"    pm.expect(pm.response.json()).to.be.an('object').that.has.all.keys('title', 'data', 'statusCode', 'isSuccess');\r",
									"});\r",
									"\r",
									"// Verify the length of itemizedInventories and categorySummaries\r",
									"pm.test(\"The itemizedInventories array length must be greater than zero\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    const itemizedInventories = responseData.data.itemizedInventories;\r",
									"   \r",
									"    pm.expect(itemizedInventories.length).to.be.greaterThan(0, \"Itemized inventories should not be empty\");\r",
									"\r",
									"    itemizedInventories.forEach((item)=>{\r",
									"      pm.expect(item.name).to.be.a('string');\r",
									"      pm.expect(item.beginningPerpetual).to.be.a('number');\r",
									"      pm.expect(item.totalIn).to.be.a('number');\r",
									"      pm.expect(item.totalOut).to.be.a('number');\r",
									"      pm.expect(item.currentPerpetual).to.be.a('number');\r",
									"      pm.expect(item.id).to.be.a('string');\r",
									"    });\r",
									"\r",
									"    const categorySummaries = responseData.data.categorySummaries;\r",
									"    pm.expect(categorySummaries.length).to.be.greaterThan(0, \"Category summaries should not be empty\");\r",
									"\r",
									"    categorySummaries.forEach((category)=>{\r",
									"      pm.expect(category.name).to.be.a('string');\r",
									"      pm.expect(category.count).to.be.a('number');\r",
									"    });\r",
									"});pm.test(\"Response content type is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "f21b5b36-e694-4b7d-b09a-805230ade549",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "e5cfa4f5-b0bb-4a08-9380-aa40b06b4e92",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{BaseUrl}}api/inventory/inventories/sfcode/{{sfcode}}/summary"
					},
					"response": []
				},
				{
					"name": "Get Inventory Transfer Pending",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0a84f799-7ac9-4a3d-bbdc-bc9e4bc481fc",
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an object with title, data, statusCode, and isSuccess properties\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an('object');\r",
									"    pm.expect(jsonData).to.have.property('title');\r",
									"    pm.expect(jsonData).to.have.property('data');\r",
									"    pm.expect(jsonData).to.have.property('statusCode');\r",
									"    pm.expect(jsonData).to.have.property('isSuccess');\r",
									"});\r",
									"\r",
									"pm.test(\"Each element in the data array has serviceDate, status, transferType, and id properties\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    jsonData.data.forEach(function(transfer) {\r",
									"        pm.expect(transfer).to.have.property('serviceDate');\r",
									"        pm.expect(transfer).to.have.property('status');\r",
									"        pm.expect(transfer).to.have.property('transferType');\r",
									"        pm.expect(transfer).to.have.property('id');\r",
									"    });\r",
									"});\r",
									"pm.test(\"Response Content-Type is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Title is a non-empty string\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData.title).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Title should not be empty\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Each element in the data array has a non-empty serviceDate\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.data).to.be.an('array');\r",
									"    \r",
									"    responseData.data.forEach(function(item) {\r",
									"        pm.expect(item.serviceDate).to.exist.and.to.have.lengthOf.at.least(1, \"Service date should not be empty\");\r",
									"    });\r",
									"});\r",
									"\r",
									"pm.test(\"Schema is valid\", function () {\r",
									"  var schema = {\r",
									"    type: \"object\",\r",
									"    properties: {\r",
									"      title: {\r",
									"        type: \"string\",\r",
									"      },\r",
									"      data: {\r",
									"        type: \"array\",\r",
									"        items: {\r",
									"          type: \"object\",\r",
									"          properties: {\r",
									"            serviceDate: { type: \"string\" },\r",
									"            status: { type: \"string\" },\r",
									"            statusId: { type: \"string\" },\r",
									"            transferType: { type: \"string\" },\r",
									"            id: { type: \"string\" },\r",
									"          },\r",
									"          required: [\"serviceDate\", \"status\", \"statusId\", \"transferType\", \"id\"]\r",
									"        }\r",
									"      },\r",
									"      statusCode: { type: \"number\" },\r",
									"      isSuccess: { type: \"boolean\" }\r",
									"    },\r",
									"    required: [\"title\", \"data\", \"statusCode\", \"isSuccess\"]\r",
									"  };\r",
									"\r",
									"  var response = pm.response.json();\r",
									"  pm.expect(tv4.validate(response, schema)).to.be.true;\r",
									"});// Verify the length of data array\r",
									"pm.test(\"The data array length must be greater than zero\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    const data = responseData.data;\r",
									"\r",
									"    pm.expect(data.length).to.be.greaterThan(0, \"Data array should not be empty\");\r",
									"\r",
									"    data.forEach((item)=>{\r",
									"        pm.expect(item.serviceDate).to.exist.and.to.have.lengthOf.at.least(1, \"Service date should not be empty\");\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "2bc3858d-a8ed-4417-9d3e-4c147a65391f",
								"exec": [],
								"type": "text/javascript"
							}
						}
					],
					"id": "9c3a5cea-9262-4652-8cd6-ff0ed3e2cb8b",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{BaseUrl}}api/inventory/inventories/sfcode/{{sfcode}}/pendingproducttransfers"
					},
					"response": []
				},
				{
					"name": "Get Todays form status",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9172bd98-7f42-4187-92ea-4e466df79d8e",
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an object with title, data, statusCode, and isSuccess properties\", function () {\r",
									"    pm.expect(pm.response.json()).to.be.an('object').that.has.all.keys('title', 'data', 'statusCode', 'isSuccess');\r",
									"});\r",
									"\r",
									"pm.test(\"Each element in the data array has formName, status, serviceDate, id, and isDueDateExceeded properties\", function () {\r",
									"    pm.response.json().data.forEach(function(form) {\r",
									"        pm.expect(form).to.have.all.keys('formName', 'status', 'serviceDate', 'id', 'isDueDateExceeded');\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "39c31bf8-83c6-464b-a763-6b5ad913644f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{BaseUrl}}api/inventory/inventories/sfcode/{{sfcode}}/todaysforms"
					},
					"response": []
				},
				{
					"name": "Get Inventory Pending Form",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ea33ba1e-cc50-432c-8b11-5cb16c0fdd67",
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an object with title, data, statusCode, and isSuccess properties\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an('object').that.has.all.keys('title', 'data', 'statusCode', 'isSuccess');\r",
									"});\r",
									"\r",
									"pm.test(\"Each element in the data array has formName, status, serviceDate, id, and isDueDateExceeded properties\", function () {\r",
									"    var data = pm.response.json().data;\r",
									"    data.forEach(function(form) {\r",
									"        pm.expect(form).to.be.an('object').that.has.all.keys('formName', 'status', 'serviceDate', 'id', 'isDueDateExceeded');\r",
									"        \r",
									"    });\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "2c82917d-fde6-41c9-a02b-bc719c6261ca",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{BaseUrl}}api/inventory/inventories/sfcode/{{sfcode}}/pendingforms"
					},
					"response": []
				}
			],
			"id": "eece15e7-f2bf-45f2-aa4e-14bc3283b4df",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "2db74fa6-2e46-43be-b0b4-0207094c3f31",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "2789d0c1-66cd-4acc-85b4-c4fd27202b8b",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Occurrencelog",
			"item": [
				{
					"name": "Get OccurrenceIncidentType",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "489733b4-bfaf-4342-9230-b02d89476f40",
								"exec": [
									"\r",
									"pm.test(\"Response status code is 200\", function () {\r",
									"  pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required fields\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.have.property('title');\r",
									"    pm.expect(responseData).to.have.property('data');\r",
									"    pm.expect(responseData).to.have.property('statusCode');\r",
									"    pm.expect(responseData).to.have.property('isSuccess');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Data array is present and contains the expected number of elements\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.data).to.exist.and.to.be.an('array');\r",
									"    pm.expect(responseData.data).to.have.lengthOf.at.least(1);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "d434cb11-ac88-495f-97d9-6b1e143d2694",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{BaseUrl}}api/production/occurrenceincidenttypes"
					},
					"response": []
				},
				{
					"name": "Get OccurrenceLog BY ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c48c4fca-b559-4780-865e-e63cd4bea180",
								"exec": [
									"pm.test('Schema is valid', function () {\r",
									"    var schema = {\r",
									"        type: 'object',\r",
									"        properties: {\r",
									"            title: { type: 'string' },\r",
									"            data: {\r",
									"                type: 'object',\r",
									"                properties: {\r",
									"                    id: { type: 'string' },\r",
									"                    sfcode: { type: 'string' },\r",
									"                    workflowStateId: { type: 'string' },\r",
									"                    occurrenceIncidentTypeId: { type: 'string' },\r",
									"                    occurrenceDate: { type: 'string' },\r",
									"                    occurrenceSfcodeList: { type: 'string' },\r",
									"                    occurrenceStartTime: { type: 'string' },\r",
									"                    occurrenceEndTime: { type: 'string' },\r",
									"                    isFieldOfficeCalled: { type: 'boolean' },\r",
									"                    isSendEmail: { type: 'boolean' },\r",
									"                    emailSentStatus: { type: 'number' },\r",
									"                    additionalNote: { type: 'string' },\r",
									"                    createdBy: { type: 'string' },\r",
									"                    updatedBy: { type: 'string' },\r",
									"                    createdOn: { type: 'string' },\r",
									"                    updatedOn: { type: 'string' },\r",
									"                    isDeleted: { type: 'boolean' },\r",
									"                    isActive: { type: 'boolean' },\r",
									"                    otherIncidentType: { type: 'string' }\r",
									"                },\r",
									"                required: [\r",
									"                    'id',\r",
									"                    'sfcode',\r",
									"                    'workflowStateId',\r",
									"                    'occurrenceIncidentTypeId',\r",
									"                    'occurrenceDate',\r",
									"                    'occurrenceSfcodeList',\r",
									"                    'occurrenceStartTime',\r",
									"                    'occurrenceEndTime',\r",
									"                    'isFieldOfficeCalled',\r",
									"                    'isSendEmail',\r",
									"                    'emailSentStatus',\r",
									"                    'additionalNote',\r",
									"                    'createdBy',\r",
									"                    'updatedBy',\r",
									"                    'createdOn',\r",
									"                    'updatedOn',\r",
									"                    'isDeleted',\r",
									"                    'isActive',\r",
									"                    'otherIncidentType'\r",
									"                ]\r",
									"            },\r",
									"            statusCode: { type: 'number' },\r",
									"            isSuccess: { type: 'boolean' }\r",
									"        },\r",
									"        required: [\r",
									"            'title',\r",
									"            'data',\r",
									"            'statusCode',\r",
									"            'isSuccess'\r",
									"        ]\r",
									"    };\r",
									"})\r",
									"\r",
									"pm.test('Response status code is 200', function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"})\r",
									"\r",
									"pm.test('Content-Type header is application/json', function () {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
									"})\r",
									"\r",
									"pm.test(\"Response has the required fields\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.data.occurrenceDate).to.exist;\r",
									"});\r",
									"\r",
									"pm.test('IsFieldOfficeCalled and IsSendEmail are boolean values', function () {\r",
									"    const responseData = pm.response.json();\r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.data.isFieldOfficeCalled).to.be.a('boolean');\r",
									"    pm.expect(responseData.data.isSendEmail).to.be.a('boolean');\r",
									"})\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "eaaacf38-a59b-45dc-b9af-63b5e1d17132",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{BaseUrl}}api/production/occurrencelogs/sfcode/{{sfcode}}/D2F47C03-C7FB-46E9-98B6-EEFF6BCAB0FC"
					},
					"response": []
				},
				{
					"name": "Add Occurrence Log Data",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7c352c2b-fc1d-485d-bf6e-60db8b4a6cde",
								"exec": [
									"pm.test(\"Response status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"pm.test(\"Response Content-Type is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Title is a non-empty string\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"  pm.expect(responseData).to.be.an('object');\r",
									"  pm.expect(responseData.title).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Title should not be empty\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"StatusCode is a non-negative integer\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData.statusCode).to.be.a('number');\r",
									"    pm.expect(responseData.statusCode).to.be.at.least(0);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"IsSuccess is a boolean value\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.isSuccess).to.be.a('boolean');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Data field is present in the response\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  pm.expect(responseData).to.have.property('data');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Data field should not be null or undefined\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"  pm.expect(responseData).to.have.property('data').that.is.not.null.and.not.undefined;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Validate response has required fields\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.title).to.exist;\r",
									"    pm.expect(responseData.data).to.exist;\r",
									"    pm.expect(responseData.statusCode).to.exist;\r",
									"    pm.expect(responseData.isSuccess).to.exist;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Title is a string with a minimum length of 1\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.title).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Title should not be empty\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "e952521f-0a8f-40c6-9c8a-526434cd8297",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"occurrenceDate\": \"2024-01-06T10:42:38.108Z\",\r\n  \"note\": \"string\",\r\n  \"workFlowActionId\": \"Create\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseUrl}}api/production/occurrencelogs/sfcode/{{sfcode}}"
					},
					"response": []
				},
				{
					"name": "Update OccurrenceLog Header",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6ffecea7-4aa5-4897-9659-9c41fc70dd68",
								"exec": [
									"\r",
									"pm.test(\"Response status code is 204\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(204);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "3e4c148e-33c0-4919-b235-8b71290fc2f9",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"occurrenceDate\": \"2024-01-06T10:42:38.108Z\",\r\n  \"note\": \"Updated\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseUrl}}api/production/occurrencelogs/sfcode/{{sfcode}}/D2F47C03-C7FB-46E9-98B6-EEFF6BCAB0FC/header"
					},
					"response": []
				},
				{
					"name": "Update OccurrenceLog Data",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9781aa8a-5f0d-4722-aee4-200f264224dc",
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "69a6dbca-f220-4809-aa63-2126f06d6cdc",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "fb59c741-a648-4b6d-9014-be00cf6397fd",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"sfcode\": \"sf-0146\",\r\n  \"statusId\": \"06030ff3-651d-4b2b-9e18-575d1b890df0\",\r\n  \"occurenceDate\": \"2023-11-28T09:20:15.061Z\",\r\n  \"note\": \"Hello villain 46\",\r\n  \"occurenceSfcodeList\": \"string\",\r\n  \"occurenceStartTime\": \"09:20:15.061\",\r\n  \"ocurrenceEndTime\": \"09:20:15.061\",\r\n  \"isFieldOfficeCalled\": true,\r\n  \"isSendEmail\": true,\r\n  \"emailSentStatus\": 0,\r\n  \"isActive\": true\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseUrl}}api/production/occurrencelogs/sfcode/{{sfcode}}/7BE4209A-C049-4260-A8C6-6AFDBF7F5EFB"
					},
					"response": []
				},
				{
					"name": "Delete a Occurrence Log Data",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "47ebdb08-1959-44cf-a977-8caa905516e7",
								"exec": [
									"\r",
									"pm.test(\"Response status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"    pm.expect(pm.response.text()).to.equal('null');\r",
									"    pm.expect(pm.request.url).to.contain('/api/production/occurrencelogs/f0a096b0-9f5b-48fc-ba86-e9903cab528b');\r",
									"    pm.expect(pm.request.method).to.equal('DELETE');\r",
									"    pm.expect(pm.response.text()).to.equal('null', 'For this occurrence id, delete is not present');\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "5224b93a-8e1f-4737-a468-0b13c90ef152",
								"exec": [],
								"type": "text/javascript"
							}
						}
					],
					"id": "25da4a4e-2838-44b5-9bba-1d5ec7c4b40f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [],
						"url": "{{BaseUrl}}api/production/occurrencelogs/f0a096b0-9f5b-48fc-ba86-e9903cab528b"
					},
					"response": []
				}
			],
			"id": "bd5337b4-767b-4b35-9e21-340bb27ed298",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "c2230c3a-7ef0-4f14-bc2c-92591173ef47",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "565cf252-0bae-47d7-a1ce-3052d65be472",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Production Dashboard",
			"item": [
				{
					"name": "Todays Form status",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7459a1d6-24d7-4341-8ba4-5984c217ae28",
								"exec": [
									"// Test to check if the response contains the correct content type\r",
									"pm.test(\"Response has the correct content type\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"// Test to check if the serviceDate only comes for today's date\r",
									"pm.test(\"Service date is only for today's date\", function () {\r",
									"    var today = new Date().toISOString().split('T')[0]; // Get today's date in YYYY-MM-DD format\r",
									"    pm.response.json().data.forEach(function(record) {\r",
									"        pm.expect(record.serviceDate).to.equal(today);\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "06d768d4-739a-4b93-80cf-5a486ee01724",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "0eec2891-f575-4269-98c3-e3b4b1e1f3ce",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{BaseUrl}}api/production/productionrecords/sfcode/{{sfcode}}/todaysforms"
					},
					"response": []
				},
				{
					"name": "Incomplete Form",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "15d2e84e-28b9-46fc-9797-adab3a0c6b7a",
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"No verified Status\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    const forms = responseData.data;\r",
									"\r",
									"    forms.forEach((form) => {\r",
									"        pm.expect(form.status).to.not.equal('verified');\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "15daefdc-1220-4129-886e-8a41f1b5cd7e",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "622ce883-5d2e-4749-a859-550fb0b729ff",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{BaseUrl}}api/production/productionrecords/sfcode/{{sfcode}}/incompleteforms"
					},
					"response": []
				},
				{
					"name": "Upcoming School Trip Forms",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "01e7e668-b414-4807-bbad-c4a150efea8e",
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response data has a serviceDate property with an upcoming date\", function () {\r",
									"    var serviceDate = pm.response.json().data[0].serviceDate;\r",
									"    var upcomingDate = new Date(serviceDate) > new Date();\r",
									"    pm.expect(upcomingDate).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Response has a title property\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.property('title');\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "b5339ae6-11a5-4c5c-a3f0-10683ba8ef6d",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "79440d36-cdbe-4646-a2ac-c4be3c7c4621",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{BaseUrl}}api/production/productionrecords/sfcode/{{sfcode}}/upcomingschooltripforms"
					},
					"response": []
				},
				{
					"name": "Calender",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c77ab1a7-5c47-4151-8951-c155700b88dc",
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an object with title, data, statusCode, and isSuccess properties\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an('object').that.has.all.keys('title', 'data', 'statusCode', 'isSuccess');\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "5f9cc1f4-f21c-4555-984e-7e2342d6c4f4",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "50e61d12-725c-4e5e-9200-93e3a9791a83",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseUrl}}api/production/productionrecords/sfcode/{{sfcode}}/calendar?from=2020-01-01&to=2025-01-01",
							"host": [
								"{{BaseUrl}}api"
							],
							"path": [
								"production",
								"productionrecords",
								"sfcode",
								"{{sfcode}}",
								"calendar"
							],
							"query": [
								{
									"key": "from",
									"value": "2020-01-01"
								},
								{
									"key": "to",
									"value": "2025-01-01"
								}
							]
						}
					},
					"response": []
				}
			],
			"id": "6c99d971-f25f-4c92-a39d-e83c32534b61"
		},
		{
			"name": "Reports",
			"item": [
				{
					"name": "Occurrence Log",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "08412887-7b47-4470-97a2-7620c2a20be8",
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an object with data property\", function () {\r",
									"    pm.expect(pm.response.json()).to.be.an('object').that.has.property('data');\r",
									"});\r",
									"\r",
									"pm.test(\"Response data property is an object with data and total properties\", function () {\r",
									"    var data = pm.response.json().data;\r",
									"    pm.expect(data).to.be.an('object').that.has.property('data');\r",
									"    pm.expect(data).to.be.an('object').that.has.property('total');\r",
									"});\r",
									"\r",
									"pm.test(\"Response has statusCode property\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.property('statusCode');\r",
									"});\r",
									"\r",
									"pm.test(\"Response has isSuccess property\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.property('isSuccess');\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "0bc161d5-65a2-4f06-84d8-14449fbea7a9",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "75115d77-e401-4be1-8421-045146146c31",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseUrl}}api/reports/productions/occurrences?SfCode={{sfcode}}&From={{From}}&To={{To}}",
							"host": [
								"{{BaseUrl}}api"
							],
							"path": [
								"reports",
								"productions",
								"occurrences"
							],
							"query": [
								{
									"key": "SfCode",
									"value": "{{sfcode}}"
								},
								{
									"key": "From",
									"value": "{{From}}"
								},
								{
									"key": "To",
									"value": "{{To}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Production Record",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8136582f-cf32-4f85-b411-737af7e7d3b5",
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an object with title, data, statusCode, and isSuccess properties\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an('object').that.has.all.keys('title', 'data', 'statusCode', 'isSuccess');\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "eb7579c1-1ce1-44ad-a5d1-737fbb0e065d",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "40118790-0670-4869-bfd0-60bb3cbfe9a9",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseUrl}}api/reports/inventories/reconciliationrecords?SfCode={{sfcode}}&From={{From}}&To={{To}}",
							"host": [
								"{{BaseUrl}}api"
							],
							"path": [
								"reports",
								"inventories",
								"reconciliationrecords"
							],
							"query": [
								{
									"key": "SfCode",
									"value": "{{sfcode}}"
								},
								{
									"key": "From",
									"value": "{{From}}"
								},
								{
									"key": "To",
									"value": "{{To}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "School Trip Lunch",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7340e011-0444-4b29-834b-9f9e7fd18e01",
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Data is only for productionRecordStructureType equal to School Trip Lunch\", function () {\r",
									"    pm.response.json().data.data.forEach(function(record) {\r",
									"        pm.expect(record.productionRecordStructureType).to.equal(\"School Trip Lunch\");\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "45638ea8-4e65-4146-93db-6a950704460e",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "6f56c029-73e3-405e-9b63-b4c85c22bf6d",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseUrl}}api/reports/productions/productionrecords?SfCode={{sfcode}}&From={{From}}&To={{To}}&IsSchoolTripOnly=true",
							"host": [
								"{{BaseUrl}}api"
							],
							"path": [
								"reports",
								"productions",
								"productionrecords"
							],
							"query": [
								{
									"key": "SfCode",
									"value": "{{sfcode}}"
								},
								{
									"key": "From",
									"value": "{{From}}"
								},
								{
									"key": "To",
									"value": "{{To}}"
								},
								{
									"key": "IsSchoolTripOnly",
									"value": "true"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Physical Inventory",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "eb20d227-9fd8-4bfa-b6a1-0f1df89f1d30",
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an object with data property\", function () {\r",
									"    pm.expect(pm.response.json()).to.be.an('object').that.has.property('data');\r",
									"});\r",
									"\r",
									"pm.test(\"Response data contains count, data, and total properties\", function () {\r",
									"    var data = pm.response.json().data;\r",
									"    pm.expect(data).to.have.property('count');\r",
									"    pm.expect(data).to.have.property('data');\r",
									"    pm.expect(data).to.have.property('total');\r",
									"});\r",
									"\r",
									"pm.test(\"Response isSuccess is a boolean\", function () {\r",
									"    pm.expect(pm.response.json().isSuccess).to.be.a('boolean');\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "8818f2a6-96ce-4d24-90ca-b4a263893d64",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "401d1646-7d05-4447-825d-448a4f679d70",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseUrl}}api/reports/inventories/physicalinventories?SfCode={{sfcode}}&From={{From}}&To={{To}}",
							"host": [
								"{{BaseUrl}}api"
							],
							"path": [
								"reports",
								"inventories",
								"physicalinventories"
							],
							"query": [
								{
									"key": "SfCode",
									"value": "{{sfcode}}"
								},
								{
									"key": "From",
									"value": "{{From}}"
								},
								{
									"key": "To",
									"value": "{{To}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Product Transfer",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8f037455-91a4-4e3d-87f3-b35d8da9648c",
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an object with data property\", function () {\r",
									"    pm.expect(pm.response.json()).to.be.an('object').that.has.property('data');\r",
									"});\r",
									"\r",
									"pm.test(\"Response data property has count, data, and total properties\", function () {\r",
									"    var data = pm.response.json().data;\r",
									"    pm.expect(data).to.have.property('count');\r",
									"    pm.expect(data).to.have.property('data');\r",
									"    pm.expect(data).to.have.property('total');\r",
									"});\r",
									"\r",
									"pm.test(\"Each element in the count array has status, statusId, and total properties\", function () {\r",
									"    pm.response.json().data.count.forEach(function(item) {\r",
									"        pm.expect(item).to.have.property('status');\r",
									"        pm.expect(item).to.have.property('statusId');\r",
									"        pm.expect(item).to.have.property('total');\r",
									"    });\r",
									"});\r",
									"\r",
									"pm.test(\"Each element in the data array has productTransferId, transferredOn, sfCode, buildingCode, status, and statusId properties\", function () {\r",
									"    pm.response.json().data.data.forEach(function(item) {\r",
									"        pm.expect(item).to.have.property('productTransferId');\r",
									"        pm.expect(item).to.have.property('transferredOn');\r",
									"        pm.expect(item).to.have.property('sfCode');\r",
									"        pm.expect(item).to.have.property('buildingCode');\r",
									"        pm.expect(item).to.have.property('status');\r",
									"        pm.expect(item).to.have.property('statusId');\r",
									"    });\r",
									"});\r",
									"\r",
									"pm.test(\"Response has statusCode, isSuccess, and title properties\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('statusCode');\r",
									"    pm.expect(jsonData).to.have.property('isSuccess');\r",
									"    pm.expect(jsonData).to.have.property('title');\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "3ebd1319-1c48-431f-b85b-529e3e089b5b",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "5cef4985-17c0-431a-8e1c-2f4ae4bd29b6",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseUrl}}api/reports/inventories/producttransfers?SfCode={{sfcode}}&From={{From}}&To={{To}}",
							"host": [
								"{{BaseUrl}}api"
							],
							"path": [
								"reports",
								"inventories",
								"producttransfers"
							],
							"query": [
								{
									"key": "SfCode",
									"value": "{{sfcode}}"
								},
								{
									"key": "From",
									"value": "{{From}}"
								},
								{
									"key": "To",
									"value": "{{To}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Recons statement",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d46c3f4b-9f52-491a-b604-c63891679ef7",
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an object with data property\", function () {\r",
									"    pm.expect(pm.response.json()).to.be.an('object').that.has.property('data');\r",
									"});\r",
									"\r",
									"pm.test(\"Response data contains count, data, and total properties\", function () {\r",
									"    var data = pm.response.json().data;\r",
									"    pm.expect(data).to.have.property('count');\r",
									"    pm.expect(data).to.have.property('data');\r",
									"    pm.expect(data).to.have.property('total');\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains isSuccess property with value true\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.property('isSuccess', true);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "482120ca-3ea6-4163-b7ae-f3e8eef3760f",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "93e4f42e-4c75-4e08-93b9-54ac3f3d227a",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseUrl}}api/reports/inventories/reconcilliations?SfCode={{sfcode}}&From={{From}}&To={{To}}",
							"host": [
								"{{BaseUrl}}api"
							],
							"path": [
								"reports",
								"inventories",
								"reconcilliations"
							],
							"query": [
								{
									"key": "SfCode",
									"value": "{{sfcode}}"
								},
								{
									"key": "From",
									"value": "{{From}}"
								},
								{
									"key": "To",
									"value": "{{To}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Recons Statement Pending Review Only",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "cb9a0e40-3a34-4b6f-989e-e5398ae652a1",
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an object with data property\", function () {\r",
									"    pm.expect(pm.response.json()).to.be.an('object').that.has.property('data');\r",
									"});\r",
									"\r",
									"pm.test(\"Response has a title property\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.property('title');\r",
									"});\r",
									"\r",
									"pm.test(\"Response has a count array with status, statusId, and total properties\", function () {\r",
									"    pm.response.json().data.count.forEach(function(count) {\r",
									"        pm.expect(count).to.have.property('status');\r",
									"        pm.expect(count).to.have.property('statusId');\r",
									"        pm.expect(count).to.have.property('total');\r",
									"    });\r",
									"});\r",
									"\r",
									"pm.test(\"Response has a statusCode property\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.property('statusCode');\r",
									"});\r",
									"\r",
									"pm.test(\"Response has a isSuccess property\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.property('isSuccess');\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "aac8de24-4e17-4428-a6f8-7dd94fb05586",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "57dbff1b-5d5e-4548-b842-71016a4a468e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseUrl}}api/reports/inventories/reconcilliations?SfCode={{sfcode}}&From={{From}}&To={{To}}&IsPendingReviewOnly=true",
							"host": [
								"{{BaseUrl}}api"
							],
							"path": [
								"reports",
								"inventories",
								"reconcilliations"
							],
							"query": [
								{
									"key": "SfCode",
									"value": "{{sfcode}}"
								},
								{
									"key": "From",
									"value": "{{From}}"
								},
								{
									"key": "To",
									"value": "{{To}}"
								},
								{
									"key": "IsPendingReviewOnly",
									"value": "true"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Adjustment",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "369e0ba8-ac7e-44e0-8521-f8c21d6b5f2c",
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an object with title, data, statusCode, and isSuccess properties\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an('object').that.has.all.keys('title', 'data', 'statusCode', 'isSuccess');\r",
									"});\r",
									"\r",
									"pm.test(\"Count array contains objects with total property\", function () {\r",
									"    var countArray = pm.response.json().data.count;\r",
									"    countArray.forEach(function(item) {\r",
									"        pm.expect(item).to.have.property('total');\r",
									"    });\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Total property is a number\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.data).to.have.property('total').that.is.a('number');\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "666a599e-9aec-427c-b6fd-ce48292b0b7a",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "4dbeb058-3d9e-4c7f-aa1e-346ae240359f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseUrl}}api/reports/inventories/adjustments?SfCode={{sfcode}}&From={{From}}&To={{To}}",
							"host": [
								"{{BaseUrl}}api"
							],
							"path": [
								"reports",
								"inventories",
								"adjustments"
							],
							"query": [
								{
									"key": "SfCode",
									"value": "{{sfcode}}"
								},
								{
									"key": "From",
									"value": "{{From}}"
								},
								{
									"key": "To",
									"value": "{{To}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Requisitions",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c342ef91-a332-4f19-823d-ae9be3ec6a65",
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an object with data property\", function () {\r",
									"    pm.expect(pm.response.json()).to.be.an('object').that.has.property('data');\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains count array with status, statusId, and total properties\", function () {\r",
									"    pm.expect(pm.response.json().data.count).to.be.an('array').that.is.not.empty;\r",
									"    pm.response.json().data.count.forEach(function(item) {\r",
									"        pm.expect(item).to.have.property('status');\r",
									"        pm.expect(item).to.have.property('statusId');\r",
									"        pm.expect(item).to.have.property('total');\r",
									"    });\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains data array with id, serviceDate, sfCode, buildingCode, status, and statusId properties\", function () {\r",
									"    pm.expect(pm.response.json().data.data).to.be.an('array').that.is.not.empty;\r",
									"    pm.response.json().data.data.forEach(function(item) {\r",
									"        pm.expect(item).to.have.property('id');\r",
									"        pm.expect(item).to.have.property('serviceDate');\r",
									"        pm.expect(item).to.have.property('sfCode');\r",
									"        pm.expect(item).to.have.property('buildingCode');\r",
									"        pm.expect(item).to.have.property('status');\r",
									"        pm.expect(item).to.have.property('statusId');\r",
									"    });\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains total property\", function () {\r",
									"    pm.expect(pm.response.json().data).to.have.property('total');\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains statusCode property\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.property('statusCode');\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains isSuccess property\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.property('isSuccess');\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "f7757480-c8cd-4264-825e-b98215021577",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "c9030df8-8178-49b5-89a5-157a23b3ad73",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseUrl}}api/reports/inventories/requisitions?SfCode={{sfcode}}&From={{From}}&To={{To}}",
							"host": [
								"{{BaseUrl}}api"
							],
							"path": [
								"reports",
								"inventories",
								"requisitions"
							],
							"query": [
								{
									"key": "SfCode",
									"value": "{{sfcode}}"
								},
								{
									"key": "From",
									"value": "{{From}}"
								},
								{
									"key": "To",
									"value": "{{To}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Daily Requisition",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d46c3f4b-9f52-491a-b604-c63891679ef7",
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an object with data property\", function () {\r",
									"    pm.expect(pm.response.json()).to.be.an('object').that.has.property('data');\r",
									"});\r",
									"\r",
									"pm.test(\"Response data contains count, data, and total properties\", function () {\r",
									"    var data = pm.response.json().data;\r",
									"    pm.expect(data).to.have.property('count');\r",
									"    pm.expect(data).to.have.property('data');\r",
									"    pm.expect(data).to.have.property('total');\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains isSuccess property with value true\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.property('isSuccess', true);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "482120ca-3ea6-4163-b7ae-f3e8eef3760f",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "2e320795-a62c-4d5c-9d64-1c0984bbe347",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseUrl}}api/reports/inventories/requisitions?sfCode={{sfcode}}&from={{From}}&to={{To}}&page=1&pageSize=10",
							"host": [
								"{{BaseUrl}}api"
							],
							"path": [
								"reports",
								"inventories",
								"requisitions"
							],
							"query": [
								{
									"key": "sfCode",
									"value": "{{sfcode}}"
								},
								{
									"key": "from",
									"value": "{{From}}"
								},
								{
									"key": "to",
									"value": "{{To}}"
								},
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "pageSize",
									"value": "10"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Recons Records",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d46c3f4b-9f52-491a-b604-c63891679ef7",
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an object with data property\", function () {\r",
									"    pm.expect(pm.response.json()).to.be.an('object').that.has.property('data');\r",
									"});\r",
									"\r",
									"pm.test(\"Response data contains count, data, and total properties\", function () {\r",
									"    var data = pm.response.json().data;\r",
									"    pm.expect(data).to.have.property('count');\r",
									"    pm.expect(data).to.have.property('data');\r",
									"    pm.expect(data).to.have.property('total');\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains isSuccess property with value true\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.property('isSuccess', true);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "482120ca-3ea6-4163-b7ae-f3e8eef3760f",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "11d4fba5-ca72-4d6b-b769-321191c7b669",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseUrl}}api/reports/inventories/reconcilliations?SfCode={{sfcode}}&From={{From}}&To={{To}}",
							"host": [
								"{{BaseUrl}}api"
							],
							"path": [
								"reports",
								"inventories",
								"reconcilliations"
							],
							"query": [
								{
									"key": "SfCode",
									"value": "{{sfcode}}"
								},
								{
									"key": "From",
									"value": "{{From}}"
								},
								{
									"key": "To",
									"value": "{{To}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Recons Records Pending Review Only",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "cb9a0e40-3a34-4b6f-989e-e5398ae652a1",
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an object with data property\", function () {\r",
									"    pm.expect(pm.response.json()).to.be.an('object').that.has.property('data');\r",
									"});\r",
									"\r",
									"pm.test(\"Response has a title property\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.property('title');\r",
									"});\r",
									"\r",
									"pm.test(\"Response has a count array with status, statusId, and total properties\", function () {\r",
									"    pm.response.json().data.count.forEach(function(count) {\r",
									"        pm.expect(count).to.have.property('status');\r",
									"        pm.expect(count).to.have.property('statusId');\r",
									"        pm.expect(count).to.have.property('total');\r",
									"    });\r",
									"});\r",
									"\r",
									"pm.test(\"Response has a statusCode property\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.property('statusCode');\r",
									"});\r",
									"\r",
									"pm.test(\"Response has a isSuccess property\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.property('isSuccess');\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "aac8de24-4e17-4428-a6f8-7dd94fb05586",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "80f40d60-17ae-4784-ac08-c804dadf6a4f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseUrl}}api/reports/inventories/reconciliationrecords?SfCode={{sfcode}}&From={{From}}&To={{To}}&IsPendingReviewOnly=true",
							"host": [
								"{{BaseUrl}}api"
							],
							"path": [
								"reports",
								"inventories",
								"reconciliationrecords"
							],
							"query": [
								{
									"key": "SfCode",
									"value": "{{sfcode}}"
								},
								{
									"key": "From",
									"value": "{{From}}"
								},
								{
									"key": "To",
									"value": "{{To}}"
								},
								{
									"key": "IsPendingReviewOnly",
									"value": "true"
								}
							]
						}
					},
					"response": []
				}
			],
			"id": "37e79f11-107a-493a-ad88-3e66a46489be"
		},
		{
			"name": "Admin",
			"item": [
				{
					"name": "Get Module Settings on school",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d0fa4447-0a20-45a9-a7ea-c25be8f88437",
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response status code is 403\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Content-Type is text/xml\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"text/xml\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response body is null\", function () {\r",
									"    const responseData = xml2Json(pm.response.text());\r",
									"    pm.expect(responseData).to.be.null;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Verify request endpoint\", function () {\r",
									"    pm.expect(pm.request.url).to.equal(\"{{BaseUrl}}api/administration/modulesettings/district/7cc87a30-5031-4bc9-a005-747c9e215062\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Ensure that the error message or reason for the 403 status code is included in the response\", function () {\r",
									"    const responseData = xml2Json(pm.response.text());\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData).to.have.property('error').that.is.a('string');\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "7534bc88-f6f8-4399-b8ab-18f2292e8f8a",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "d074e0b4-e69e-41aa-9214-30c2f9c2f9b5",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{BaseUrl}}api/administration/modulesettings/district/7cc87a30-5031-4bc9-a005-747c9e215062"
					},
					"response": []
				},
				{
					"name": "Get Audit Trail",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "39dc9560-8136-458e-a889-9fe331e9ab9d",
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an object with title, data, statusCode, and isSuccess properties\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an('object').that.has.all.keys('title', 'data', 'statusCode', 'isSuccess');\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "30552feb-8b89-4a06-bf63-4405117a6246",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "9c708751-7584-4bbf-9623-dfe33ead7a22",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{BaseUrl}}api/administration/audittrails/primarykey/1111e5f1-b856-4582-9390-1f0980deeab5"
					},
					"response": []
				},
				{
					"name": "Get Unseen Notification",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "20964d6e-5c19-4fa0-b9ea-5bed5050cbdf",
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an object with title, data, statusCode, and isSuccess properties\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an('object').that.has.all.keys('title', 'data', 'statusCode', 'isSuccess');\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "9444e897-19bd-4ec3-a00a-8fe87471ef3e",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "6096a9f9-b968-4a65-8444-8bafec66924c",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{BaseUrl}}api/administration/inappnotifications/unseentotal/sfcode/{{sfcode}}"
					},
					"response": []
				},
				{
					"name": "Admin App Setting",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "73cd609e-dfce-44dd-bd7e-eb33069f9c1a",
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is within acceptable range\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an object with title, data, statusCode, and isSuccess properties\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an('object').that.has.all.keys('title', 'data', 'statusCode', 'isSuccess');\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "9ba3ab2b-58f9-48f7-9b89-8b7a4c9777c7",
								"exec": [],
								"type": "text/javascript"
							}
						}
					],
					"id": "2c991ce2-7407-479c-bc1a-c6a78284b62a",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{BaseUrl}}api/administration/appsetting"
					},
					"response": []
				},
				{
					"name": "Admin Module Setting",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7898fc59-20d9-422a-a2e6-0d61528de937",
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an object with title, data, statusCode, and isSuccess properties\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an('object').that.has.all.keys('title', 'data', 'statusCode', 'isSuccess');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "ba59341a-2361-4817-8c5a-df0309937a4b",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "7ecf2130-2cee-46ba-848c-a660b0e63f50",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{BaseUrl}}api/administration/modulesettings/district/5fa25767-2eb8-4d12-92b2-851299095c52"
					},
					"response": []
				},
				{
					"name": "Get Notification with pagination",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "df619c9f-b255-42d7-a100-ffde447eea1f",
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an object with title, data, statusCode, and isSuccess properties\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an('object');\r",
									"    pm.expect(jsonData).to.have.property('title');\r",
									"    pm.expect(jsonData).to.have.property('data');\r",
									"    pm.expect(jsonData).to.have.property('statusCode');\r",
									"    pm.expect(jsonData).to.have.property('isSuccess');\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "c5a84bbe-bde1-434b-8131-f334b43c4c44",
								"exec": [],
								"type": "text/javascript"
							}
						}
					],
					"id": "3bb71032-c98a-405f-9e42-c0da8c8f050e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseUrl}}api/administration/inappnotifications/sfcode/{{sfcode}}?Page=1&PageSize=1",
							"host": [
								"{{BaseUrl}}api"
							],
							"path": [
								"administration",
								"inappnotifications",
								"sfcode",
								"{{sfcode}}"
							],
							"query": [
								{
									"key": "Page",
									"value": "1"
								},
								{
									"key": "PageSize",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Module setting on school",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6b98fa16-80ee-46c0-9fbc-4afd61eec636",
								"exec": [
									"\r",
									"pm.test(\"Response is not null\", function () {\r",
									"    pm.expect(pm.response.json()).to.not.be.null;\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "ccefa437-b778-4495-bba9-654729f4f82b",
								"exec": [],
								"type": "text/javascript"
							}
						}
					],
					"id": "42748ab2-4bc9-4a22-ad9f-e9172ad197cf",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"isInventory\": true,\r\n  \"isProduction\": false\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseUrl}}api/administration/modulesettings/district/5fa25767-2eb8-4d12-92b2-851299095c52/sfcode/{{sfcode}}"
					},
					"response": []
				}
			],
			"id": "626f27b8-14cb-4814-8b99-655e58c6fb52"
		},
		{
			"name": "Inventory",
			"item": [
				{
					"name": "Inventory Daily Requisition",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f5693fa7-6bad-402f-9260-c9ae795aacb2",
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an object with title, data, statusCode, and isSuccess properties\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an('object').that.has.all.keys('title', 'data', 'statusCode', 'isSuccess');\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "f5894cd7-91e2-4681-bd86-adfa5ea0c58e",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "17f0924c-e723-4d1a-8853-4dfeb787eab7",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{BaseUrl}}api/inventory/dailyrequisitions/sfCode/{{sfcode}}"
					},
					"response": []
				},
				{
					"name": "Inventory EDR log",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "81d70cf0-5e07-4d58-a715-29f1ea3ebb87",
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an object with data property\", function () {\r",
									"    pm.expect(pm.response.json()).to.be.an('object').that.has.property('data');\r",
									"});\r",
									"\r",
									"pm.test(\"Response has a data array with elements\", function () {\r",
									"    pm.expect(pm.response.json().data.data).to.be.an('array').that.is.not.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Response has a statusCode property\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.property('statusCode');\r",
									"});\r",
									"\r",
									"pm.test(\"Response has an isSuccess property\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.property('isSuccess');\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "434e5a71-eb75-4b6f-af18-76ffb9961abb",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "ce6202bf-ac41-46a1-9e18-0990d1f078de",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{BaseUrl}}api/inventory/inventories/sfcode/{{sfcode}}/edrlogs"
					},
					"response": []
				},
				{
					"name": "EDR Log Detail",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3372d544-1abf-460f-9c8d-6efd3667b608",
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Test for the existence of properties in the root object\r",
									"pm.test(\"Response has title, data, statusCode, and isSuccess properties\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('title');\r",
									"    pm.expect(jsonData).to.have.property('data');\r",
									"    pm.expect(jsonData).to.have.property('statusCode');\r",
									"    pm.expect(jsonData).to.have.property('isSuccess');\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "7f771208-022d-456f-b44c-8deab741f3f4",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "aa1a6164-5aad-42a5-b54c-fae323c697e7",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseUrl}}api/inventory/inventories/sfcode/{{sfcode}}/edrlogdetails?EDRLogId=fb84fc94-9dca-4429-a766-3988df3d79b0",
							"host": [
								"{{BaseUrl}}api"
							],
							"path": [
								"inventory",
								"inventories",
								"sfcode",
								"{{sfcode}}",
								"edrlogdetails"
							],
							"query": [
								{
									"key": "EDRLogId",
									"value": "fb84fc94-9dca-4429-a766-3988df3d79b0"
								}
							]
						}
					},
					"response": []
				}
			],
			"id": "ec30353a-0b74-4f75-975a-ac6501937a0a"
		},
		{
			"name": "UserAccess",
			"item": [
				{
					"name": "LogedIn User Detail",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f676df6c-96f7-466d-b0a6-09d3e24bade0",
								"exec": [
									"pm.test(\"Response Content-Type is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									" \r",
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									" \r",
									"pm.test(\"Response is an object with data property\", function () {\r",
									"    pm.expect(pm.response.json()).to.be.an('object').that.has.property('data');\r",
									"});\r",
									" \r",
									"pm.test(\"Response data has roleID, roleName, and hierarchy properties\", function () {\r",
									"    var data = pm.response.json().data;\r",
									"    pm.expect(data).to.have.property('roleName').that.is.a('string');\r",
									"});\r",
									" \r",
									"pm.test(\"Response data has employeeID, fullName, and totalUnseenNotificationCount properties\", function () {\r",
									"    var data = pm.response.json().data;\r",
									"    pm.expect(data).to.have.property('fullName').that.is.a('string');\r",
									"    pm.expect(data).to.have.property('totalUnseenNotificationCount').that.is.a('number');\r",
									"});\r",
									" \r",
									"pm.test(\"Response data has menus, schools, and permissions properties\", function () {\r",
									"    var data = pm.response.json().data;\r",
									"    pm.expect(data).to.have.property('menus').that.is.an('array');\r",
									"    pm.expect(data).to.have.property('schools').that.is.an('array');\r",
									"    pm.expect(data).to.have.property('permissions').that.is.an('array');\r",
									"});\r",
									" \r",
									" \r",
									"pm.test(\"Response data has statusCode and isSuccess properties\", function () {\r",
									"    var data = pm.response.json();\r",
									"    pm.expect(data).to.have.property('statusCode').that.is.a('number');\r",
									"    pm.expect(data).to.have.property('isSuccess').that.is.a('boolean');\r",
									"});\r",
									" \r",
									"pm.test(\"Permissions array should not be empty\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"   \r",
									"    pm.expect(responseData.data.permissions).to.be.an('array').and.to.have.lengthOf.at.least(1, \"Permissions array should not be empty\");\r",
									"});\r",
									" \r",
									"pm.test(\"Static texts array contains objects with required properties\", function () {\r",
									"    const responseData = pm.response.json().data;\r",
									" \r",
									"    pm.expect(responseData.staticTexts).to.be.an('array');\r",
									"    responseData.staticTexts.forEach(function(staticText) {\r",
									"        pm.expect(staticText).to.have.property('code').that.is.a('string');\r",
									"        pm.expect(staticText).to.have.property('text').that.is.a('string');\r",
									"        pm.expect(staticText).to.have.property('description').that.is.a('string');\r",
									"    });\r",
									"});\r",
									"pm.test(\"Response data has roleName property\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"   \r",
									"    pm.expect(responseData).to.have.property('data');\r",
									"    pm.expect(responseData.data).to.have.property('roleName');\r",
									"});\r",
									" \r",
									" \r",
									"pm.test(\"Response data has userID property\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"   \r",
									"    pm.expect(responseData).to.have.property('data');\r",
									"    pm.expect(responseData.data).to.have.property('userID');\r",
									"});\r",
									" \r",
									" \r",
									"pm.test(\"Response data has email property\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"   \r",
									"    pm.expect(responseData).to.have.property('data');\r",
									"    pm.expect(responseData.data).to.have.property('email');\r",
									"});\r",
									" \r",
									" \r",
									"pm.test(\"Response data has totalUnseenNotificationCount property\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"   \r",
									"    pm.expect(responseData.data).to.have.property('totalUnseenNotificationCount');\r",
									"});\r",
									" \r",
									" \r",
									"pm.test(\"Response data has menus property\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"   \r",
									"    pm.expect(responseData.data).to.have.property('menus');\r",
									"});\r",
									" \r",
									" "
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "72a4bd67-54ed-4757-a64f-14434ec6703d",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "480a6ec8-3465-406f-8ab1-a4589c34a665",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Id-Token",
								"value": "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6InNlcnZlciJ9.eyJlbWFpbF92ZXJpZmllZCI6dHJ1ZSwicmVhbG1OYW1lIjoiY2xvdWRJZGVudGl0eVJlYWxtIiwiZGlzcGxheU5hbWUiOiJDaGFybGllIEtpbmciLCJuYW1lIjoiQ2hhcmxpZSBLaW5nIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiY2tpbmciLCJnaXZlbl9uYW1lIjoiQ2hhcmxpZSIsImZhbWlseV9uYW1lIjoiS2luZyIsImVtYWlsIjoiY2tpbmdAc3ZhbWRldi5jb20iLCJhY3IiOiJ1cm46aWJtOnNlY3VyaXR5OnBvbGljeTppZDoxIiwidXNlclR5cGUiOiJyZWd1bGFyIiwic19oYXNoIjoiUjF5aHZsSEhiOFZ6Z1lycEJwUklldyIsInVuaXF1ZVNlY3VyaXR5TmFtZSI6IjY0NDAwMkQxNFkiLCJhdXRoX3RpbWUiOjE3MDM3NzYzNjgsImp0aSI6IjdUSmpBRXY1Wm9vWjhjTFZRUlVWTWdQSDRDU1NMQSIsImF0X2hhc2giOiI2QWd2WUdJbXFSY2hPYjg3MC1iVFNRIiwiYW1yIjpbInBhc3N3b3JkIl0sImV4dCI6eyJ0ZW5hbnRJZCI6InN2YW1kZXYudmVyaWZ5LmlibS5jb20ifSwiaXNzIjoiaHR0cHM6Ly9zdmFtZGV2LnZlcmlmeS5pYm0uY29tL29pZGMvZW5kcG9pbnQvZGVmYXVsdCIsImF1ZCI6Ijk5ZTRhOTJhLTI3MjMtNDIwYy1iOTM5LTE0NzBjYzgzOTI5NCIsInN1YiI6IjY0NDAwMkQxNFkiLCJpYXQiOjE3MDM3NzYzNzAsImV4cCI6MTcwMzc4MzU3MH0.ck-0wB63kVsStqVkqxDI0EIwgK91WpkVECOqdAOCRGuXykWGIucebROVcHJ767R7YT23McreyFq5hQJYM15AzeaN3r1IgAH8o3bHQ_sHIlyDARg8qd9aE4bUmwdlu3A-j5TJvuSLfqoyzfGAcCwP5ATx_v_TbOxmhISqWIQEjQEEIMyn4aeQF5njc3fh9A2vIVqrDy8TMlvXyHUFxhll9hfnsWFMXHWf5GOrbrtkN1m4g5GMGBKRgp0IwXTSYhyB8Hp3WA1yjGGSyfreEuFxBycTDPaGzP0veL38CYM8qQJ1SMhx8O8z_pORLPeadadqiRAFwmPxI7SZ-lyjxXmtWw",
								"type": "text",
								"disabled": true
							}
						],
						"url": "{{BaseUrl}}api/useraccess/loggedinuserdetail"
					},
					"response": []
				}
			],
			"id": "5eccd812-c47e-4f1d-b118-c9a30e28492d"
		},
		{
			"name": "Daily Requisition",
			"item": [
				{
					"name": "Submit Daily Requisition",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f5693fa7-6bad-402f-9260-c9ae795aacb2",
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an object with title, data, statusCode, and isSuccess properties\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an('object').that.has.all.keys('title', 'data', 'statusCode', 'isSuccess');\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "f5894cd7-91e2-4681-bd86-adfa5ea0c58e",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "c0c821ca-7170-4988-bac3-171f99d5b534",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"RequisitionId\" : \"a5f87c8b-ef85-40af-b2b8-4a9dca9ca92c\",\r\n    \"WorkFlowActionId\" : \"Submit\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseUrl}}api/inventory/dailyrequisitions/sfCode/{{sfcode}}/submit"
					},
					"response": []
				},
				{
					"name": "Get Daily Requisition",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f5693fa7-6bad-402f-9260-c9ae795aacb2",
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an object with title, data, statusCode, and isSuccess properties\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an('object').that.has.all.keys('title', 'data', 'statusCode', 'isSuccess');\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "f5894cd7-91e2-4681-bd86-adfa5ea0c58e",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "faa46a7f-6abb-45e2-a78e-68febdd41719",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseUrl}}api/inventory/dailyrequisitions/sfCode/{{sfcode}}?id=f11a1a05-8cd3-4a38-8b25-949cda68818e",
							"host": [
								"{{BaseUrl}}api"
							],
							"path": [
								"inventory",
								"dailyrequisitions",
								"sfCode",
								"{{sfcode}}"
							],
							"query": [
								{
									"key": "id",
									"value": "f11a1a05-8cd3-4a38-8b25-949cda68818e"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Daily Requisition Detail",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f5693fa7-6bad-402f-9260-c9ae795aacb2",
								"exec": [
									"pm.test('Response status code is 200', function () {\r",
									"    pm.response.to.have.status(200);\r",
									"})\r",
									"\r",
									"pm.test('Response is an object with title, data, statusCode, and isSuccess properties', function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an('object').that.has.all.keys('title', 'data', 'statusCode', 'isSuccess');\r",
									"})\r",
									"\r",
									"pm.test(\"Each element in the data array has non-empty itemName and inventoryItemId\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    jsonData.data.forEach(function(item) {\r",
									"        pm.expect(item.itemName).to.be.a('string').and.to.not.be.empty;\r",
									"    });\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "f5894cd7-91e2-4681-bd86-adfa5ea0c58e",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "050881f3-6f6d-4a15-81d7-c7446edefaec",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseUrl}}api/inventory/dailyrequisitions/sfCode/{{sfcode}}/requisitiondetails?id=13b9049c-5b6e-40da-a9a9-0ca249ff466b",
							"host": [
								"{{BaseUrl}}api"
							],
							"path": [
								"inventory",
								"dailyrequisitions",
								"sfCode",
								"{{sfcode}}",
								"requisitiondetails"
							],
							"query": [
								{
									"key": "id",
									"value": "13b9049c-5b6e-40da-a9a9-0ca249ff466b"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Daily Requisition",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f5693fa7-6bad-402f-9260-c9ae795aacb2",
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an object with title, data, statusCode, and isSuccess properties\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an('object').that.has.all.keys('title', 'data', 'statusCode', 'isSuccess');\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "f5894cd7-91e2-4681-bd86-adfa5ea0c58e",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "f518b01d-460e-461c-8e23-8748ef0cc22f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"ServiceDate\": \"2024-01-01\",\r\n    \"Note\": \"test note\",\r\n    \"IsService\": true,\r\n    \"WorkFlowActionId\":\"Create\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseUrl}}api/inventory/dailyrequisitions/sfCode/{{sfcode}}"
					},
					"response": []
				},
				{
					"name": "Update Daily Requisition",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f5693fa7-6bad-402f-9260-c9ae795aacb2",
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an object with title, data, statusCode, and isSuccess properties\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an('object').that.has.all.keys('title', 'data', 'statusCode', 'isSuccess');\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "f5894cd7-91e2-4681-bd86-adfa5ea0c58e",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "5a14daf4-fff7-421b-ae54-a8ea19d3e7b7",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"serviceDate\": \"2024-01-04T05:00:27.459Z\",\r\n  \"isService\": true\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseUrl}}api/inventory/dailyrequisitions/sfCode/{{sfcode}}?id=f11a1a05-8cd3-4a38-8b25-949cda68818e",
							"host": [
								"{{BaseUrl}}api"
							],
							"path": [
								"inventory",
								"dailyrequisitions",
								"sfCode",
								"{{sfcode}}"
							],
							"query": [
								{
									"key": "id",
									"value": "f11a1a05-8cd3-4a38-8b25-949cda68818e"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Daily Requisition Detail",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f5693fa7-6bad-402f-9260-c9ae795aacb2",
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an object with title, data, statusCode, and isSuccess properties\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an('object').that.has.all.keys('title', 'data', 'statusCode', 'isSuccess');\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "f5894cd7-91e2-4681-bd86-adfa5ea0c58e",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "3d2dc2cb-f915-4ee2-a893-c572f88ea59a",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"dailyRequisitionDetailList\": [\r\n    {\r\n      \"inventoryItemId\": \"525D6564-A183-4CC8-8686-000B4E9AF8A1\",\r\n      \"quantity\": 4,\r\n      \"dailyRequisitionId\": \"f11a1a05-8cd3-4a38-8b25-949cda68818e\",\r\n      \"sfcode\": \"20071\"\r\n    }\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseUrl}}api/inventory/dailyrequisitions/sfCode/{{sfcode}}/requisitiondetails"
					},
					"response": []
				},
				{
					"name": "Update Daily Requisition Detail",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f5693fa7-6bad-402f-9260-c9ae795aacb2",
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an object with title, data, statusCode, and isSuccess properties\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an('object').that.has.all.keys('title', 'data', 'statusCode', 'isSuccess');\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "f5894cd7-91e2-4681-bd86-adfa5ea0c58e",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "28b2aa8f-0663-4cfd-88a9-6c7d2b767b33",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"dailyRequisitionDetailList\": [\r\n    {\r\n      \"id\": \"4186828A-93CD-4D48-B14A-C35002BC817D\",\r\n      \"inventoryItemId\": \"525D6564-A183-4CC8-8686-000B4E9AF8A1\",\r\n      \"quantity\": 6,\r\n      \"dailyRequisitionId\": \"f11a1a05-8cd3-4a38-8b25-949cda68818e\",\r\n      \"sfcode\": \"20071\"\r\n    }\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseUrl}}api/inventory/dailyrequisitions/sfCode/{{sfcode}}/requisitiondetails"
					},
					"response": []
				},
				{
					"name": "Delete Daily Requisition Detail",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f5693fa7-6bad-402f-9260-c9ae795aacb2",
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an object with title, data, statusCode, and isSuccess properties\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an('object').that.has.all.keys('title', 'data', 'statusCode', 'isSuccess');\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "f5894cd7-91e2-4681-bd86-adfa5ea0c58e",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "6b3acf9f-87e0-4cc0-a6b8-358b6a16f595",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"dailyRequisitionDetailList\": [\r\n    {\r\n      \"id\": \"4186828A-93CD-4D48-B14A-C35002BC817D\",\r\n      \"inventoryItemId\": \"525D6564-A183-4CC8-8686-000B4E9AF8A1\",\r\n      \"quantity\": 0,\r\n      \"dailyRequisitionId\": \"f11a1a05-8cd3-4a38-8b25-949cda68818e\",\r\n      \"sfcode\": \"20071\"\r\n    }\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseUrl}}api/inventory/dailyrequisitions/sfCode/{{sfcode}}/requisitiondetails"
					},
					"response": []
				}
			],
			"id": "532f4277-3725-41f0-b332-e9e05f44fcd7"
		}
	],
	"auth": {
		"type": "oauth2",
		"oauth2": {
			"username": "dsmith",
			"tokenName": "BOH-CKing",
			"password": "bohpass1",
			"clientId": "{{clientId}}",
			"grant_type": "password_credentials",
			"clientSecret": "h3nzHimJUG",
			"accessTokenUrl": "https://svamdev.verify.ibm.com/v1.0/endpoint/default/token",
			"authUrl": "https://svamdev.verify.ibm.com/v1.0/endpoint/default/authorize",
			"redirect_uri": "https://oauth.pstmn.io/v1/callback",
			"useBrowser": false,
			"addTokenTo": "header"
		}
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "42b3fb7d-49e7-4b87-884b-3b9d3cd98c5f",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "b2f3b363-c553-4344-b9eb-c9d63f729ddc",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}