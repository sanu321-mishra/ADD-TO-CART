{
	"info": {
		"_postman_id": "4e033a36-c6b3-441f-adbe-21116eba6376",
		"name": "BOH Collection",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
	},
	"item": [
		{
			"name": "Inventory dashboard",
			"item": [
				{
					"name": "Get Inventory Summary For Dashboard",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d02f7d6f-cb1b-4163-9f86-26450d33459a",
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an object with title, data, statusCode, and isSuccess properties\", function () {\r",
									"    pm.expect(pm.response.json()).to.be.an('object').that.has.all.keys('title', 'data', 'statusCode', 'isSuccess');\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "f21b5b36-e694-4b7d-b09a-805230ade549",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "e5cfa4f5-b0bb-4a08-9380-aa40b06b4e92",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{BaseUrl}}api/inventory/inventories/sfcode/SF-0145/summary"
					},
					"response": []
				},
				{
					"name": "Get Inventory Transfer Pending",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0a84f799-7ac9-4a3d-bbdc-bc9e4bc481fc",
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an object with title, data, statusCode, and isSuccess properties\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an('object');\r",
									"    pm.expect(jsonData).to.have.property('title');\r",
									"    pm.expect(jsonData).to.have.property('data');\r",
									"    pm.expect(jsonData).to.have.property('statusCode');\r",
									"    pm.expect(jsonData).to.have.property('isSuccess');\r",
									"});\r",
									"\r",
									"pm.test(\"Each element in the data array has serviceDate, status, transferType, and id properties\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    jsonData.data.forEach(function(transfer) {\r",
									"        pm.expect(transfer).to.have.property('serviceDate');\r",
									"        pm.expect(transfer).to.have.property('status');\r",
									"        pm.expect(transfer).to.have.property('transferType');\r",
									"        pm.expect(transfer).to.have.property('id');\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "9c3a5cea-9262-4652-8cd6-ff0ed3e2cb8b",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{BaseUrl}}api/inventory/inventories/sfcode/SF-0145/pendingproducttransfers"
					},
					"response": []
				},
				{
					"name": "Get Todays form status",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9172bd98-7f42-4187-92ea-4e466df79d8e",
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an object with title, data, statusCode, and isSuccess properties\", function () {\r",
									"    pm.expect(pm.response.json()).to.be.an('object').that.has.all.keys('title', 'data', 'statusCode', 'isSuccess');\r",
									"});\r",
									"\r",
									"pm.test(\"Each element in the data array has formName, status, serviceDate, id, and isDueDateExceeded properties\", function () {\r",
									"    pm.response.json().data.forEach(function(form) {\r",
									"        pm.expect(form).to.have.all.keys('formName', 'status', 'serviceDate', 'id', 'isDueDateExceeded');\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "39c31bf8-83c6-464b-a763-6b5ad913644f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{BaseUrl}}api/inventory/inventories/sfcode/SF-0145/todaysforms"
					},
					"response": []
				},
				{
					"name": "Get Inventory Pending Form",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ea33ba1e-cc50-432c-8b11-5cb16c0fdd67",
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an object with title, data, statusCode, and isSuccess properties\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an('object').that.has.all.keys('title', 'data', 'statusCode', 'isSuccess');\r",
									"});\r",
									"\r",
									"pm.test(\"Each element in the data array has formName, status, serviceDate, id, and isDueDateExceeded properties\", function () {\r",
									"    var data = pm.response.json().data;\r",
									"    data.forEach(function(form) {\r",
									"        pm.expect(form).to.be.an('object').that.has.all.keys('formName', 'status', 'serviceDate', 'id', 'isDueDateExceeded');\r",
									"        \r",
									"    });\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "2c82917d-fde6-41c9-a02b-bc719c6261ca",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{BaseUrl}}api/inventory/inventories/sfcode/SF-0145/pendingforms"
					},
					"response": []
				}
			],
			"id": "eece15e7-f2bf-45f2-aa4e-14bc3283b4df",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "2db74fa6-2e46-43be-b0b4-0207094c3f31",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "2789d0c1-66cd-4acc-85b4-c4fd27202b8b",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Occurrencelog",
			"item": [
				{
					"name": "Get OccurrenceLog BY ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9c69a6fb-b223-46a2-b9b9-512b91bd8743",
								"exec": [
									"pm.test(\"Schema is valid\", function () {\r",
									"  var schema = {\r",
									"    type: \"object\",\r",
									"    properties: {\r",
									"      title: {\r",
									"        type: \"string\"\r",
									"      },\r",
									"      data: {\r",
									"        type: \"object\",\r",
									"        properties: {\r",
									"          id: { type: \"string\" },\r",
									"          sfcode: { type: \"string\" },\r",
									"          statusId: { type: \"string\" },\r",
									"          occuranceDate: { type: \"string\" }\r",
									"        },\r",
									"        required: [\"id\", \"sfcode\", \"statusId\", \"occuranceDate\"]\r",
									"      },\r",
									"      statusCode: { type: \"number\" },\r",
									"      isSuccess: { type: \"boolean\" }\r",
									"    },\r",
									"    required: [\"title\", \"data\", \"statusCode\", \"isSuccess\"]\r",
									"  };\r",
									"\r",
									"});// Verify the length of data properties\r",
									"pm.test(\"The data properties must not be empty\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    const data = responseData.data;\r",
									"   \r",
									"    pm.expect(Object.keys(data).length).to.be.greaterThan(0, \"Data properties should not be empty\");\r",
									"\r",
									"    for (const key in data) {\r",
									"        pm.expect(data[key].length).to.be.greaterThan(0, \"Data property values should not be empty\");\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "eaaacf38-a59b-45dc-b9af-63b5e1d17132",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{BaseUrl}}api/production/occurrencelogs/sfcode/sf-0145/4184363a-6116-48e3-9bcd-06bd62d59a5e"
					},
					"response": []
				},
				{
					"name": "Add Occurrence Log Data",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "893fa8fa-b482-49e0-af52-ddc55246cc3d",
								"exec": [
									"pm.test(\"Response status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "e952521f-0a8f-40c6-9c8a-526434cd8297",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"sfcode\": \"sf-0145\",\r\n  \"statusId\": \"6C63E7E4-7A1E-4520-805A-E41DC0966C07\",\r\n  \"occuranceDate\": \"2023-11-28T09:20:15.061Z\",\r\n  \"note\": \"Hello villain\",\r\n  \"occuranceSfcodeList\": \"string\",\r\n  \"occuranceStartDateTime\": \"2023-11-28T09:20:15.061Z\",\r\n  \"ocurranceEndDateTime\": \"2023-11-28T09:20:15.061Z\",\r\n  \"isFieldOfficeCalled\": true,\r\n  \"isSendEmail\": true,\r\n  \"emailSentStatus\": 0,\r\n  \"isActive\": true\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseUrl}}api/production/occurrencelogs/sfcode/SF-0146"
					},
					"response": []
				},
				{
					"name": "Update OccurrenceLog Data",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9781aa8a-5f0d-4722-aee4-200f264224dc",
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "69a6dbca-f220-4809-aa63-2126f06d6cdc",
								"exec": [],
								"type": "text/javascript"
							}
						}
					],
					"id": "fb59c741-a648-4b6d-9014-be00cf6397fd",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"sfcode\": \"sf-0146\",\r\n  \"statusId\": \"6C63E7E4-7A1E-4520-805A-E41DC0966C07\",\r\n  \"occuranceDate\": \"2023-11-28T09:20:15.061Z\",\r\n  \"note\": \"Hello villain 46\",\r\n  \"occuranceSfcodeList\": \"string\",\r\n  \"occuranceStartDateTime\": \"2023-11-28T09:20:15.061Z\",\r\n  \"ocurranceEndDateTime\": \"2023-11-28T09:20:15.061Z\",\r\n  \"isFieldOfficeCalled\": true,\r\n  \"isSendEmail\": true,\r\n  \"emailSentStatus\": 0,\r\n  \"isActive\": true\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseUrl}}api/production/occurrencelogs/7BE4209A-C049-4260-A8C6-6AFDBF7F5EFB/sfcode/SF-0146"
					},
					"response": []
				},
				{
					"name": "Delete a Occurrence Log Data",
					"id": "25da4a4e-2838-44b5-9bba-1d5ec7c4b40f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [],
						"url": "{{BaseUrl}}api/production/occurrencelogs/f0a096b0-9f5b-48fc-ba86-e9903cab528b"
					},
					"response": []
				}
			],
			"id": "bd5337b4-767b-4b35-9e21-340bb27ed298",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "c2230c3a-7ef0-4f14-bc2c-92591173ef47",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "565cf252-0bae-47d7-a1ce-3052d65be472",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Production Dashboard",
			"item": [
				{
					"name": "Todays Form status",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7459a1d6-24d7-4341-8ba4-5984c217ae28",
								"exec": [
									"// Test to check if the response contains the correct content type\r",
									"pm.test(\"Response has the correct content type\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"// Test to check if the serviceDate only comes for today's date\r",
									"pm.test(\"Service date is only for today's date\", function () {\r",
									"    var today = new Date().toISOString().split('T')[0]; // Get today's date in YYYY-MM-DD format\r",
									"    pm.response.json().data.forEach(function(record) {\r",
									"        pm.expect(record.serviceDate).to.equal(today);\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "06d768d4-739a-4b93-80cf-5a486ee01724",
								"exec": [],
								"type": "text/javascript"
							}
						}
					],
					"id": "0eec2891-f575-4269-98c3-e3b4b1e1f3ce",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{BaseUrl}}api/production/productionrecords/sfcode/SF-0145/todaysforms"
					},
					"response": []
				},
				{
					"name": "Incomplete Form",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "15d2e84e-28b9-46fc-9797-adab3a0c6b7a",
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"No verified Status\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    const forms = responseData.data;\r",
									"\r",
									"    forms.forEach((form) => {\r",
									"        pm.expect(form.status).to.not.equal('verified');\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "15daefdc-1220-4129-886e-8a41f1b5cd7e",
								"exec": [],
								"type": "text/javascript"
							}
						}
					],
					"id": "622ce883-5d2e-4749-a859-550fb0b729ff",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{BaseUrl}}api/production/productionrecords/sfcode/SF-0145/incompleteforms"
					},
					"response": []
				},
				{
					"name": "Upcoming School Trip Forms",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "01e7e668-b414-4807-bbad-c4a150efea8e",
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response data has a serviceDate property with an upcoming date\", function () {\r",
									"    var serviceDate = pm.response.json().data[0].serviceDate;\r",
									"    var upcomingDate = new Date(serviceDate) > new Date();\r",
									"    pm.expect(upcomingDate).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Response has a title property\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.property('title');\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "b5339ae6-11a5-4c5c-a3f0-10683ba8ef6d",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "79440d36-cdbe-4646-a2ac-c4be3c7c4621",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{BaseUrl}}api/production/productionrecords/sfcode/{{sfcode}}/upcomingschooltripforms"
					},
					"response": []
				},
				{
					"name": "Calender",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c77ab1a7-5c47-4151-8951-c155700b88dc",
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an object with title, data, statusCode, and isSuccess properties\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an('object').that.has.all.keys('title', 'data', 'statusCode', 'isSuccess');\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "5f9cc1f4-f21c-4555-984e-7e2342d6c4f4",
								"exec": [],
								"type": "text/javascript"
							}
						}
					],
					"id": "50e61d12-725c-4e5e-9200-93e3a9791a83",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{BaseUrl}}api/production/productionrecords/sfcode/sf-0146/calendar"
					},
					"response": []
				}
			],
			"id": "6c99d971-f25f-4c92-a39d-e83c32534b61"
		},
		{
			"name": "Reports",
			"item": [
				{
					"name": "Occurrence Log",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "08412887-7b47-4470-97a2-7620c2a20be8",
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an object with data property\", function () {\r",
									"    pm.expect(pm.response.json()).to.be.an('object').that.has.property('data');\r",
									"});\r",
									"\r",
									"pm.test(\"Response data property is an object with data and total properties\", function () {\r",
									"    var data = pm.response.json().data;\r",
									"    pm.expect(data).to.be.an('object').that.has.property('data');\r",
									"    pm.expect(data).to.be.an('object').that.has.property('total');\r",
									"});\r",
									"\r",
									"pm.test(\"Response has statusCode property\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.property('statusCode');\r",
									"});\r",
									"\r",
									"pm.test(\"Response has isSuccess property\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.property('isSuccess');\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "0bc161d5-65a2-4f06-84d8-14449fbea7a9",
								"exec": [],
								"type": "text/javascript"
							}
						}
					],
					"id": "75115d77-e401-4be1-8421-045146146c31",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseUrl}}api/reports/productions/occurrences?SfCode=SF-0145&From=2020-10-01&To=2024-10-30",
							"host": [
								"{{BaseUrl}}api"
							],
							"path": [
								"reports",
								"productions",
								"occurrences"
							],
							"query": [
								{
									"key": "SfCode",
									"value": "SF-0145"
								},
								{
									"key": "From",
									"value": "2020-10-01"
								},
								{
									"key": "To",
									"value": "2024-10-30"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Production Record",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8136582f-cf32-4f85-b411-737af7e7d3b5",
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an object with title, data, statusCode, and isSuccess properties\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an('object').that.has.all.keys('title', 'data', 'statusCode', 'isSuccess');\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "eb7579c1-1ce1-44ad-a5d1-737fbb0e065d",
								"exec": [],
								"type": "text/javascript"
							}
						}
					],
					"id": "40118790-0670-4869-bfd0-60bb3cbfe9a9",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseUrl}}api/reports/productions/productionrecords?SfCode=SF-0145&From=2020-10-01&To=2024-10-30",
							"host": [
								"{{BaseUrl}}api"
							],
							"path": [
								"reports",
								"productions",
								"productionrecords"
							],
							"query": [
								{
									"key": "SfCode",
									"value": "SF-0145"
								},
								{
									"key": "From",
									"value": "2020-10-01"
								},
								{
									"key": "To",
									"value": "2024-10-30"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "School Trip Lunch",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7340e011-0444-4b29-834b-9f9e7fd18e01",
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Data is only for productionRecordStructureType equal to School Trip Lunch\", function () {\r",
									"    pm.response.json().data.data.forEach(function(record) {\r",
									"        pm.expect(record.productionRecordStructureType).to.equal(\"School Trip Lunch\");\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "45638ea8-4e65-4146-93db-6a950704460e",
								"exec": [],
								"type": "text/javascript"
							}
						}
					],
					"id": "6f56c029-73e3-405e-9b63-b4c85c22bf6d",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseUrl}}api/reports/productions/productionrecords?SfCode=SF-0145&From=2020-10-01&To=2024-10-30&IsSchoolTripOnly=true",
							"host": [
								"{{BaseUrl}}api"
							],
							"path": [
								"reports",
								"productions",
								"productionrecords"
							],
							"query": [
								{
									"key": "SfCode",
									"value": "SF-0145"
								},
								{
									"key": "From",
									"value": "2020-10-01"
								},
								{
									"key": "To",
									"value": "2024-10-30"
								},
								{
									"key": "IsSchoolTripOnly",
									"value": "true"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Physical Inventory",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "eb20d227-9fd8-4bfa-b6a1-0f1df89f1d30",
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an object with data property\", function () {\r",
									"    pm.expect(pm.response.json()).to.be.an('object').that.has.property('data');\r",
									"});\r",
									"\r",
									"pm.test(\"Response data contains count, data, and total properties\", function () {\r",
									"    var data = pm.response.json().data;\r",
									"    pm.expect(data).to.have.property('count');\r",
									"    pm.expect(data).to.have.property('data');\r",
									"    pm.expect(data).to.have.property('total');\r",
									"});\r",
									"\r",
									"pm.test(\"Response isSuccess is a boolean\", function () {\r",
									"    pm.expect(pm.response.json().isSuccess).to.be.a('boolean');\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "8818f2a6-96ce-4d24-90ca-b4a263893d64",
								"exec": [],
								"type": "text/javascript"
							}
						}
					],
					"id": "401d1646-7d05-4447-825d-448a4f679d70",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseUrl}}api/reports/inventories/physicalinventories?SfCode=SF-0145&From=2020-10-01&To=2024-10-30",
							"host": [
								"{{BaseUrl}}api"
							],
							"path": [
								"reports",
								"inventories",
								"physicalinventories"
							],
							"query": [
								{
									"key": "SfCode",
									"value": "SF-0145"
								},
								{
									"key": "From",
									"value": "2020-10-01"
								},
								{
									"key": "To",
									"value": "2024-10-30"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Product Transfer",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8f037455-91a4-4e3d-87f3-b35d8da9648c",
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an object with data property\", function () {\r",
									"    pm.expect(pm.response.json()).to.be.an('object').that.has.property('data');\r",
									"});\r",
									"\r",
									"pm.test(\"Response data property has count, data, and total properties\", function () {\r",
									"    var data = pm.response.json().data;\r",
									"    pm.expect(data).to.have.property('count');\r",
									"    pm.expect(data).to.have.property('data');\r",
									"    pm.expect(data).to.have.property('total');\r",
									"});\r",
									"\r",
									"pm.test(\"Each element in the count array has status, statusId, and total properties\", function () {\r",
									"    pm.response.json().data.count.forEach(function(item) {\r",
									"        pm.expect(item).to.have.property('status');\r",
									"        pm.expect(item).to.have.property('statusId');\r",
									"        pm.expect(item).to.have.property('total');\r",
									"    });\r",
									"});\r",
									"\r",
									"pm.test(\"Each element in the data array has productTransferId, transferredOn, sfCode, buildingCode, status, and statusId properties\", function () {\r",
									"    pm.response.json().data.data.forEach(function(item) {\r",
									"        pm.expect(item).to.have.property('productTransferId');\r",
									"        pm.expect(item).to.have.property('transferredOn');\r",
									"        pm.expect(item).to.have.property('sfCode');\r",
									"        pm.expect(item).to.have.property('buildingCode');\r",
									"        pm.expect(item).to.have.property('status');\r",
									"        pm.expect(item).to.have.property('statusId');\r",
									"    });\r",
									"});\r",
									"\r",
									"pm.test(\"Response has statusCode, isSuccess, and title properties\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('statusCode');\r",
									"    pm.expect(jsonData).to.have.property('isSuccess');\r",
									"    pm.expect(jsonData).to.have.property('title');\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "3ebd1319-1c48-431f-b85b-529e3e089b5b",
								"exec": [],
								"type": "text/javascript"
							}
						}
					],
					"id": "5cef4985-17c0-431a-8e1c-2f4ae4bd29b6",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseUrl}}api/reports/inventories/producttransfers?SfCode=SF-0145&From=2020-10-01&To=2024-10-30",
							"host": [
								"{{BaseUrl}}api"
							],
							"path": [
								"reports",
								"inventories",
								"producttransfers"
							],
							"query": [
								{
									"key": "SfCode",
									"value": "SF-0145"
								},
								{
									"key": "From",
									"value": "2020-10-01"
								},
								{
									"key": "To",
									"value": "2024-10-30"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Recons statement",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d46c3f4b-9f52-491a-b604-c63891679ef7",
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an object with data property\", function () {\r",
									"    pm.expect(pm.response.json()).to.be.an('object').that.has.property('data');\r",
									"});\r",
									"\r",
									"pm.test(\"Response data contains count, data, and total properties\", function () {\r",
									"    var data = pm.response.json().data;\r",
									"    pm.expect(data).to.have.property('count');\r",
									"    pm.expect(data).to.have.property('data');\r",
									"    pm.expect(data).to.have.property('total');\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains isSuccess property with value true\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.property('isSuccess', true);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "482120ca-3ea6-4163-b7ae-f3e8eef3760f",
								"exec": [],
								"type": "text/javascript"
							}
						}
					],
					"id": "93e4f42e-4c75-4e08-93b9-54ac3f3d227a",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseUrl}}api/reports/inventories/reconcilliations?SfCode=SF-0145&From=2020-10-01&To=2024-10-30",
							"host": [
								"{{BaseUrl}}api"
							],
							"path": [
								"reports",
								"inventories",
								"reconcilliations"
							],
							"query": [
								{
									"key": "SfCode",
									"value": "SF-0145"
								},
								{
									"key": "From",
									"value": "2020-10-01"
								},
								{
									"key": "To",
									"value": "2024-10-30"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Recons Statement Pending Review Only",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "cb9a0e40-3a34-4b6f-989e-e5398ae652a1",
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an object with data property\", function () {\r",
									"    pm.expect(pm.response.json()).to.be.an('object').that.has.property('data');\r",
									"});\r",
									"\r",
									"pm.test(\"Response has a title property\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.property('title');\r",
									"});\r",
									"\r",
									"pm.test(\"Response has a count array with status, statusId, and total properties\", function () {\r",
									"    pm.response.json().data.count.forEach(function(count) {\r",
									"        pm.expect(count).to.have.property('status');\r",
									"        pm.expect(count).to.have.property('statusId');\r",
									"        pm.expect(count).to.have.property('total');\r",
									"    });\r",
									"});\r",
									"\r",
									"pm.test(\"Response has a statusCode property\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.property('statusCode');\r",
									"});\r",
									"\r",
									"pm.test(\"Response has a isSuccess property\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.property('isSuccess');\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "aac8de24-4e17-4428-a6f8-7dd94fb05586",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "57dbff1b-5d5e-4548-b842-71016a4a468e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseUrl}}api/reports/inventories/reconcilliations?SfCode=SF-0145&From=2020-10-01&To=2024-10-30&IsPendingReviewOnly=true",
							"host": [
								"{{BaseUrl}}api"
							],
							"path": [
								"reports",
								"inventories",
								"reconcilliations"
							],
							"query": [
								{
									"key": "SfCode",
									"value": "SF-0145"
								},
								{
									"key": "From",
									"value": "2020-10-01"
								},
								{
									"key": "To",
									"value": "2024-10-30"
								},
								{
									"key": "IsPendingReviewOnly",
									"value": "true"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Adjustment",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "369e0ba8-ac7e-44e0-8521-f8c21d6b5f2c",
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an object with title, data, statusCode, and isSuccess properties\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an('object').that.has.all.keys('title', 'data', 'statusCode', 'isSuccess');\r",
									"});\r",
									"\r",
									"pm.test(\"Count array contains objects with total property\", function () {\r",
									"    var countArray = pm.response.json().data.count;\r",
									"    countArray.forEach(function(item) {\r",
									"        pm.expect(item).to.have.property('total');\r",
									"    });\r",
									"});\r",
									"\r",
									"pm.test(\"Data array contains objects with adjustmentId, serviceDate, sfCode, and buildingCode properties\", function () {\r",
									"    var dataArray = pm.response.json().data.data;\r",
									"    dataArray.forEach(function(item) {\r",
									"        pm.expect(item).to.have.all.keys('adjustmentId', 'serviceDate', 'sfCode', 'buildingCode');\r",
									"    });\r",
									"});\r",
									"\r",
									"pm.test(\"Total property is a number\", function () {\r",
									"    pm.expect(jsonData.data).to.have.property('total').that.is.a('number');\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "666a599e-9aec-427c-b6fd-ce48292b0b7a",
								"exec": [],
								"type": "text/javascript"
							}
						}
					],
					"id": "4dbeb058-3d9e-4c7f-aa1e-346ae240359f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseUrl}}api/reports/inventories/adjustments?SfCode=SF-0145&From=2020-10-01&To=2024-10-30",
							"host": [
								"{{BaseUrl}}api"
							],
							"path": [
								"reports",
								"inventories",
								"adjustments"
							],
							"query": [
								{
									"key": "SfCode",
									"value": "SF-0145"
								},
								{
									"key": "From",
									"value": "2020-10-01"
								},
								{
									"key": "To",
									"value": "2024-10-30"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Requisitions",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c342ef91-a332-4f19-823d-ae9be3ec6a65",
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an object with data property\", function () {\r",
									"    pm.expect(pm.response.json()).to.be.an('object').that.has.property('data');\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains count array with status, statusId, and total properties\", function () {\r",
									"    pm.expect(pm.response.json().data.count).to.be.an('array').that.is.not.empty;\r",
									"    pm.response.json().data.count.forEach(function(item) {\r",
									"        pm.expect(item).to.have.property('status');\r",
									"        pm.expect(item).to.have.property('statusId');\r",
									"        pm.expect(item).to.have.property('total');\r",
									"    });\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains data array with id, serviceDate, sfCode, buildingCode, status, and statusId properties\", function () {\r",
									"    pm.expect(pm.response.json().data.data).to.be.an('array').that.is.not.empty;\r",
									"    pm.response.json().data.data.forEach(function(item) {\r",
									"        pm.expect(item).to.have.property('id');\r",
									"        pm.expect(item).to.have.property('serviceDate');\r",
									"        pm.expect(item).to.have.property('sfCode');\r",
									"        pm.expect(item).to.have.property('buildingCode');\r",
									"        pm.expect(item).to.have.property('status');\r",
									"        pm.expect(item).to.have.property('statusId');\r",
									"    });\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains total property\", function () {\r",
									"    pm.expect(pm.response.json().data).to.have.property('total');\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains statusCode property\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.property('statusCode');\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains isSuccess property\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.property('isSuccess');\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "f7757480-c8cd-4264-825e-b98215021577",
								"exec": [],
								"type": "text/javascript"
							}
						}
					],
					"id": "c9030df8-8178-49b5-89a5-157a23b3ad73",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseUrl}}api/reports/inventories/requisitions?SfCode=SF-0145&From=2020-10-01&To=2024-10-30",
							"host": [
								"{{BaseUrl}}api"
							],
							"path": [
								"reports",
								"inventories",
								"requisitions"
							],
							"query": [
								{
									"key": "SfCode",
									"value": "SF-0145"
								},
								{
									"key": "From",
									"value": "2020-10-01"
								},
								{
									"key": "To",
									"value": "2024-10-30"
								}
							]
						}
					},
					"response": []
				}
			],
			"id": "37e79f11-107a-493a-ad88-3e66a46489be"
		},
		{
			"name": "Get Module Settings on school",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "d0fa4447-0a20-45a9-a7ea-c25be8f88437",
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "7534bc88-f6f8-4399-b8ab-18f2292e8f8a",
						"exec": [],
						"type": "text/javascript"
					}
				}
			],
			"id": "d074e0b4-e69e-41aa-9214-30c2f9c2f9b5",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"url": "{{BaseUrl}}api/administration/modulesettings/district/8d175f75-e627-4bad-9dbf-3108accbd35b"
			},
			"response": []
		},
		{
			"name": "Update Module setting on school",
			"id": "42748ab2-4bc9-4a22-ad9f-e9172ad197cf",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "PUT",
				"header": [],
				"url": "{{BaseUrl}}api/administration/modulesettings/district/8d175f75-e627-4bad-9dbf-3108accbd35b"
			},
			"response": []
		},
		{
			"name": "Update InAppNotification  Status",
			"id": "cea74fb5-846f-4b37-ac1f-859638d64a85",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "PUT",
				"header": [],
				"url": "{{BaseUrl}}api/common/inappnotifications/sfcode/SF-0146"
			},
			"response": []
		},
		{
			"name": "Get Audit Trail",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "39dc9560-8136-458e-a889-9fe331e9ab9d",
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response is an object with title, data, statusCode, and isSuccess properties\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.be.an('object').that.has.all.keys('title', 'data', 'statusCode', 'isSuccess');\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "30552feb-8b89-4a06-bf63-4405117a6246",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "9c708751-7584-4bbf-9623-dfe33ead7a22",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"url": "{{BaseUrl}}api/administration/audittrails/primarykey/1111e5f1-b856-4582-9390-1f0980deeab5"
			},
			"response": []
		},
		{
			"name": "Get Unseen Notification",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "20964d6e-5c19-4fa0-b9ea-5bed5050cbdf",
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response is an object with title, data, statusCode, and isSuccess properties\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.be.an('object').that.has.all.keys('title', 'data', 'statusCode', 'isSuccess');\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "9444e897-19bd-4ec3-a00a-8fe87471ef3e",
						"exec": [],
						"type": "text/javascript"
					}
				}
			],
			"id": "6096a9f9-b968-4a65-8444-8bafec66924c",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"url": "{{BaseUrl}}api/common/inappnotifications/unseentotal/sfcode/SF-0146"
			},
			"response": []
		},
		{
			"name": "Get Notification with pagination",
			"id": "3bb71032-c98a-405f-9e42-c0da8c8f050e",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BaseUrl}}api/common/inappnotifications?SfCode=SF-0145&Page=1&PageSize=10",
					"host": [
						"{{BaseUrl}}api"
					],
					"path": [
						"common",
						"inappnotifications"
					],
					"query": [
						{
							"key": "SfCode",
							"value": "SF-0145"
						},
						{
							"key": "Page",
							"value": "1"
						},
						{
							"key": "PageSize",
							"value": "10"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "LogedIn User Detail",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "f676df6c-96f7-466d-b0a6-09d3e24bade0",
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response is an object with data property\", function () {\r",
							"    pm.expect(pm.response.json()).to.be.an('object').that.has.property('data');\r",
							"});\r",
							"\r",
							"pm.test(\"Response data has roleID, roleName, and hierarchy properties\", function () {\r",
							"    var data = pm.response.json().data;\r",
							"    pm.expect(data).to.have.property('roleID').that.is.a('number');\r",
							"    pm.expect(data).to.have.property('roleName').that.is.a('string');\r",
							"    pm.expect(data).to.have.property('hierarchy').that.is.a('number');\r",
							"});\r",
							"\r",
							"pm.test(\"Response data has employeeID, fullName, and totalUnseenNotificationCount properties\", function () {\r",
							"    var data = pm.response.json().data;\r",
							"    pm.expect(data).to.have.property('employeeID').that.is.a('string');\r",
							"    pm.expect(data).to.have.property('fullName').that.is.a('string');\r",
							"    pm.expect(data).to.have.property('totalUnseenNotificationCount').that.is.a('number');\r",
							"});\r",
							"\r",
							"pm.test(\"Response data has menus, schools, and permissions properties\", function () {\r",
							"    var data = pm.response.json().data;\r",
							"    pm.expect(data).to.have.property('menus').that.is.an('array');\r",
							"    pm.expect(data).to.have.property('schools').that.is.an('array');\r",
							"    pm.expect(data).to.have.property('permissions').that.is.an('array');\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response data has statusCode and isSuccess properties\", function () {\r",
							"    var data = pm.response.json();\r",
							"    pm.expect(data).to.have.property('statusCode').that.is.a('number');\r",
							"    pm.expect(data).to.have.property('isSuccess').that.is.a('boolean');\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "72a4bd67-54ed-4757-a64f-14434ec6703d",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "480a6ec8-3465-406f-8ab1-a4589c34a665",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"url": "{{BaseUrl}}api/useraccess/loggedinuserdetail"
			},
			"response": []
		},
		{
			"name": "Inventory Daily Requisition",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "f5693fa7-6bad-402f-9260-c9ae795aacb2",
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response is an object with title, data, statusCode, and isSuccess properties\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.be.an('object').that.has.all.keys('title', 'data', 'statusCode', 'isSuccess');\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "f5894cd7-91e2-4681-bd86-adfa5ea0c58e",
						"exec": [],
						"type": "text/javascript"
					}
				}
			],
			"id": "17f0924c-e723-4d1a-8853-4dfeb787eab7",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"url": "{{BaseUrl}}api/inventory/dailyrequisitions/sfCode/sf-0145"
			},
			"response": []
		},
		{
			"name": "Inventory EDR log",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "81d70cf0-5e07-4d58-a715-29f1ea3ebb87",
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response is an object with data property\", function () {\r",
							"    pm.expect(pm.response.json()).to.be.an('object').that.has.property('data');\r",
							"});\r",
							"\r",
							"pm.test(\"Response has a data array with elements\", function () {\r",
							"    pm.expect(pm.response.json().data.data).to.be.an('array').that.is.not.empty;\r",
							"});\r",
							"\r",
							"pm.test(\"Response has a statusCode property\", function () {\r",
							"    pm.expect(pm.response.json()).to.have.property('statusCode');\r",
							"});\r",
							"\r",
							"pm.test(\"Response has an isSuccess property\", function () {\r",
							"    pm.expect(pm.response.json()).to.have.property('isSuccess');\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "434e5a71-eb75-4b6f-af18-76ffb9961abb",
						"exec": [],
						"type": "text/javascript"
					}
				}
			],
			"id": "ce6202bf-ac41-46a1-9e18-0990d1f078de",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"url": "{{BaseUrl}}api/inventory/inventories/sfcode/sf-0145/edrlogs"
			},
			"response": []
		},
		{
			"name": "EDR Log Detail",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "3372d544-1abf-460f-9c8d-6efd3667b608",
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Test for the existence of properties in the root object\r",
							"pm.test(\"Response has title, data, statusCode, and isSuccess properties\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('title');\r",
							"    pm.expect(jsonData).to.have.property('data');\r",
							"    pm.expect(jsonData).to.have.property('statusCode');\r",
							"    pm.expect(jsonData).to.have.property('isSuccess');\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "7f771208-022d-456f-b44c-8deab741f3f4",
						"exec": [],
						"type": "text/javascript"
					}
				}
			],
			"id": "aa1a6164-5aad-42a5-b54c-fae323c697e7",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BaseUrl}}api/inventory/inventories/sfcode/sf-0145/edrlogdetails?EDRLogId=fb84fc94-9dca-4429-a766-3988df3d79b0",
					"host": [
						"{{BaseUrl}}api"
					],
					"path": [
						"inventory",
						"inventories",
						"sfcode",
						"sf-0145",
						"edrlogdetails"
					],
					"query": [
						{
							"key": "EDRLogId",
							"value": "fb84fc94-9dca-4429-a766-3988df3d79b0"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Admin App Setting",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "73cd609e-dfce-44dd-bd7e-eb33069f9c1a",
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is within acceptable range\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"});\r",
							"\r",
							"pm.test(\"Response is an object with title, data, statusCode, and isSuccess properties\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.be.an('object').that.has.all.keys('title', 'data', 'statusCode', 'isSuccess');\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "9ba3ab2b-58f9-48f7-9b89-8b7a4c9777c7",
						"exec": [],
						"type": "text/javascript"
					}
				}
			],
			"id": "2c991ce2-7407-479c-bc1a-c6a78284b62a",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"url": "{{BaseUrl}}api/administration/appsetting"
			},
			"response": []
		},
		{
			"name": "Admin Static Text",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "ac79ada3-453c-4393-b5f9-8aa4b726de32",
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response is an object with title, data, statusCode, and isSuccess properties\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.be.an('object').that.has.all.keys('title', 'data', 'statusCode', 'isSuccess');\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "c2fea579-9ce2-4357-827e-72ef9f72aa00",
						"exec": [],
						"type": "text/javascript"
					}
				}
			],
			"id": "2bc15d2c-f8f0-40f7-8b96-c21ecf45c1c5",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"url": "{{BaseUrl}}api/administration/statictext"
			},
			"response": []
		},
		{
			"name": "Admin Module Setting",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "7898fc59-20d9-422a-a2e6-0d61528de937",
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response is an object with title, data, statusCode, and isSuccess properties\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.be.an('object').that.has.all.keys('title', 'data', 'statusCode', 'isSuccess');\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "ba59341a-2361-4817-8c5a-df0309937a4b",
						"exec": [],
						"type": "text/javascript"
					}
				}
			],
			"id": "7ecf2130-2cee-46ba-848c-a660b0e63f50",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"url": "{{BaseUrl}}api/administration/modulesettings/district/8D175F75-E627-4BAD-9DBF-3108ACCBD35B"
			},
			"response": []
		}
	],
	"auth": {
		"type": "oauth2",
		"oauth2": {
			"clientSecret": "h3nzHimJUG",
			"clientId": "99e4a92a-2723-420c-b939-1470cc839294",
			"accessTokenUrl": "https://svamdev.verify.ibm.com/v1.0/endpoint/default/token",
			"authUrl": "https://svamdev.verify.ibm.com/v1.0/endpoint/default/authorize",
			"redirect_uri": "https://oauth.pstmn.io/v1/callback",
			"tokenName": "",
			"grant_type": "authorization_code_with_pkce",
			"useBrowser": false,
			"password": "Svamtest01",
			"username": "test01",
			"addTokenTo": "header"
		}
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "86d3fff6-a805-4fdd-86b9-878844f3ad30",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "3e984a90-d32b-41d0-9587-c057fb5ee538",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}